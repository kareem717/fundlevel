name: Production Deployments
on:
  push:
    branches:
      - main
    paths:
      - "apps/**"
      - "packages/**"
  workflow_dispatch:

env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
  TRIGGER_ACCESS_TOKEN: ${{ secrets.TRIGGER_ACCESS_TOKEN }}

jobs:
  changes:
    name: Detect changes
    runs-on: ubuntu-latest
    outputs:
      db: ${{ steps.filter.outputs.db }}
      api: ${{ steps.filter.outputs.api }}
      jobs: ${{ steps.filter.outputs.jobs }}
      landing: ${{ steps.filter.outputs.landing }}
      web: ${{ steps.filter.outputs.web }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            db:
              - 'packages/db/drizzle/**' 
            api:
              - 'apps/api/**'
              - 'packages/db/**'
              - 'packages/documents/**'
              - 'packages/jobs/**'
            jobs:
              - 'packages/jobs/**'
              - 'packages/documents/**'
            landing:
              - 'apps/landing/**'
              - 'packages/ui/**'
            web:
              - 'apps/web/**'
              - 'packages/ui/**'
              - 'packages/db/**' 

      - name: Debug filter outputs
        run: |
          echo "api: ${{ steps.filter.outputs.api }}"
          echo "jobs: ${{ steps.filter.outputs.jobs }}"
          echo "landing: ${{ steps.filter.outputs.landing }}"
          echo "web: ${{ steps.filter.outputs.web }}"
          echo "db: ${{ steps.filter.outputs.db }}"

  deploy-jobs:
    name: Deploy Background Jobs
    needs: changes
    if: needs.changes.outputs.jobs == 'true'
    environment: production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install --frozen-lockfile
      - name: Run linter
        run: bun run lint
        working-directory: ./packages/jobs
      - name: Check TypeScript
        run: bun run typecheck
        working-directory: ./packages/jobs
      - name: Deploy Background Jobs
        env:
          TRIGGER_PROJECT_ID: ${{ secrets.TRIGGER_PROJECT_ID }}
          SKIP_ENV_VALIDATION: true
          NODE_ENV: production
        run: |
          TRIGGER_PROJECT_ID=${{ secrets.TRIGGER_PROJECT_ID }} 
          bunx trigger.dev@latest deploy
        working-directory: ./packages/jobs

  migrate-db:
    name: Migrate Database
    needs: changes
    if: needs.changes.outputs.db == 'true'
    environment: production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install --frozen-lockfile
      - name: Run linter
        run: bun run lint
        working-directory: ./packages/db
      - name: Check TypeScript
        run: bun run typecheck
        working-directory: ./packages/db
      - name: Migrate Database
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: bun db:migrate
        working-directory: ./packages/db
        
  deploy-api:
    name: Deploy API to Fly.io
    needs: [changes, deploy-jobs, migrate-db]
    if: always() && (needs.changes.outputs.jobs != 'true' || needs.deploy-jobs.result == 'success') && (needs.changes.outputs.db != 'true' || needs.migrate-db.result == 'success') && needs.changes.outputs.api == 'true'
    runs-on: ubuntu-latest
    concurrency: fly-production
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install
      - name: Run linter
        run: bun run lint
        working-directory: ./apps/api
      - name: Check TypeScript
        run: bun run typecheck
        working-directory: ./apps/api
      - uses: superfly/flyctl-actions/setup-flyctl@master
      - run: flyctl deploy --remote-only --dockerfile apps/api/Dockerfile --config apps/api/fly.toml

  deploy-web:
    name: Deploy Web App to Vercel
    needs: [changes, deploy-jobs, migrate-db, deploy-api]
    if: always() && (needs.changes.outputs.jobs != 'true' || needs.deploy-jobs.result == 'success') && (needs.changes.outputs.db != 'true' || needs.migrate-db.result == 'success') && (needs.changes.outputs.api != 'true' || needs.deploy-api.result == 'success') && needs.changes.outputs.web == 'true'
    environment: production
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest
      - name: Install dependencies
        run: bun install --frozen-lockfile
      - name: Run linter
        run: bun run lint
        working-directory: ./apps/web
      - name: Check TypeScript
        run: NODE_OPTIONS="--max-old-space-size=8192" bun run typecheck
        working-directory: ./apps/web
      - name: Pull Vercel Environment Information
        run: bunx vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_WEB }}
      - name: Build Project Artifacts
        run: bunx vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_WEB }}
      - name: Deploy Project Artifacts to Vercel
        run: |
          bunx vercel deploy --prebuilt --prod --archive=tgz --token=${{ secrets.VERCEL_TOKEN }} > domain.txt
          bunx vercel alias --scope=${{ secrets.VERCEL_ORG_ID }} --token=${{ secrets.VERCEL_TOKEN }} set `cat domain.txt` app.fundlevel.co
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_WEB }}

  # deploy-landing:
  #   name: Deploy Landing Page to Vercel
  #   needs: [changes]
  #   environment: production
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: oven-sh/setup-bun@v1
  #       with:
  #         bun-version: latest
  #     - name: Install dependencies
  #       run: bun install --frozen-lockfile
  #     - name: Run linter
  #       run: bun run lint
  #       working-directory: ./apps/landing
  #     - name: Check TypeScript
  #       run: bun run typecheck
  #       working-directory: ./apps/landing
  #     - name: Pull Vercel Environment Information
  #       run: bunx vercel pull --yes --environment=production --token=${{ secrets.VERCEL_TOKEN }}
  #       env:
  #         VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_LANDING }}
  #     - name: Build Project Artifacts
  #       run: bunx vercel build --prod --token=${{ secrets.VERCEL_TOKEN }}
  #       env:
  #         VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_LANDING }}
  #     - name: Deploy Project Artifacts to Vercel
  #       run: |
  #         bunx vercel deploy --prebuilt --prod --archive=tgz --token=${{ secrets.VERCEL_TOKEN }} > domain.txt
  #         bunx vercel alias --scope=${{ secrets.VERCEL_ORG_ID }} --token=${{ secrets.VERCEL_TOKEN }} set `cat domain.txt` www.fundlevel.co
  #       env:
  #         VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_LANDING }} 