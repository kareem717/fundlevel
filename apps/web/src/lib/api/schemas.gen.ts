// This file is auto-generated by @hey-api/openapi-ts

export const AccountSchema = {
    additionalProperties: false,
    properties: {
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        firstName: {
            maxLength: 30,
            minLength: 3,
            pattern: '^[a-zA-Z]+$',
            patternDescription: 'Must be a alphabetical string with at least 3 characters',
            type: 'string'
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        lastName: {
            maxLength: 30,
            minLength: 3,
            pattern: '^[a-zA-Z]+$',
            patternDescription: 'Must be a alphabetical string with at least 3 characters',
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        userId: {
            format: 'uuid',
            maxLength: 36,
            minLength: 36,
            type: 'string'
        }
    },
    required: ['id', 'userId', 'firstName', 'lastName', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const AddressSchema = {
    additionalProperties: false,
    properties: {
        city: {
            type: 'string'
        },
        country: {
            type: 'string'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        district: {
            type: 'string'
        },
        fullAddress: {
            type: 'string'
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        line1: {
            type: 'string'
        },
        line2: {
            type: 'string'
        },
        postalCode: {
            type: 'string'
        },
        rawJson: {},
        region: {
            type: 'string'
        },
        regionCode: {
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        xCoordinate: {
            format: 'double',
            type: 'number'
        },
        yCoordinate: {
            format: 'double',
            type: 'number'
        }
    },
    required: ['id', 'xCoordinate', 'yCoordinate', 'line1', 'line2', 'city', 'region', 'postalCode', 'country', 'rawJson', 'district', 'regionCode', 'fullAddress', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const BusinessSchema = {
    additionalProperties: false,
    properties: {
        address: {
            '$ref': '#/components/schemas/Address'
        },
        addressId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        businessNumber: {
            minLength: 1,
            type: 'string'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        foundingDate: {
            format: 'date-time',
            type: 'string'
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        industry: {
            '$ref': '#/components/schemas/Industry'
        },
        industryId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        isRemote: {
            default: false,
            type: 'boolean'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        ownerAccountId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        status: {
            enum: ['pending', 'active', 'disabled'],
            type: 'string'
        },
        stripeConnectedAccountId: {
            type: 'string'
        },
        teamSize: {
            enum: ['1', '2-10', '11-50', '51-200', '201-500', '501-1000', '1000+'],
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        }
    },
    required: ['address', 'industry', 'name', 'businessNumber', 'foundingDate', 'ownerAccountId', 'status', 'addressId', 'teamSize', 'stripeConnectedAccountId', 'industryId', 'id', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const BusinessParamsSchema = {
    additionalProperties: false,
    properties: {
        businessNumber: {
            minLength: 1,
            type: 'string'
        },
        foundingDate: {
            format: 'date-time',
            type: 'string'
        },
        industryId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        isRemote: {
            default: false,
            type: 'boolean'
        },
        name: {
            minLength: 1,
            type: 'string'
        },
        ownerAccountId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        teamSize: {
            enum: ['1', '2-10', '11-50', '51-200', '201-500', '501-1000', '1000+'],
            type: 'string'
        }
    },
    required: ['name', 'businessNumber', 'foundingDate', 'ownerAccountId', 'teamSize', 'industryId'],
    type: 'object'
} as const;

export const ChatSchema = {
    additionalProperties: false,
    properties: {
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        createdByAccountId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        createdForAccountId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        lastMessageAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        }
    },
    required: ['lastMessageAt', 'createdByAccountId', 'createdForAccountId', 'id', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const ChatMessageSchema = {
    additionalProperties: false,
    properties: {
        content: {
            maxLength: 1000,
            minLength: 1,
            type: 'string'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        readAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        senderAccountId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        }
    },
    required: ['readAt', 'content', 'senderAccountId', 'id', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const CreateAccountParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreateAccountParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        firstName: {
            maxLength: 30,
            minLength: 3,
            pattern: '^[a-zA-Z]+$',
            patternDescription: 'Must be a alphabetical string with at least 3 characters',
            type: 'string'
        },
        lastName: {
            maxLength: 30,
            minLength: 3,
            pattern: '^[a-zA-Z]+$',
            patternDescription: 'Must be a alphabetical string with at least 3 characters',
            type: 'string'
        },
        userId: {
            format: 'uuid',
            maxLength: 36,
            minLength: 36,
            type: 'string'
        }
    },
    required: ['userId', 'firstName', 'lastName'],
    type: 'object'
} as const;

export const CreateAddressParamsSchema = {
    additionalProperties: false,
    properties: {
        city: {
            type: 'string'
        },
        country: {
            type: 'string'
        },
        district: {
            type: 'string'
        },
        fullAddress: {
            type: 'string'
        },
        line1: {
            type: 'string'
        },
        line2: {
            type: 'string'
        },
        postalCode: {
            type: 'string'
        },
        rawJson: {},
        region: {
            type: 'string'
        },
        regionCode: {
            type: 'string'
        },
        xCoordinate: {
            format: 'double',
            type: 'number'
        },
        yCoordinate: {
            format: 'double',
            type: 'number'
        }
    },
    required: ['xCoordinate', 'yCoordinate', 'line1', 'line2', 'city', 'region', 'postalCode', 'country', 'rawJson', 'district', 'regionCode', 'fullAddress'],
    type: 'object'
} as const;

export const CreateBusinessParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreateBusinessParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        address: {
            '$ref': '#/components/schemas/CreateAddressParams'
        },
        business: {
            '$ref': '#/components/schemas/BusinessParams'
        }
    },
    required: ['business', 'address'],
    type: 'object'
} as const;

export const CreateChatParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreateChatParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        createdByAccountId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        createdForAccountId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        }
    },
    required: ['createdByAccountId', 'createdForAccountId'],
    type: 'object'
} as const;

export const CreateChatResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreateChatResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        createdByAccountId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        createdForAccountId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        lastMessageAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        message: {
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        }
    },
    required: ['lastMessageAt', 'createdByAccountId', 'createdForAccountId', 'id', 'createdAt', 'updatedAt', 'deletedAt', 'message'],
    type: 'object'
} as const;

export const CreateInvestmentParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreateInvestmentParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        investorId: {
            format: 'int64',
            type: 'integer'
        },
        roundId: {
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['roundId', 'investorId'],
    type: 'object'
} as const;

export const CreateMessageParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreateMessageParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        content: {
            maxLength: 1000,
            minLength: 1,
            type: 'string'
        },
        senderAccountId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        }
    },
    required: ['content', 'senderAccountId'],
    type: 'object'
} as const;

export const CreateRoundParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreateRoundParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        beginsAt: {
            format: 'date-time',
            type: 'string'
        },
        description: {
            maxLength: 3000,
            minLength: 10,
            type: 'string'
        },
        endsAt: {
            format: 'date-time',
            type: 'string'
        },
        investorCount: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        percentageOffered: {
            format: 'double',
            maximum: 100,
            minimum: 0,
            type: 'number'
        },
        percentageValue: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        valueCurrency: {
            enum: ['usd', 'gbp', 'eur', 'cad', 'aud', 'jpy'],
            type: 'string'
        },
        ventureId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        }
    },
    required: ['ventureId', 'beginsAt', 'endsAt', 'percentageOffered', 'valueCurrency', 'percentageValue', 'investorCount', 'description'],
    type: 'object'
} as const;

export const CreateVentureParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreateVentureParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        businessId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        description: {
            maxLength: 5000,
            minLength: 3,
            type: 'string'
        },
        name: {
            maxLength: 100,
            minLength: 3,
            type: 'string'
        },
        overview: {
            maxLength: 30,
            minLength: 10,
            type: 'string'
        }
    },
    required: ['businessId', 'name', 'description', 'overview'],
    type: 'object'
} as const;

export const ErrorDetailSchema = {
    additionalProperties: false,
    properties: {
        location: {
            type: 'string'
        },
        message: {
            type: 'string'
        },
        value: {}
    },
    type: 'object'
} as const;

export const ErrorModelSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/ErrorModel.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        detail: {
            examples: ['Property foo is required but is missing.'],
            type: 'string'
        },
        errors: {
            items: {
                '$ref': '#/components/schemas/ErrorDetail'
            },
            type: ['array', 'null']
        },
        instance: {
            examples: ['https://example.com/error-log/abc123'],
            format: 'uri',
            type: 'string'
        },
        status: {
            examples: [400],
            format: 'int64',
            type: 'integer'
        },
        title: {
            examples: ['Bad Request'],
            type: 'string'
        },
        type: {
            default: 'about:blank',
            examples: ['https://example.com/errors/example'],
            format: 'uri',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const FundingOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/FundingOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        message: {
            type: 'string'
        },
        totalFunding: {
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['totalFunding', 'message'],
    type: 'object'
} as const;

export const GetAllIndustriesResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetAllIndustriesResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        industries: {
            items: {
                '$ref': '#/components/schemas/Industry'
            },
            type: ['array', 'null']
        },
        message: {
            type: 'string'
        }
    },
    required: ['industries', 'message'],
    type: 'object'
} as const;

export const GetBusinessesOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetBusinessesOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        businesses: {
            items: {
                '$ref': '#/components/schemas/Business'
            },
            type: ['array', 'null']
        },
        message: {
            type: 'string'
        }
    },
    required: ['businesses', 'message'],
    type: 'object'
} as const;

export const GetChatMessagesResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetChatMessagesResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        hasNext: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        messages: {
            items: {
                '$ref': '#/components/schemas/ChatMessage'
            },
            type: ['array', 'null']
        },
        nextCursor: {
            format: 'date-time',
            type: ['string', 'null']
        }
    },
    required: ['messages', 'message', 'nextCursor', 'hasNext'],
    type: 'object'
} as const;

export const GetChatsOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetChatsOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        chats: {
            items: {
                '$ref': '#/components/schemas/Chat'
            },
            type: ['array', 'null']
        },
        hasNext: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        nextCursor: {
            format: 'date-time',
            type: ['string', 'null']
        }
    },
    required: ['chats', 'nextCursor', 'hasNext', 'message'],
    type: 'object'
} as const;

export const GetCursorPaginatedRoundInvestmentsOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetCursorPaginatedRoundInvestmentsOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        hasMore: {
            type: 'boolean'
        },
        investments: {
            items: {
                '$ref': '#/components/schemas/RoundInvestment'
            },
            type: ['array', 'null']
        },
        message: {
            type: 'string'
        },
        nextCursor: {
            format: 'int64',
            type: ['integer', 'null']
        }
    },
    required: ['investments', 'message', 'nextCursor', 'hasMore'],
    type: 'object'
} as const;

export const GetCursorPaginatedRoundsOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetCursorPaginatedRoundsOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        nextCursor: {
            format: 'int64',
            type: ['integer', 'null']
        },
        rounds: {
            items: {
                '$ref': '#/components/schemas/Round'
            },
            type: ['array', 'null']
        }
    },
    required: ['rounds', 'message', 'nextCursor', 'hasMore'],
    type: 'object'
} as const;

export const GetCursorPaginatedVenturesOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetCursorPaginatedVenturesOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        nextCursor: {
            format: 'int64',
            type: ['integer', 'null']
        },
        ventures: {
            items: {
                '$ref': '#/components/schemas/Venture'
            },
            type: ['array', 'null']
        }
    },
    required: ['ventures', 'message', 'nextCursor', 'hasMore'],
    type: 'object'
} as const;

export const GetDailyAggregatedBusinessAnalyticsOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetDailyAggregatedBusinessAnalyticsOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        analytics: {
            items: {
                '$ref': '#/components/schemas/SimplifiedDailyAggregatedBusinessAnalytics'
            },
            type: ['array', 'null']
        },
        message: {
            type: 'string'
        }
    },
    required: ['analytics', 'message'],
    type: 'object'
} as const;

export const GetDailyAggregatedRoundAnalyticsOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetDailyAggregatedRoundAnalyticsOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        analytics: {
            items: {
                '$ref': '#/components/schemas/SimplifiedDailyAggregatedRoundAnalytics'
            },
            type: ['array', 'null']
        },
        message: {
            type: 'string'
        }
    },
    required: ['analytics', 'message'],
    type: 'object'
} as const;

export const GetDailyAggregatedVentureAnalyticsOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetDailyAggregatedVentureAnalyticsOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        analytics: {
            items: {
                '$ref': '#/components/schemas/SimplifiedDailyAggregatedVentureAnalytics'
            },
            type: ['array', 'null']
        },
        message: {
            type: 'string'
        }
    },
    required: ['analytics', 'message'],
    type: 'object'
} as const;

export const GetInvestmentPaymentIntentClientSecretOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetInvestmentPaymentIntentClientSecretOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        clientSecret: {
            type: 'string'
        },
        message: {
            type: 'string'
        }
    },
    required: ['clientSecret', 'message'],
    type: 'object'
} as const;

export const GetLikeCountOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetLikeCountOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        count: {
            format: 'int64',
            type: 'integer'
        },
        message: {
            type: 'string'
        }
    },
    required: ['count', 'message'],
    type: 'object'
} as const;

export const GetOffsetPaginatedRoundInvestmentsOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetOffsetPaginatedRoundInvestmentsOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        hasMore: {
            type: 'boolean'
        },
        investments: {
            items: {
                '$ref': '#/components/schemas/RoundInvestment'
            },
            type: ['array', 'null']
        },
        message: {
            type: 'string'
        },
        total: {
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['investments', 'message', 'hasMore', 'total'],
    type: 'object'
} as const;

export const GetOffsetPaginatedRoundsOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetOffsetPaginatedRoundsOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        rounds: {
            items: {
                '$ref': '#/components/schemas/Round'
            },
            type: ['array', 'null']
        },
        total: {
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['rounds', 'message', 'hasMore', 'total'],
    type: 'object'
} as const;

export const GetOffsetPaginatedVenturesOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetOffsetPaginatedVenturesOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        total: {
            format: 'int64',
            type: 'integer'
        },
        ventures: {
            items: {
                '$ref': '#/components/schemas/Venture'
            },
            type: ['array', 'null']
        }
    },
    required: ['ventures', 'message', 'hasMore', 'total'],
    type: 'object'
} as const;

export const ImpressionCountOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/ImpressionCountOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        count: {
            format: 'int64',
            type: 'integer'
        },
        message: {
            type: 'string'
        }
    },
    required: ['count', 'message'],
    type: 'object'
} as const;

export const ImpressionInputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/ImpressionInputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        accountId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        }
    },
    required: ['accountId'],
    type: 'object'
} as const;

export const IndustrySchema = {
    additionalProperties: false,
    properties: {
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        label: {
            maxLength: 30,
            minLength: 3,
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        }
    },
    required: ['id', 'label', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const IsFavouritedOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/IsFavouritedOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        favourited: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        }
    },
    required: ['favourited', 'message'],
    type: 'object'
} as const;

export const MessageResponseSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/MessageResponse.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        message: {
            type: 'string'
        }
    },
    required: ['message'],
    type: 'object'
} as const;

export const OnboardStripeConnectedAccountInputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/OnboardStripeConnectedAccountInputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        refreshURL: {
            type: 'string'
        },
        returnURL: {
            type: 'string'
        }
    },
    required: ['returnURL', 'refreshURL'],
    type: 'object'
} as const;

export const RoundSchema = {
    additionalProperties: false,
    properties: {
        beginsAt: {
            format: 'date-time',
            type: 'string'
        },
        buyIn: {
            format: 'double',
            minimum: 1,
            type: 'number'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        description: {
            maxLength: 3000,
            minLength: 10,
            type: 'string'
        },
        endsAt: {
            format: 'date-time',
            type: 'string'
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        investorCount: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        percentageOffered: {
            format: 'double',
            maximum: 100,
            minimum: 0,
            type: 'number'
        },
        percentageValue: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        status: {
            enum: ['active', 'successful', 'failed'],
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        valueCurrency: {
            enum: ['usd', 'gbp', 'eur', 'cad', 'aud', 'jpy'],
            type: 'string'
        },
        venture: {
            '$ref': '#/components/schemas/Venture'
        },
        ventureId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        }
    },
    required: ['ventureId', 'beginsAt', 'endsAt', 'percentageOffered', 'percentageValue', 'valueCurrency', 'status', 'investorCount', 'buyIn', 'description', 'venture', 'id', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const RoundInvestmentSchema = {
    additionalProperties: false,
    properties: {
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        investor: {
            '$ref': '#/components/schemas/Account'
        },
        investorId: {
            format: 'int64',
            type: 'integer'
        },
        payment: {
            '$ref': '#/components/schemas/RoundInvestmentPayment'
        },
        round: {
            '$ref': '#/components/schemas/Round'
        },
        roundId: {
            format: 'int64',
            type: 'integer'
        },
        status: {
            enum: ['pending', 'processing', 'rejected', 'withdrawn', 'successful', 'round_closed'],
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        }
    },
    required: ['status', 'payment', 'round', 'investor', 'id', 'roundId', 'investorId', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const RoundInvestmentPaymentSchema = {
    additionalProperties: false,
    properties: {
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        roundInvestmentId: {
            format: 'int64',
            type: 'integer'
        },
        status: {
            enum: ['cancelled', 'processing', 'requires_action', 'requires_capture', 'requires_confirmation', 'requires_payment_method', 'succeeded'],
            type: 'string'
        },
        stripePaymentIntentClientSecret: {
            type: 'string'
        },
        stripePaymentIntentId: {
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        }
    },
    required: ['roundInvestmentId', 'status', 'stripePaymentIntentId', 'stripePaymentIntentClientSecret', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const SimplifiedDailyAggregatedBusinessAnalyticsSchema = {
    additionalProperties: false,
    properties: {
        dayOfYear: {
            format: 'int64',
            type: 'integer'
        },
        favouritedCount: {
            format: 'int64',
            type: 'integer'
        },
        impressionsCount: {
            format: 'int64',
            type: 'integer'
        },
        uniquesImpressionsCount: {
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['dayOfYear', 'impressionsCount', 'uniquesImpressionsCount', 'favouritedCount'],
    type: 'object'
} as const;

export const SimplifiedDailyAggregatedRoundAnalyticsSchema = {
    additionalProperties: false,
    properties: {
        dayOfYear: {
            format: 'int64',
            type: 'integer'
        },
        favouritedCount: {
            format: 'int64',
            type: 'integer'
        },
        impressionsCount: {
            format: 'int64',
            type: 'integer'
        },
        uniquesImpressionsCount: {
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['dayOfYear', 'impressionsCount', 'uniquesImpressionsCount', 'favouritedCount'],
    type: 'object'
} as const;

export const SimplifiedDailyAggregatedVentureAnalyticsSchema = {
    additionalProperties: false,
    properties: {
        dayOfYear: {
            format: 'int64',
            type: 'integer'
        },
        favouritedCount: {
            format: 'int64',
            type: 'integer'
        },
        impressionsCount: {
            format: 'int64',
            type: 'integer'
        },
        uniquesImpressionsCount: {
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['dayOfYear', 'impressionsCount', 'uniquesImpressionsCount', 'favouritedCount'],
    type: 'object'
} as const;

export const SingleAccountResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/SingleAccountResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        account: {
            '$ref': '#/components/schemas/Account'
        },
        message: {
            type: 'string'
        }
    },
    required: ['account', 'message'],
    type: 'object'
} as const;

export const SingleBusinessResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/SingleBusinessResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        business: {
            '$ref': '#/components/schemas/Business'
        },
        message: {
            type: 'string'
        }
    },
    required: ['business', 'message'],
    type: 'object'
} as const;

export const SingleInvestmentResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/SingleInvestmentResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        investment: {
            '$ref': '#/components/schemas/RoundInvestment'
        },
        message: {
            type: 'string'
        }
    },
    required: ['investment', 'message'],
    type: 'object'
} as const;

export const SingleRoundResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/SingleRoundResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        message: {
            type: 'string'
        },
        round: {
            '$ref': '#/components/schemas/Round'
        }
    },
    required: ['round', 'message'],
    type: 'object'
} as const;

export const SingleVentureResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/SingleVentureResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        message: {
            type: 'string'
        },
        venture: {
            '$ref': '#/components/schemas/Venture'
        }
    },
    required: ['venture', 'message'],
    type: 'object'
} as const;

export const URLOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/URLOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        message: {
            type: 'string'
        },
        url: {
            type: 'string'
        }
    },
    required: ['url', 'message'],
    type: 'object'
} as const;

export const UpdateAccountParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/UpdateAccountParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        firstName: {
            maxLength: 30,
            minLength: 3,
            pattern: '^[a-zA-Z]+$',
            patternDescription: 'Must be a alphabetical string with at least 3 characters',
            type: 'string'
        },
        lastName: {
            maxLength: 30,
            minLength: 3,
            pattern: '^[a-zA-Z]+$',
            patternDescription: 'Must be a alphabetical string with at least 3 characters',
            type: 'string'
        }
    },
    required: ['firstName', 'lastName'],
    type: 'object'
} as const;

export const UpdateMessageParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/UpdateMessageParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        content: {
            maxLength: 1000,
            minLength: 1,
            type: 'string'
        },
        readAt: {
            format: 'date-time',
            type: ['string', 'null']
        }
    },
    required: ['content', 'readAt'],
    type: 'object'
} as const;

export const UpdateVentureParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/UpdateVentureParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        description: {
            maxLength: 5000,
            minLength: 3,
            type: 'string'
        },
        name: {
            maxLength: 100,
            minLength: 3,
            type: 'string'
        },
        overview: {
            maxLength: 30,
            minLength: 10,
            type: 'string'
        }
    },
    required: ['name', 'description', 'overview'],
    type: 'object'
} as const;

export const VentureSchema = {
    additionalProperties: false,
    properties: {
        activeRound: {
            '$ref': '#/components/schemas/VentureRound'
        },
        business: {
            '$ref': '#/components/schemas/Business'
        },
        businessId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        description: {
            maxLength: 5000,
            minLength: 3,
            type: 'string'
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        isHidden: {
            type: 'boolean'
        },
        name: {
            maxLength: 100,
            minLength: 3,
            type: 'string'
        },
        overview: {
            maxLength: 30,
            minLength: 10,
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        }
    },
    required: ['businessId', 'isHidden', 'business', 'name', 'description', 'overview', 'id', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const VentureRoundSchema = {
    additionalProperties: false,
    properties: {
        buyIn: {
            format: 'double',
            minimum: 1,
            type: 'number'
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        investorCount: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        percentageOffered: {
            format: 'double',
            maximum: 100,
            minimum: 0,
            type: 'number'
        },
        percentageValue: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        valueCurrency: {
            enum: ['usd', 'gbp', 'eur', 'cad', 'aud', 'jpy'],
            type: 'string'
        },
        ventureId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        }
    },
    required: ['ventureId', 'percentageOffered', 'percentageValue', 'valueCurrency', 'investorCount', 'buyIn', 'id'],
    type: 'object'
} as const;