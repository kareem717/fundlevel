// This file is auto-generated by @hey-api/openapi-ts

export const AccountSchema = {
    additionalProperties: false,
    properties: {
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        firstName: {
            maxLength: 30,
            minLength: 3,
            pattern: '^[a-zA-Z]+$',
            patternDescription: 'Must be a alphabetical string with at least 3 characters',
            type: 'string'
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        lastName: {
            maxLength: 30,
            minLength: 3,
            pattern: '^[a-zA-Z]+$',
            patternDescription: 'Must be a alphabetical string with at least 3 characters',
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        userId: {
            format: 'uuid',
            maxLength: 36,
            minLength: 36,
            type: 'string'
        }
    },
    required: ['id', 'userId', 'firstName', 'lastName', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const CreateAccountParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreateAccountParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        firstName: {
            maxLength: 30,
            minLength: 3,
            pattern: '^[a-zA-Z]+$',
            patternDescription: 'Must be a alphabetical string with at least 3 characters',
            type: 'string'
        },
        lastName: {
            maxLength: 30,
            minLength: 3,
            pattern: '^[a-zA-Z]+$',
            patternDescription: 'Must be a alphabetical string with at least 3 characters',
            type: 'string'
        },
        userId: {
            format: 'uuid',
            maxLength: 36,
            minLength: 36,
            type: 'string'
        }
    },
    required: ['userId', 'firstName', 'lastName'],
    type: 'object'
} as const;

export const CreateOfferParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreateOfferParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        amount: {
            format: 'double',
            maximum: 1000000000000000,
            minimum: 0,
            type: 'number'
        },
        currency: {
            type: 'string'
        },
        offererAccountId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        percentageAmount: {
            format: 'double',
            maximum: 100,
            minimum: 0,
            type: 'number'
        },
        roundId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        }
    },
    required: ['roundId', 'offererAccountId', 'percentageAmount', 'amount', 'currency'],
    type: 'object'
} as const;

export const CreateRoundParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreateRoundParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        endTime: {
            format: 'date-time',
            type: 'string'
        },
        isAuctioned: {
            type: 'boolean'
        },
        maximumInvestmentPercentage: {
            format: 'double',
            maximum: 100,
            minimum: 0,
            type: 'number'
        },
        minimumInvestmentPercentage: {
            format: 'double',
            maximum: 100,
            minimum: 0,
            type: 'number'
        },
        offeredPercentage: {
            format: 'double',
            maximum: 100,
            minimum: 0,
            type: 'number'
        },
        percentageValue: {
            format: 'double',
            maximum: 1000000000000000,
            minimum: 0,
            type: 'number'
        },
        percentageValueCurrency: {
            type: 'string'
        },
        startTime: {
            format: 'date-time',
            type: 'string'
        },
        ventureId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        }
    },
    required: ['offeredPercentage', 'percentageValue', 'percentageValueCurrency', 'minimumInvestmentPercentage', 'maximumInvestmentPercentage', 'isAuctioned', 'startTime', 'ventureId', 'endTime'],
    type: 'object'
} as const;

export const CreateVentureParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreateVentureParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        description: {
            maxLength: 5000,
            minLength: 3,
            type: 'string'
        },
        name: {
            maxLength: 100,
            minLength: 3,
            type: 'string'
        },
        ownerAccountId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        }
    },
    required: ['ownerAccountId', 'name', 'description'],
    type: 'object'
} as const;

export const ErrorDetailSchema = {
    additionalProperties: false,
    properties: {
        location: {
            type: 'string'
        },
        message: {
            type: 'string'
        },
        value: {}
    },
    type: 'object'
} as const;

export const ErrorModelSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/ErrorModel.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        detail: {
            examples: ['Property foo is required but is missing.'],
            type: 'string'
        },
        errors: {
            items: {
                '$ref': '#/components/schemas/ErrorDetail'
            },
            type: ['array', 'null']
        },
        instance: {
            examples: ['https://example.com/error-log/abc123'],
            format: 'uri',
            type: 'string'
        },
        status: {
            examples: [400],
            format: 'int64',
            type: 'integer'
        },
        title: {
            examples: ['Bad Request'],
            type: 'string'
        },
        type: {
            default: 'about:blank',
            examples: ['https://example.com/errors/example'],
            format: 'uri',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const GetAllVenturesOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetAllVenturesOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        nextCursor: {
            format: 'int64',
            type: ['integer', 'null']
        },
        ventures: {
            items: {
                '$ref': '#/components/schemas/Venture'
            },
            type: ['array', 'null']
        }
    },
    required: ['ventures', 'message', 'nextCursor', 'hasMore'],
    type: 'object'
} as const;

export const GetManyOffersOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetManyOffersOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        nextCursor: {
            format: 'int64',
            type: ['integer', 'null']
        },
        offers: {
            items: {
                '$ref': '#/components/schemas/Offer'
            },
            type: ['array', 'null']
        }
    },
    required: ['offers', 'message', 'nextCursor', 'hasMore'],
    type: 'object'
} as const;

export const GetManyRoundsOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetManyRoundsOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        nextCursor: {
            format: 'int64',
            type: ['integer', 'null']
        },
        rounds: {
            items: {
                '$ref': '#/components/schemas/Round'
            },
            type: ['array', 'null']
        }
    },
    required: ['rounds', 'message', 'nextCursor', 'hasMore'],
    type: 'object'
} as const;

export const MessageResponseSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/MessageResponse.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        message: {
            type: 'string'
        }
    },
    required: ['message'],
    type: 'object'
} as const;

export const OfferSchema = {
    additionalProperties: false,
    properties: {
        amount: {
            format: 'double',
            maximum: 1000000000000000,
            minimum: 0,
            type: 'number'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        currency: {
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        offererAccountId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        percentageAmount: {
            format: 'double',
            maximum: 100,
            minimum: 0,
            type: 'number'
        },
        roundId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        status: {
            enum: ['pending', 'accepted', 'rejected', 'withdrawn'],
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        }
    },
    required: ['id', 'roundId', 'offererAccountId', 'percentageAmount', 'amount', 'currency', 'status', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const RoundSchema = {
    additionalProperties: false,
    properties: {
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        endTime: {
            format: 'date-time',
            type: 'string'
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        isAuctioned: {
            type: 'boolean'
        },
        maximumInvestmentPercentage: {
            format: 'double',
            maximum: 100,
            minimum: 0,
            type: 'number'
        },
        minimumInvestmentPercentage: {
            format: 'double',
            maximum: 100,
            minimum: 0,
            type: 'number'
        },
        offeredPercentage: {
            format: 'double',
            maximum: 100,
            minimum: 0,
            type: 'number'
        },
        percentageValue: {
            format: 'double',
            maximum: 1000000000000000,
            minimum: 0,
            type: 'number'
        },
        percentageValueCurrency: {
            type: 'string'
        },
        startTime: {
            format: 'date-time',
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        ventureId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        }
    },
    required: ['id', 'offeredPercentage', 'percentageValue', 'percentageValueCurrency', 'minimumInvestmentPercentage', 'maximumInvestmentPercentage', 'isAuctioned', 'startTime', 'ventureId', 'endTime', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const SingleAccountResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/SingleAccountResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        account: {
            '$ref': '#/components/schemas/Account'
        },
        message: {
            type: 'string'
        }
    },
    required: ['account', 'message'],
    type: 'object'
} as const;

export const SingleOfferResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/SingleOfferResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        message: {
            type: 'string'
        },
        offer: {
            '$ref': '#/components/schemas/Offer'
        }
    },
    required: ['offer', 'message'],
    type: 'object'
} as const;

export const SingleRoundResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/SingleRoundResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        message: {
            type: 'string'
        },
        round: {
            '$ref': '#/components/schemas/Round'
        }
    },
    required: ['round', 'message'],
    type: 'object'
} as const;

export const SingleVentureResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/SingleVentureResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        message: {
            type: 'string'
        },
        venture: {
            '$ref': '#/components/schemas/Venture'
        }
    },
    required: ['venture', 'message'],
    type: 'object'
} as const;

export const UpdateAccountParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/UpdateAccountParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        firstName: {
            maxLength: 30,
            minLength: 3,
            pattern: '^[a-zA-Z]+$',
            patternDescription: 'Must be a alphabetical string with at least 3 characters',
            type: 'string'
        },
        lastName: {
            maxLength: 30,
            minLength: 3,
            pattern: '^[a-zA-Z]+$',
            patternDescription: 'Must be a alphabetical string with at least 3 characters',
            type: 'string'
        }
    },
    required: ['firstName', 'lastName'],
    type: 'object'
} as const;

export const UpdateOfferParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/UpdateOfferParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        status: {
            enum: ['pending', 'accepted', 'rejected', 'withdrawn'],
            type: 'string'
        }
    },
    required: ['status'],
    type: 'object'
} as const;

export const UpdateRoundParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/UpdateRoundParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        endTime: {
            format: 'date-time',
            type: 'string'
        }
    },
    required: ['endTime'],
    type: 'object'
} as const;

export const UpdateVentureParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/UpdateVentureParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        description: {
            maxLength: 5000,
            minLength: 3,
            type: 'string'
        },
        name: {
            maxLength: 100,
            minLength: 3,
            type: 'string'
        }
    },
    required: ['name', 'description'],
    type: 'object'
} as const;

export const VentureSchema = {
    additionalProperties: false,
    properties: {
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        description: {
            maxLength: 5000,
            minLength: 3,
            type: 'string'
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        name: {
            maxLength: 100,
            minLength: 3,
            type: 'string'
        },
        ownerAccountId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        }
    },
    required: ['id', 'ownerAccountId', 'name', 'description', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;