// This file is auto-generated by @hey-api/openapi-ts

export const AccountSchema = {
    additionalProperties: false,
    properties: {
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        firstName: {
            maxLength: 30,
            minLength: 3,
            pattern: '^[a-zA-Z]+$',
            patternDescription: 'Must be a alphabetical string with at least 3 characters',
            type: 'string'
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        lastName: {
            maxLength: 30,
            minLength: 3,
            pattern: '^[a-zA-Z]+$',
            patternDescription: 'Must be a alphabetical string with at least 3 characters',
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        userId: {
            format: 'uuid',
            maxLength: 36,
            minLength: 36,
            type: 'string'
        }
    },
    required: ['id', 'userId', 'firstName', 'lastName', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const AddressSchema = {
    additionalProperties: false,
    properties: {
        city: {
            type: 'string'
        },
        country: {
            type: 'string'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        district: {
            type: 'string'
        },
        fullAddress: {
            type: 'string'
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        line1: {
            type: 'string'
        },
        line2: {
            type: 'string'
        },
        postalCode: {
            type: 'string'
        },
        rawJson: {},
        region: {
            type: 'string'
        },
        regionCode: {
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        xCoordinate: {
            format: 'double',
            type: 'number'
        },
        yCoordinate: {
            format: 'double',
            type: 'number'
        }
    },
    required: ['id', 'xCoordinate', 'yCoordinate', 'line1', 'line2', 'city', 'region', 'postalCode', 'country', 'rawJson', 'district', 'regionCode', 'fullAddress', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const BusinessSchema = {
    additionalProperties: false,
    properties: {
        address: {
            '$ref': '#/components/schemas/Address'
        },
        addressId: {
            format: 'int64',
            minimum: 1,
            readOnly: true,
            type: 'integer'
        },
        businessNumber: {
            type: 'string'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        foundingDate: {
            format: 'date-time',
            type: 'string'
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        name: {
            type: 'string'
        },
        ownerAccountId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        status: {
            enum: ['pending', 'active', 'disabled'],
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        }
    },
    required: ['address', 'id', 'name', 'businessNumber', 'foundingDate', 'ownerAccountId', 'status', 'addressId', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const BusinessMemberSchema = {
    additionalProperties: false,
    properties: {
        accountId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        businessId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        role: {
            enum: ['admin', 'member'],
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        }
    },
    required: ['businessId', 'accountId', 'role', 'createdAt', 'updatedAt'],
    type: 'object'
} as const;

export const BusinessParamsSchema = {
    additionalProperties: false,
    properties: {
        addressId: {
            format: 'int64',
            minimum: 1,
            readOnly: true,
            type: 'integer'
        },
        businessNumber: {
            type: 'string'
        },
        foundingDate: {
            format: 'date-time',
            type: 'string'
        },
        name: {
            type: 'string'
        },
        ownerAccountId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        status: {
            enum: ['pending', 'active', 'disabled'],
            type: 'string'
        }
    },
    required: ['name', 'businessNumber', 'foundingDate', 'ownerAccountId', 'status', 'addressId'],
    type: 'object'
} as const;

export const CreateAccountParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreateAccountParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        firstName: {
            maxLength: 30,
            minLength: 3,
            pattern: '^[a-zA-Z]+$',
            patternDescription: 'Must be a alphabetical string with at least 3 characters',
            type: 'string'
        },
        lastName: {
            maxLength: 30,
            minLength: 3,
            pattern: '^[a-zA-Z]+$',
            patternDescription: 'Must be a alphabetical string with at least 3 characters',
            type: 'string'
        },
        userId: {
            format: 'uuid',
            maxLength: 36,
            minLength: 36,
            type: 'string'
        }
    },
    required: ['userId', 'firstName', 'lastName'],
    type: 'object'
} as const;

export const CreateAddressParamsSchema = {
    additionalProperties: false,
    properties: {
        city: {
            type: 'string'
        },
        country: {
            type: 'string'
        },
        district: {
            type: 'string'
        },
        fullAddress: {
            type: 'string'
        },
        line1: {
            type: 'string'
        },
        line2: {
            type: 'string'
        },
        postalCode: {
            type: 'string'
        },
        rawJson: {},
        region: {
            type: 'string'
        },
        regionCode: {
            type: 'string'
        },
        xCoordinate: {
            format: 'double',
            type: 'number'
        },
        yCoordinate: {
            format: 'double',
            type: 'number'
        }
    },
    required: ['xCoordinate', 'yCoordinate', 'line1', 'line2', 'city', 'region', 'postalCode', 'country', 'rawJson', 'district', 'regionCode', 'fullAddress'],
    type: 'object'
} as const;

export const CreateBusinessMemberParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreateBusinessMemberParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        accountId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        businessId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        role: {
            enum: ['admin', 'member'],
            type: 'string'
        }
    },
    required: ['businessId', 'accountId', 'role'],
    type: 'object'
} as const;

export const CreateBusinessParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreateBusinessParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        address: {
            '$ref': '#/components/schemas/CreateAddressParams'
        },
        business: {
            '$ref': '#/components/schemas/BusinessParams'
        }
    },
    required: ['business', 'address'],
    type: 'object'
} as const;

export const CreateDutchDynamicRoundParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreateDutchDynamicRoundParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        dutchDynamicRound: {
            '$ref': '#/components/schemas/DutchDynamicRoundParams'
        },
        round: {
            '$ref': '#/components/schemas/CreateRoundParams'
        }
    },
    required: ['dutchDynamicRound', 'round'],
    type: 'object'
} as const;

export const CreateFixedTotalRoundParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreateFixedTotalRoundParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        round: {
            '$ref': '#/components/schemas/CreateRoundParams'
        }
    },
    required: ['round'],
    type: 'object'
} as const;

export const CreateInvestmentParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreateInvestmentParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        amount: {
            format: 'int64',
            type: 'integer'
        },
        investorId: {
            format: 'int64',
            type: 'integer'
        },
        paidAt: {
            format: 'date-time',
            readOnly: true,
            type: ['string', 'null']
        },
        roundId: {
            format: 'int64',
            type: 'integer'
        },
        status: {
            enum: ['pending', 'accepted', 'rejected', 'withdrawn', 'successful', 'failed'],
            type: 'string'
        },
        stripeCheckoutSessionId: {
            type: ['string', 'null']
        }
    },
    required: ['roundId', 'investorId', 'amount', 'status', 'stripeCheckoutSessionId', 'paidAt'],
    type: 'object'
} as const;

export const CreatePartialTotalRoundParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreatePartialTotalRoundParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        partialTotalRound: {
            '$ref': '#/components/schemas/PartialTotalRoundParams'
        },
        round: {
            '$ref': '#/components/schemas/CreateRoundParams'
        }
    },
    required: ['partialTotalRound', 'round'],
    type: 'object'
} as const;

export const CreateRegularDynamicRoundParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreateRegularDynamicRoundParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        regularDynamicRound: {
            '$ref': '#/components/schemas/RegularDynamicRoundParams'
        },
        round: {
            '$ref': '#/components/schemas/CreateRoundParams'
        }
    },
    required: ['regularDynamicRound', 'round'],
    type: 'object'
} as const;

export const CreateRoundParamsSchema = {
    additionalProperties: false,
    properties: {
        beginsAt: {
            format: 'date-time',
            type: 'string'
        },
        endsAt: {
            format: 'date-time',
            type: 'string'
        },
        percentageOffered: {
            format: 'double',
            maximum: 100,
            minimum: 0,
            type: 'number'
        },
        percentageValue: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        status: {
            enum: ['active', 'successful', 'failed'],
            type: 'string'
        },
        valueCurrency: {
            enum: ['USD', 'GBP', 'EUR', 'CAD', 'AUD', 'JPY'],
            type: 'string'
        },
        ventureId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        }
    },
    required: ['ventureId', 'beginsAt', 'endsAt', 'percentageOffered', 'percentageValue', 'valueCurrency', 'status'],
    type: 'object'
} as const;

export const CreateVentureParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/CreateVentureParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        address: {
            '$ref': '#/components/schemas/CreateAddressParams'
        },
        venture: {
            '$ref': '#/components/schemas/VentureParams'
        }
    },
    required: ['venture'],
    type: 'object'
} as const;

export const DutchDynamicRoundSchema = {
    additionalProperties: false,
    properties: {
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        round: {
            '$ref': '#/components/schemas/Round'
        },
        roundId: {
            format: 'int64',
            type: 'integer'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        valuationDollarDropRate: {
            format: 'int64',
            type: 'integer'
        },
        valuationDropIntervalDays: {
            format: 'int64',
            type: 'integer'
        },
        valuationStopLoss: {
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['roundId', 'round', 'valuationDollarDropRate', 'valuationStopLoss', 'valuationDropIntervalDays', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const DutchDynamicRoundParamsSchema = {
    additionalProperties: false,
    properties: {
        valuationDollarDropRate: {
            format: 'int64',
            type: 'integer'
        },
        valuationDropIntervalDays: {
            format: 'int64',
            type: 'integer'
        },
        valuationStopLoss: {
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['valuationDollarDropRate', 'valuationStopLoss', 'valuationDropIntervalDays'],
    type: 'object'
} as const;

export const ErrorDetailSchema = {
    additionalProperties: false,
    properties: {
        location: {
            type: 'string'
        },
        message: {
            type: 'string'
        },
        value: {}
    },
    type: 'object'
} as const;

export const ErrorModelSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/ErrorModel.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        detail: {
            examples: ['Property foo is required but is missing.'],
            type: 'string'
        },
        errors: {
            items: {
                '$ref': '#/components/schemas/ErrorDetail'
            },
            type: ['array', 'null']
        },
        instance: {
            examples: ['https://example.com/error-log/abc123'],
            format: 'uri',
            type: 'string'
        },
        status: {
            examples: [400],
            format: 'int64',
            type: 'integer'
        },
        title: {
            examples: ['Bad Request'],
            type: 'string'
        },
        type: {
            default: 'about:blank',
            examples: ['https://example.com/errors/example'],
            format: 'uri',
            type: 'string'
        }
    },
    type: 'object'
} as const;

export const FixedTotalRoundSchema = {
    additionalProperties: false,
    properties: {
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        round: {
            '$ref': '#/components/schemas/Round'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        }
    },
    required: ['round', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const GetCursorPaginatedDutchDynamicRoundsOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetCursorPaginatedDutchDynamicRoundsOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        dutchDynamicRounds: {
            items: {
                '$ref': '#/components/schemas/DutchDynamicRound'
            },
            type: ['array', 'null']
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        nextCursor: {
            format: 'int64',
            type: ['integer', 'null']
        }
    },
    required: ['dutchDynamicRounds', 'message', 'nextCursor', 'hasMore'],
    type: 'object'
} as const;

export const GetCursorPaginatedFixedTotalRoundsOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetCursorPaginatedFixedTotalRoundsOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        fixedTotalRounds: {
            items: {
                '$ref': '#/components/schemas/FixedTotalRound'
            },
            type: ['array', 'null']
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        nextCursor: {
            format: 'int64',
            type: ['integer', 'null']
        }
    },
    required: ['fixedTotalRounds', 'message', 'nextCursor', 'hasMore'],
    type: 'object'
} as const;

export const GetCursorPaginatedPartialTotalRoundsOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetCursorPaginatedPartialTotalRoundsOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        nextCursor: {
            format: 'int64',
            type: ['integer', 'null']
        },
        partialTotalRounds: {
            items: {
                '$ref': '#/components/schemas/PartialTotalRound'
            },
            type: ['array', 'null']
        }
    },
    required: ['partialTotalRounds', 'message', 'nextCursor', 'hasMore'],
    type: 'object'
} as const;

export const GetCursorPaginatedRegularDynamicRoundsOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetCursorPaginatedRegularDynamicRoundsOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        nextCursor: {
            format: 'int64',
            type: ['integer', 'null']
        },
        regularDynamicRounds: {
            items: {
                '$ref': '#/components/schemas/RegularDynamicRound'
            },
            type: ['array', 'null']
        }
    },
    required: ['regularDynamicRounds', 'message', 'nextCursor', 'hasMore'],
    type: 'object'
} as const;

export const GetCursorPaginatedRoundInvestmentsOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetCursorPaginatedRoundInvestmentsOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        hasMore: {
            type: 'boolean'
        },
        investments: {
            items: {
                '$ref': '#/components/schemas/RoundInvestment'
            },
            type: ['array', 'null']
        },
        message: {
            type: 'string'
        },
        nextCursor: {
            format: 'int64',
            type: ['integer', 'null']
        }
    },
    required: ['investments', 'message', 'nextCursor', 'hasMore'],
    type: 'object'
} as const;

export const GetCursorPaginatedRoundsWithSubtypesOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetCursorPaginatedRoundsWithSubtypesOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        nextCursor: {
            format: 'int64',
            type: ['integer', 'null']
        },
        roundsWithSubtypes: {
            items: {
                '$ref': '#/components/schemas/RoundWithSubtypes'
            },
            type: ['array', 'null']
        }
    },
    required: ['roundsWithSubtypes', 'message', 'nextCursor', 'hasMore'],
    type: 'object'
} as const;

export const GetCursorPaginatedVenturesOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetCursorPaginatedVenturesOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        nextCursor: {
            format: 'int64',
            type: ['integer', 'null']
        },
        ventures: {
            items: {
                '$ref': '#/components/schemas/Venture'
            },
            type: ['array', 'null']
        }
    },
    required: ['ventures', 'message', 'nextCursor', 'hasMore'],
    type: 'object'
} as const;

export const GetOffsetPaginatedBusinessMembersResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetOffsetPaginatedBusinessMembersResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        businessMembers: {
            items: {
                '$ref': '#/components/schemas/BusinessMember'
            },
            type: ['array', 'null']
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        }
    },
    required: ['businessMembers', 'message', 'hasMore'],
    type: 'object'
} as const;

export const GetOffsetPaginatedBusinessesOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetOffsetPaginatedBusinessesOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        businesses: {
            items: {
                '$ref': '#/components/schemas/Business'
            },
            type: ['array', 'null']
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        }
    },
    required: ['businesses', 'message', 'hasMore'],
    type: 'object'
} as const;

export const GetOffsetPaginatedDutchDynamicRoundsOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetOffsetPaginatedDutchDynamicRoundsOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        dutchDynamicRounds: {
            items: {
                '$ref': '#/components/schemas/DutchDynamicRound'
            },
            type: ['array', 'null']
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        }
    },
    required: ['dutchDynamicRounds', 'message', 'hasMore'],
    type: 'object'
} as const;

export const GetOffsetPaginatedFixedTotalRoundsOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetOffsetPaginatedFixedTotalRoundsOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        fixedTotalRounds: {
            items: {
                '$ref': '#/components/schemas/FixedTotalRound'
            },
            type: ['array', 'null']
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        }
    },
    required: ['fixedTotalRounds', 'message', 'hasMore'],
    type: 'object'
} as const;

export const GetOffsetPaginatedPartialTotalRoundsOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetOffsetPaginatedPartialTotalRoundsOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        partialTotalRounds: {
            items: {
                '$ref': '#/components/schemas/PartialTotalRound'
            },
            type: ['array', 'null']
        }
    },
    required: ['partialTotalRounds', 'message', 'hasMore'],
    type: 'object'
} as const;

export const GetOffsetPaginatedRegularDynamicRoundsOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetOffsetPaginatedRegularDynamicRoundsOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        regularDynamicRounds: {
            items: {
                '$ref': '#/components/schemas/RegularDynamicRound'
            },
            type: ['array', 'null']
        }
    },
    required: ['regularDynamicRounds', 'message', 'hasMore'],
    type: 'object'
} as const;

export const GetOffsetPaginatedRoundInvestmentsOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetOffsetPaginatedRoundInvestmentsOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        hasMore: {
            type: 'boolean'
        },
        investments: {
            items: {
                '$ref': '#/components/schemas/RoundInvestment'
            },
            type: ['array', 'null']
        },
        message: {
            type: 'string'
        }
    },
    required: ['investments', 'message', 'hasMore'],
    type: 'object'
} as const;

export const GetOffsetPaginatedRoundsWithSubtypesOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetOffsetPaginatedRoundsWithSubtypesOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        roundsWithSubtypes: {
            items: {
                '$ref': '#/components/schemas/RoundWithSubtypes'
            },
            type: ['array', 'null']
        }
    },
    required: ['roundsWithSubtypes', 'message', 'hasMore'],
    type: 'object'
} as const;

export const GetOffsetPaginatedVenturesOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/GetOffsetPaginatedVenturesOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        hasMore: {
            type: 'boolean'
        },
        message: {
            type: 'string'
        },
        ventures: {
            items: {
                '$ref': '#/components/schemas/Venture'
            },
            type: ['array', 'null']
        }
    },
    required: ['ventures', 'message', 'hasMore'],
    type: 'object'
} as const;

export const LinkOutputBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/LinkOutputBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        link: {
            type: 'string'
        },
        message: {
            type: 'string'
        }
    },
    required: ['message', 'link'],
    type: 'object'
} as const;

export const MessageResponseSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/MessageResponse.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        message: {
            type: 'string'
        }
    },
    required: ['message'],
    type: 'object'
} as const;

export const PartialTotalRoundSchema = {
    additionalProperties: false,
    properties: {
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        investorCount: {
            format: 'int64',
            type: 'integer'
        },
        round: {
            '$ref': '#/components/schemas/Round'
        },
        roundId: {
            format: 'int64',
            type: 'integer'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        }
    },
    required: ['roundId', 'round', 'investorCount', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const PartialTotalRoundParamsSchema = {
    additionalProperties: false,
    properties: {
        investorCount: {
            format: 'int64',
            type: 'integer'
        }
    },
    required: ['investorCount'],
    type: 'object'
} as const;

export const RegularDynamicRoundSchema = {
    additionalProperties: false,
    properties: {
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        daysExtendOnBid: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        round: {
            '$ref': '#/components/schemas/Round'
        },
        roundId: {
            format: 'int64',
            type: 'integer'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        }
    },
    required: ['roundId', 'round', 'daysExtendOnBid', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const RegularDynamicRoundParamsSchema = {
    additionalProperties: false,
    properties: {
        daysExtendOnBid: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        }
    },
    required: ['daysExtendOnBid'],
    type: 'object'
} as const;

export const RoundSchema = {
    additionalProperties: false,
    properties: {
        beginsAt: {
            format: 'date-time',
            type: 'string'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        endsAt: {
            format: 'date-time',
            type: 'string'
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        percentageOffered: {
            format: 'double',
            maximum: 100,
            minimum: 0,
            type: 'number'
        },
        percentageValue: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        status: {
            enum: ['active', 'successful', 'failed'],
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        valueCurrency: {
            enum: ['USD', 'GBP', 'EUR', 'CAD', 'AUD', 'JPY'],
            type: 'string'
        },
        ventureId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        }
    },
    required: ['id', 'ventureId', 'beginsAt', 'endsAt', 'percentageOffered', 'percentageValue', 'valueCurrency', 'status', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const RoundInvestmentSchema = {
    additionalProperties: false,
    properties: {
        amount: {
            format: 'int64',
            type: 'integer'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        investor: {
            '$ref': '#/components/schemas/Account'
        },
        investorId: {
            format: 'int64',
            type: 'integer'
        },
        paidAt: {
            format: 'date-time',
            readOnly: true,
            type: ['string', 'null']
        },
        round: {
            '$ref': '#/components/schemas/Round'
        },
        roundId: {
            format: 'int64',
            type: 'integer'
        },
        status: {
            enum: ['pending', 'accepted', 'rejected', 'withdrawn', 'successful', 'failed'],
            type: 'string'
        },
        stripeCheckoutSessionId: {
            type: ['string', 'null']
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        }
    },
    required: ['round', 'investor', 'id', 'roundId', 'investorId', 'amount', 'status', 'stripeCheckoutSessionId', 'paidAt', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const RoundWithSubtypesSchema = {
    additionalProperties: false,
    properties: {
        beginsAt: {
            format: 'date-time',
            type: 'string'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        dutchDynamicRound: {
            '$ref': '#/components/schemas/DutchDynamicRound'
        },
        endsAt: {
            format: 'date-time',
            type: 'string'
        },
        fixedTotalRound: {
            '$ref': '#/components/schemas/FixedTotalRound'
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        partialTotalRound: {
            '$ref': '#/components/schemas/PartialTotalRound'
        },
        percentageOffered: {
            format: 'double',
            maximum: 100,
            minimum: 0,
            type: 'number'
        },
        percentageValue: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        regularDynamicRound: {
            '$ref': '#/components/schemas/RegularDynamicRound'
        },
        status: {
            enum: ['active', 'successful', 'failed'],
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        valueCurrency: {
            enum: ['USD', 'GBP', 'EUR', 'CAD', 'AUD', 'JPY'],
            type: 'string'
        },
        ventureId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        }
    },
    required: ['fixedTotalRound', 'dutchDynamicRound', 'partialTotalRound', 'regularDynamicRound', 'id', 'ventureId', 'beginsAt', 'endsAt', 'percentageOffered', 'percentageValue', 'valueCurrency', 'status', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const SingleAccountResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/SingleAccountResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        account: {
            '$ref': '#/components/schemas/Account'
        },
        message: {
            type: 'string'
        }
    },
    required: ['account', 'message'],
    type: 'object'
} as const;

export const SingleBusinessMemberResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/SingleBusinessMemberResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        businessMember: {
            '$ref': '#/components/schemas/BusinessMember'
        },
        message: {
            type: 'string'
        }
    },
    required: ['businessMember', 'message'],
    type: 'object'
} as const;

export const SingleBusinessResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/SingleBusinessResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        business: {
            '$ref': '#/components/schemas/Business'
        },
        message: {
            type: 'string'
        }
    },
    required: ['business', 'message'],
    type: 'object'
} as const;

export const SingleDutchDynamicRoundResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/SingleDutchDynamicRoundResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        message: {
            type: 'string'
        },
        round: {
            '$ref': '#/components/schemas/DutchDynamicRound'
        }
    },
    required: ['round', 'message'],
    type: 'object'
} as const;

export const SingleFixedTotalRoundResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/SingleFixedTotalRoundResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        message: {
            type: 'string'
        },
        round: {
            '$ref': '#/components/schemas/FixedTotalRound'
        }
    },
    required: ['round', 'message'],
    type: 'object'
} as const;

export const SinglePartialTotalRoundResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/SinglePartialTotalRoundResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        message: {
            type: 'string'
        },
        round: {
            '$ref': '#/components/schemas/PartialTotalRound'
        }
    },
    required: ['round', 'message'],
    type: 'object'
} as const;

export const SingleRegularDynamicRoundResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/SingleRegularDynamicRoundResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        message: {
            type: 'string'
        },
        round: {
            '$ref': '#/components/schemas/RegularDynamicRound'
        }
    },
    required: ['round', 'message'],
    type: 'object'
} as const;

export const SingleRoundInvestmentResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/SingleRoundInvestmentResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        investment: {
            '$ref': '#/components/schemas/RoundInvestment'
        },
        message: {
            type: 'string'
        }
    },
    required: ['investment', 'message'],
    type: 'object'
} as const;

export const SingleRoundWithSubtypesResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/SingleRoundWithSubtypesResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        message: {
            type: 'string'
        },
        round: {
            '$ref': '#/components/schemas/RoundWithSubtypes'
        }
    },
    required: ['round', 'message'],
    type: 'object'
} as const;

export const SingleVentureResponseBodySchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/SingleVentureResponseBody.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        message: {
            type: 'string'
        },
        venture: {
            '$ref': '#/components/schemas/Venture'
        }
    },
    required: ['venture', 'message'],
    type: 'object'
} as const;

export const UpdateAccountParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/UpdateAccountParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        firstName: {
            maxLength: 30,
            minLength: 3,
            pattern: '^[a-zA-Z]+$',
            patternDescription: 'Must be a alphabetical string with at least 3 characters',
            type: 'string'
        },
        lastName: {
            maxLength: 30,
            minLength: 3,
            pattern: '^[a-zA-Z]+$',
            patternDescription: 'Must be a alphabetical string with at least 3 characters',
            type: 'string'
        }
    },
    required: ['firstName', 'lastName'],
    type: 'object'
} as const;

export const UpdateBusinessMemberParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/UpdateBusinessMemberParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        role: {
            enum: ['admin', 'member'],
            type: 'string'
        }
    },
    required: ['role'],
    type: 'object'
} as const;

export const UpdateVentureParamsSchema = {
    additionalProperties: false,
    properties: {
        '$schema': {
            examples: ['https://example.com/schemas/UpdateVentureParams.json'],
            format: 'uri',
            readOnly: true,
            type: 'string'
        },
        description: {
            maxLength: 5000,
            minLength: 3,
            type: 'string'
        },
        name: {
            maxLength: 100,
            minLength: 3,
            type: 'string'
        }
    },
    required: ['name', 'description'],
    type: 'object'
} as const;

export const VentureSchema = {
    additionalProperties: false,
    properties: {
        address: {
            '$ref': '#/components/schemas/Address'
        },
        addressId: {
            format: 'int64',
            minimum: 1,
            readOnly: true,
            type: 'integer'
        },
        businessId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        createdAt: {
            format: 'date-time',
            type: 'string'
        },
        deletedAt: {
            format: 'date-time',
            type: ['string', 'null']
        },
        description: {
            maxLength: 5000,
            minLength: 3,
            type: 'string'
        },
        id: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        isHidden: {
            readOnly: true,
            type: 'boolean'
        },
        isRemote: {
            default: false,
            type: 'boolean'
        },
        name: {
            maxLength: 100,
            minLength: 3,
            type: 'string'
        },
        teamSize: {
            enum: ['0-1', '2-10', '11-50', '51-200', '201-500', '501-1000', '1000+'],
            type: 'string'
        },
        updatedAt: {
            format: 'date-time',
            type: ['string', 'null']
        }
    },
    required: ['address', 'businessId', 'isHidden', 'teamSize', 'isRemote', 'name', 'description', 'id', 'createdAt', 'updatedAt', 'deletedAt'],
    type: 'object'
} as const;

export const VentureParamsSchema = {
    additionalProperties: false,
    properties: {
        addressId: {
            format: 'int64',
            minimum: 1,
            readOnly: true,
            type: 'integer'
        },
        businessId: {
            format: 'int64',
            minimum: 1,
            type: 'integer'
        },
        description: {
            maxLength: 5000,
            minLength: 3,
            type: 'string'
        },
        isHidden: {
            readOnly: true,
            type: 'boolean'
        },
        isRemote: {
            default: false,
            type: 'boolean'
        },
        name: {
            maxLength: 100,
            minLength: 3,
            type: 'string'
        },
        teamSize: {
            enum: ['0-1', '2-10', '11-50', '51-200', '201-500', '501-1000', '1000+'],
            type: 'string'
        }
    },
    required: ['businessId', 'isHidden', 'teamSize', 'isRemote', 'name', 'description'],
    type: 'object'
} as const;