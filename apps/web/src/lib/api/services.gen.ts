// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import { type CreateAccountData, type CreateAccountError, type CreateAccountResponse, type GetAccountByUserIdData, type GetAccountByUserIdError, type GetAccountByUserIdResponse, type DeleteAccountData, type DeleteAccountError, type DeleteAccountResponse, type GetAccountByIdData, type GetAccountByIdError, type GetAccountByIdResponse, type UpdateAccountData, type UpdateAccountError, type UpdateAccountResponse, type HealthCheckError, type HealthCheckResponse, type GetAllOffersData, type GetAllOffersError, type GetAllOffersResponse, type CreateOfferData, type CreateOfferError, type CreateOfferResponse, type GetOffersByRoundIdData, type GetOffersByRoundIdError, type GetOffersByRoundIdResponse, type DeleteOfferData, type DeleteOfferError, type DeleteOfferResponse, type GetOfferByIdData, type GetOfferByIdError, type GetOfferByIdResponse, type UpdateOfferStatusData, type UpdateOfferStatusError, type UpdateOfferStatusResponse, type GetAllRoundsData, type GetAllRoundsError, type GetAllRoundsResponse, type CreateRoundData, type CreateRoundError, type CreateRoundResponse, type DeleteRoundData, type DeleteRoundError, type DeleteRoundResponse, type GetRoundByIdData, type GetRoundByIdError, type GetRoundByIdResponse, type UpdateRoundData, type UpdateRoundError, type UpdateRoundResponse, type GetAllVenturesData, type GetAllVenturesError, type GetAllVenturesResponse, type CreateVentureData, type CreateVentureError, type CreateVentureResponse, type DeleteVentureData, type DeleteVentureError, type DeleteVentureResponse, type GetVentureByIdData, type GetVentureByIdError, type GetVentureByIdResponse, type UpdateVentureData, type UpdateVentureError, type UpdateVentureResponse, CreateAccountResponseTransformer, GetAccountByUserIdResponseTransformer, GetAccountByIdResponseTransformer, UpdateAccountResponseTransformer, GetAllOffersResponseTransformer, CreateOfferResponseTransformer, GetOffersByRoundIdResponseTransformer, GetOfferByIdResponseTransformer, UpdateOfferStatusResponseTransformer, GetAllRoundsResponseTransformer, CreateRoundResponseTransformer, GetRoundByIdResponseTransformer, UpdateRoundResponseTransformer, GetAllVenturesResponseTransformer, CreateVentureResponseTransformer, GetVentureByIdResponseTransformer, UpdateVentureResponseTransformer } from './types.gen';

export const client = createClient(createConfig());

/**
 * Create a account
 * Create a account.
 */
export const createAccount = <ThrowOnError extends boolean = false>(options: Options<CreateAccountData, ThrowOnError>) => { return (options?.client ?? client).post<CreateAccountResponse, CreateAccountError, ThrowOnError>({
    ...options,
    url: '/account',
    responseTransformer: CreateAccountResponseTransformer
}); };

/**
 * Get account by user ID
 * Get account by user ID.
 */
export const getAccountByUserId = <ThrowOnError extends boolean = false>(options: Options<GetAccountByUserIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetAccountByUserIdResponse, GetAccountByUserIdError, ThrowOnError>({
    ...options,
    url: '/account/user/{userId}',
    responseTransformer: GetAccountByUserIdResponseTransformer
}); };

/**
 * Delete a account
 * Delete a account.
 */
export const deleteAccount = <ThrowOnError extends boolean = false>(options: Options<DeleteAccountData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteAccountResponse, DeleteAccountError, ThrowOnError>({
    ...options,
    url: '/account/{id}'
}); };

/**
 * Get account by ID
 * Get account by ID.
 */
export const getAccountById = <ThrowOnError extends boolean = false>(options: Options<GetAccountByIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetAccountByIdResponse, GetAccountByIdError, ThrowOnError>({
    ...options,
    url: '/account/{id}',
    responseTransformer: GetAccountByIdResponseTransformer
}); };

/**
 * Update a account
 * Update a account.
 */
export const updateAccount = <ThrowOnError extends boolean = false>(options: Options<UpdateAccountData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateAccountResponse, UpdateAccountError, ThrowOnError>({
    ...options,
    url: '/account/{id}',
    responseTransformer: UpdateAccountResponseTransformer
}); };

/**
 * Health check
 * Health check.
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<HealthCheckResponse, HealthCheckError, ThrowOnError>({
    ...options,
    url: '/health'
}); };

/**
 * Get all offers
 * Get all offers.
 */
export const getAllOffers = <ThrowOnError extends boolean = false>(options?: Options<GetAllOffersData, ThrowOnError>) => { return (options?.client ?? client).get<GetAllOffersResponse, GetAllOffersError, ThrowOnError>({
    ...options,
    url: '/offer',
    responseTransformer: GetAllOffersResponseTransformer
}); };

/**
 * Create a offer
 * Create a offer.
 */
export const createOffer = <ThrowOnError extends boolean = false>(options: Options<CreateOfferData, ThrowOnError>) => { return (options?.client ?? client).post<CreateOfferResponse, CreateOfferError, ThrowOnError>({
    ...options,
    url: '/offer',
    responseTransformer: CreateOfferResponseTransformer
}); };

/**
 * Get offer by round ID
 * Get offer by round ID.
 */
export const getOffersByRoundId = <ThrowOnError extends boolean = false>(options: Options<GetOffersByRoundIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetOffersByRoundIdResponse, GetOffersByRoundIdError, ThrowOnError>({
    ...options,
    url: '/offer/round/{id}',
    responseTransformer: GetOffersByRoundIdResponseTransformer
}); };

/**
 * Delete a offer
 * Delete a offer.
 */
export const deleteOffer = <ThrowOnError extends boolean = false>(options: Options<DeleteOfferData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteOfferResponse, DeleteOfferError, ThrowOnError>({
    ...options,
    url: '/offer/{id}'
}); };

/**
 * Get offer by ID
 * Get offer by ID.
 */
export const getOfferById = <ThrowOnError extends boolean = false>(options: Options<GetOfferByIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetOfferByIdResponse, GetOfferByIdError, ThrowOnError>({
    ...options,
    url: '/offer/{id}',
    responseTransformer: GetOfferByIdResponseTransformer
}); };

/**
 * Update a offer status
 * Update a offer status.
 */
export const updateOfferStatus = <ThrowOnError extends boolean = false>(options: Options<UpdateOfferStatusData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateOfferStatusResponse, UpdateOfferStatusError, ThrowOnError>({
    ...options,
    url: '/offer/{id}',
    responseTransformer: UpdateOfferStatusResponseTransformer
}); };

/**
 * Get all rounds
 * Get all rounds.
 */
export const getAllRounds = <ThrowOnError extends boolean = false>(options?: Options<GetAllRoundsData, ThrowOnError>) => { return (options?.client ?? client).get<GetAllRoundsResponse, GetAllRoundsError, ThrowOnError>({
    ...options,
    url: '/round',
    responseTransformer: GetAllRoundsResponseTransformer
}); };

/**
 * Create a round
 * Create a round.
 */
export const createRound = <ThrowOnError extends boolean = false>(options: Options<CreateRoundData, ThrowOnError>) => { return (options?.client ?? client).post<CreateRoundResponse, CreateRoundError, ThrowOnError>({
    ...options,
    url: '/round',
    responseTransformer: CreateRoundResponseTransformer
}); };

/**
 * Delete a round
 * Delete a round.
 */
export const deleteRound = <ThrowOnError extends boolean = false>(options: Options<DeleteRoundData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteRoundResponse, DeleteRoundError, ThrowOnError>({
    ...options,
    url: '/round/{id}'
}); };

/**
 * Get round by ID
 * Get round by ID.
 */
export const getRoundById = <ThrowOnError extends boolean = false>(options: Options<GetRoundByIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetRoundByIdResponse, GetRoundByIdError, ThrowOnError>({
    ...options,
    url: '/round/{id}',
    responseTransformer: GetRoundByIdResponseTransformer
}); };

/**
 * Update a round
 * Update a round.
 */
export const updateRound = <ThrowOnError extends boolean = false>(options: Options<UpdateRoundData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateRoundResponse, UpdateRoundError, ThrowOnError>({
    ...options,
    url: '/round/{id}',
    responseTransformer: UpdateRoundResponseTransformer
}); };

/**
 * Get all ventures
 * Get all ventures.
 */
export const getAllVentures = <ThrowOnError extends boolean = false>(options?: Options<GetAllVenturesData, ThrowOnError>) => { return (options?.client ?? client).get<GetAllVenturesResponse, GetAllVenturesError, ThrowOnError>({
    ...options,
    url: '/venture',
    responseTransformer: GetAllVenturesResponseTransformer
}); };

/**
 * Create a venture
 * Create a venture.
 */
export const createVenture = <ThrowOnError extends boolean = false>(options: Options<CreateVentureData, ThrowOnError>) => { return (options?.client ?? client).post<CreateVentureResponse, CreateVentureError, ThrowOnError>({
    ...options,
    url: '/venture',
    responseTransformer: CreateVentureResponseTransformer
}); };

/**
 * Delete a venture
 * Delete a venture.
 */
export const deleteVenture = <ThrowOnError extends boolean = false>(options: Options<DeleteVentureData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteVentureResponse, DeleteVentureError, ThrowOnError>({
    ...options,
    url: '/venture/{id}'
}); };

/**
 * Get venture by ID
 * Get venture by ID.
 */
export const getVentureById = <ThrowOnError extends boolean = false>(options: Options<GetVentureByIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetVentureByIdResponse, GetVentureByIdError, ThrowOnError>({
    ...options,
    url: '/venture/{id}',
    responseTransformer: GetVentureByIdResponseTransformer
}); };

/**
 * Update a venture
 * Update a venture.
 */
export const updateVenture = <ThrowOnError extends boolean = false>(options: Options<UpdateVentureData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateVentureResponse, UpdateVentureError, ThrowOnError>({
    ...options,
    url: '/venture/{id}',
    responseTransformer: UpdateVentureResponseTransformer
}); };