// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import { type CreateAccountData, type CreateAccountError, type CreateAccountResponse, type GetAccountByUserIdData, type GetAccountByUserIdError, type GetAccountByUserIdResponse, type DeleteAccountData, type DeleteAccountError, type DeleteAccountResponse, type GetAccountByIdData, type GetAccountByIdError, type GetAccountByIdResponse, type UpdateAccountData, type UpdateAccountError, type UpdateAccountResponse, type GetAllFoosData, type GetAllFoosError, type GetAllFoosResponse, type CreateFooData, type CreateFooError, type CreateFooResponse, type DeleteFooData, type DeleteFooError, type DeleteFooResponse, type GetFooByIdData, type GetFooByIdError, type GetFooByIdResponse, type UpdateFooData, type UpdateFooError, type UpdateFooResponse, type HealthCheckError, type HealthCheckResponse, CreateAccountResponseTransformer, GetAccountByUserIdResponseTransformer, GetAccountByIdResponseTransformer, UpdateAccountResponseTransformer, GetAllFoosResponseTransformer, CreateFooResponseTransformer, GetFooByIdResponseTransformer, UpdateFooResponseTransformer } from './types.gen';

export const client = createClient(createConfig());

/**
 * Create a account
 * Create a account.
 */
export const createAccount = <ThrowOnError extends boolean = false>(options: Options<CreateAccountData, ThrowOnError>) => { return (options?.client ?? client).post<CreateAccountResponse, CreateAccountError, ThrowOnError>({
    ...options,
    url: '/account',
    responseTransformer: CreateAccountResponseTransformer
}); };

/**
 * Get account by user ID
 * Get account by user ID.
 */
export const getAccountByUserId = <ThrowOnError extends boolean = false>(options: Options<GetAccountByUserIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetAccountByUserIdResponse, GetAccountByUserIdError, ThrowOnError>({
    ...options,
    url: '/account/user/{userId}',
    responseTransformer: GetAccountByUserIdResponseTransformer
}); };

/**
 * Delete a account
 * Delete a account.
 */
export const deleteAccount = <ThrowOnError extends boolean = false>(options: Options<DeleteAccountData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteAccountResponse, DeleteAccountError, ThrowOnError>({
    ...options,
    url: '/account/{id}'
}); };

/**
 * Get account by ID
 * Get account by ID.
 */
export const getAccountById = <ThrowOnError extends boolean = false>(options: Options<GetAccountByIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetAccountByIdResponse, GetAccountByIdError, ThrowOnError>({
    ...options,
    url: '/account/{id}',
    responseTransformer: GetAccountByIdResponseTransformer
}); };

/**
 * Update a account
 * Update a account.
 */
export const updateAccount = <ThrowOnError extends boolean = false>(options: Options<UpdateAccountData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateAccountResponse, UpdateAccountError, ThrowOnError>({
    ...options,
    url: '/account/{id}',
    responseTransformer: UpdateAccountResponseTransformer
}); };

/**
 * Get all foos
 * Get all foos.
 */
export const getAllFoos = <ThrowOnError extends boolean = false>(options?: Options<GetAllFoosData, ThrowOnError>) => { return (options?.client ?? client).get<GetAllFoosResponse, GetAllFoosError, ThrowOnError>({
    ...options,
    url: '/foo',
    responseTransformer: GetAllFoosResponseTransformer
}); };

/**
 * Create a foo
 * Create a foo.
 */
export const createFoo = <ThrowOnError extends boolean = false>(options: Options<CreateFooData, ThrowOnError>) => { return (options?.client ?? client).post<CreateFooResponse, CreateFooError, ThrowOnError>({
    ...options,
    url: '/foo',
    responseTransformer: CreateFooResponseTransformer
}); };

/**
 * Delete a foo
 * Delete a foo.
 */
export const deleteFoo = <ThrowOnError extends boolean = false>(options: Options<DeleteFooData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteFooResponse, DeleteFooError, ThrowOnError>({
    ...options,
    url: '/foo/{id}'
}); };

/**
 * Get foo by ID
 * Get foo by ID.
 */
export const getFooById = <ThrowOnError extends boolean = false>(options: Options<GetFooByIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetFooByIdResponse, GetFooByIdError, ThrowOnError>({
    ...options,
    url: '/foo/{id}',
    responseTransformer: GetFooByIdResponseTransformer
}); };

/**
 * Update a foo
 * Update a foo.
 */
export const updateFoo = <ThrowOnError extends boolean = false>(options: Options<UpdateFooData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateFooResponse, UpdateFooError, ThrowOnError>({
    ...options,
    url: '/foo/{id}',
    responseTransformer: UpdateFooResponseTransformer
}); };

/**
 * Health check
 * Health check.
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<HealthCheckResponse, HealthCheckError, ThrowOnError>({
    ...options,
    url: '/health'
}); };