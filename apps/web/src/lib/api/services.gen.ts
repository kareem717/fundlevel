// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import { type CreateAccountData, type CreateAccountError, type CreateAccountResponse, type DeleteAccountData, type DeleteAccountError, type DeleteAccountResponse, type GetAccountByIdData, type GetAccountByIdError, type GetAccountByIdResponse, type UpdateAccountData, type UpdateAccountError, type UpdateAccountResponse, type GetAccountBusinessesData, type GetAccountBusinessesError, type GetAccountBusinessesResponse, type CreateRoundInvestmentData, type CreateRoundInvestmentError, type CreateRoundInvestmentResponse, type GetAccountRoundInvestmentsCursorData, type GetAccountRoundInvestmentsCursorError, type GetAccountRoundInvestmentsCursorResponse, type GetRoundInvestmentsOffsetData, type GetRoundInvestmentsOffsetError, type GetRoundInvestmentsOffsetResponse, type DeleteRoundInvestmentData, type DeleteRoundInvestmentError, type DeleteRoundInvestmentResponse, type GetAccountCheckoutLinkData, type GetAccountCheckoutLinkError, type GetAccountCheckoutLinkResponse, type WithdrawRoundInvestmentData, type WithdrawRoundInvestmentError, type WithdrawRoundInvestmentResponse, type HandleStripeWebhookData, type HandleStripeWebhookError, type HandleStripeWebhookResponse, type CreateBusinessData, type CreateBusinessError, type CreateBusinessResponse, type DeleteBusinessMemberData, type DeleteBusinessMemberError, type DeleteBusinessMemberResponse, type UpdateBusinessMemberData, type UpdateBusinessMemberError, type UpdateBusinessMemberResponse, type DeleteBusinessData, type DeleteBusinessError, type DeleteBusinessResponse, type GetBusinessByIdData, type GetBusinessByIdError, type GetBusinessByIdResponse, type GetBusinessMembersData, type GetBusinessMembersError, type GetBusinessMembersResponse, type CreateBusinessMemberData, type CreateBusinessMemberError, type CreateBusinessMemberResponse, type GetBusinessRecievedRoundInvestmentsCursorData, type GetBusinessRecievedRoundInvestmentsCursorError, type GetBusinessRecievedRoundInvestmentsCursorResponse, type GetBusinessRoundsData, type GetBusinessRoundsError, type GetBusinessRoundsResponse, type GetBusinessVenturesData, type GetBusinessVenturesError, type GetBusinessVenturesResponse, type GetBusinessVenturesByPageData, type GetBusinessVenturesByPageError, type GetBusinessVenturesByPageResponse, type HealthCheckError, type HealthCheckResponse, type GetRoundByCursorData, type GetRoundByCursorError, type GetRoundByCursorResponse, type CreateDutchDynamicRoundData, type CreateDutchDynamicRoundError, type CreateDutchDynamicRoundResponse, type GetAllDutchDynamicRoundsCursorData, type GetAllDutchDynamicRoundsCursorError, type GetAllDutchDynamicRoundsCursorResponse, type GetAllDutchDynamicRoundsOffsetData, type GetAllDutchDynamicRoundsOffsetError, type GetAllDutchDynamicRoundsOffsetResponse, type DeleteDutchDynamicRoundData, type DeleteDutchDynamicRoundError, type DeleteDutchDynamicRoundResponse, type GetDutchDynamicRoundByIdData, type GetDutchDynamicRoundByIdError, type GetDutchDynamicRoundByIdResponse, type CreateRegularDynamicRoundData, type CreateRegularDynamicRoundError, type CreateRegularDynamicRoundResponse, type GetAllRegularDynamicRoundsCursorData, type GetAllRegularDynamicRoundsCursorError, type GetAllRegularDynamicRoundsCursorResponse, type GetAllRegularDynamicRoundsOffsetData, type GetAllRegularDynamicRoundsOffsetError, type GetAllRegularDynamicRoundsOffsetResponse, type DeleteRegularDynamicRoundData, type DeleteRegularDynamicRoundError, type DeleteRegularDynamicRoundResponse, type GetRegularDynamicRoundByIdData, type GetRegularDynamicRoundByIdError, type GetRegularDynamicRoundByIdResponse, type GetRoundByPageData, type GetRoundByPageError, type GetRoundByPageResponse, type CreateFixedTotalRoundData, type CreateFixedTotalRoundError, type CreateFixedTotalRoundResponse, type GetAllFixedTotalRoundsCursorData, type GetAllFixedTotalRoundsCursorError, type GetAllFixedTotalRoundsCursorResponse, type GetAllFixedTotalRoundsOffsetData, type GetAllFixedTotalRoundsOffsetError, type GetAllFixedTotalRoundsOffsetResponse, type DeleteFixedTotalRoundData, type DeleteFixedTotalRoundError, type DeleteFixedTotalRoundResponse, type GetFixedTotalRoundByIdData, type GetFixedTotalRoundByIdError, type GetFixedTotalRoundByIdResponse, type CreatePartialTotalRoundData, type CreatePartialTotalRoundError, type CreatePartialTotalRoundResponse, type GetAllPartialTotalRoundsCursorData, type GetAllPartialTotalRoundsCursorError, type GetAllPartialTotalRoundsCursorResponse, type GetAllPartialTotalRoundsOffsetData, type GetAllPartialTotalRoundsOffsetError, type GetAllPartialTotalRoundsOffsetResponse, type DeletePartialTotalRoundData, type DeletePartialTotalRoundError, type DeletePartialTotalRoundResponse, type GetPartialTotalRoundByIdData, type GetPartialTotalRoundByIdError, type GetPartialTotalRoundByIdResponse, type GetRoundByIdData, type GetRoundByIdError, type GetRoundByIdResponse, type GetRoundRoundInvestmentsCursorData, type GetRoundRoundInvestmentsCursorError, type GetRoundRoundInvestmentsCursorResponse, type GetRoundRoundInvestmentsOffsetData, type GetRoundRoundInvestmentsOffsetError, type GetRoundRoundInvestmentsOffsetResponse, type AcceptRoundInvestmentData, type AcceptRoundInvestmentError, type AcceptRoundInvestmentResponse, type GetUserAccountData, type GetUserAccountError, type GetUserAccountResponse, type CreateVentureData, type CreateVentureError, type CreateVentureResponse, type GetAllVenturesCursorData, type GetAllVenturesCursorError, type GetAllVenturesCursorResponse, type GetAllVenturesOffsetData, type GetAllVenturesOffsetError, type GetAllVenturesOffsetResponse, type DeleteVentureData, type DeleteVentureError, type DeleteVentureResponse, type GetVentureByIdData, type GetVentureByIdError, type GetVentureByIdResponse, type UpdateVentureData, type UpdateVentureError, type UpdateVentureResponse, type GetVentureRoundInvestmentsCursorData, type GetVentureRoundInvestmentsCursorError, type GetVentureRoundInvestmentsCursorResponse, type GetVentureRoundInvestmentsOffsetData, type GetVentureRoundInvestmentsOffsetError, type GetVentureRoundInvestmentsOffsetResponse, type GetVentureRoundsCursorData, type GetVentureRoundsCursorError, type GetVentureRoundsCursorResponse, type GetVentureDutchDynamicRoundsCursorData, type GetVentureDutchDynamicRoundsCursorError, type GetVentureDutchDynamicRoundsCursorResponse, type GetVentureDutchDynamicRoundsOffsetData, type GetVentureDutchDynamicRoundsOffsetError, type GetVentureDutchDynamicRoundsOffsetResponse, type GetVentureRegularDynamicRoundsCursorData, type GetVentureRegularDynamicRoundsCursorError, type GetVentureRegularDynamicRoundsCursorResponse, type GetVentureRegularDynamicRoundsOffsetData, type GetVentureRegularDynamicRoundsOffsetError, type GetVentureRegularDynamicRoundsOffsetResponse, type GetVentureRoundsOffsetData, type GetVentureRoundsOffsetError, type GetVentureRoundsOffsetResponse, type GetVentureFixedTotalRoundsCursorData, type GetVentureFixedTotalRoundsCursorError, type GetVentureFixedTotalRoundsCursorResponse, type GetVentureFixedTotalRoundsOffsetData, type GetVentureFixedTotalRoundsOffsetError, type GetVentureFixedTotalRoundsOffsetResponse, type GetVenturePartialTotalRoundsCursorData, type GetVenturePartialTotalRoundsCursorError, type GetVenturePartialTotalRoundsCursorResponse, type GetVenturePartialTotalRoundsOffsetData, type GetVenturePartialTotalRoundsOffsetError, type GetVenturePartialTotalRoundsOffsetResponse, CreateAccountResponseTransformer, GetAccountByIdResponseTransformer, UpdateAccountResponseTransformer, GetAccountBusinessesResponseTransformer, CreateRoundInvestmentResponseTransformer, GetAccountRoundInvestmentsCursorResponseTransformer, GetRoundInvestmentsOffsetResponseTransformer, CreateBusinessResponseTransformer, UpdateBusinessMemberResponseTransformer, GetBusinessByIdResponseTransformer, GetBusinessMembersResponseTransformer, CreateBusinessMemberResponseTransformer, GetBusinessRecievedRoundInvestmentsCursorResponseTransformer, GetBusinessRoundsResponseTransformer, GetBusinessVenturesResponseTransformer, GetBusinessVenturesByPageResponseTransformer, GetRoundByCursorResponseTransformer, CreateDutchDynamicRoundResponseTransformer, GetAllDutchDynamicRoundsCursorResponseTransformer, GetAllDutchDynamicRoundsOffsetResponseTransformer, GetDutchDynamicRoundByIdResponseTransformer, CreateRegularDynamicRoundResponseTransformer, GetAllRegularDynamicRoundsCursorResponseTransformer, GetAllRegularDynamicRoundsOffsetResponseTransformer, GetRegularDynamicRoundByIdResponseTransformer, GetRoundByPageResponseTransformer, CreateFixedTotalRoundResponseTransformer, GetAllFixedTotalRoundsCursorResponseTransformer, GetAllFixedTotalRoundsOffsetResponseTransformer, GetFixedTotalRoundByIdResponseTransformer, CreatePartialTotalRoundResponseTransformer, GetAllPartialTotalRoundsCursorResponseTransformer, GetAllPartialTotalRoundsOffsetResponseTransformer, GetPartialTotalRoundByIdResponseTransformer, GetRoundByIdResponseTransformer, GetRoundRoundInvestmentsCursorResponseTransformer, GetRoundRoundInvestmentsOffsetResponseTransformer, GetUserAccountResponseTransformer, CreateVentureResponseTransformer, GetAllVenturesCursorResponseTransformer, GetAllVenturesOffsetResponseTransformer, GetVentureByIdResponseTransformer, UpdateVentureResponseTransformer, GetVentureRoundInvestmentsCursorResponseTransformer, GetVentureRoundInvestmentsOffsetResponseTransformer, GetVentureRoundsCursorResponseTransformer, GetVentureDutchDynamicRoundsCursorResponseTransformer, GetVentureDutchDynamicRoundsOffsetResponseTransformer, GetVentureRegularDynamicRoundsCursorResponseTransformer, GetVentureRegularDynamicRoundsOffsetResponseTransformer, GetVentureRoundsOffsetResponseTransformer, GetVentureFixedTotalRoundsCursorResponseTransformer, GetVentureFixedTotalRoundsOffsetResponseTransformer, GetVenturePartialTotalRoundsCursorResponseTransformer, GetVenturePartialTotalRoundsOffsetResponseTransformer } from './types.gen';

export const client = createClient(createConfig());

/**
 * Create a account
 * Create a account.
 */
export const createAccount = <ThrowOnError extends boolean = false>(options: Options<CreateAccountData, ThrowOnError>) => { return (options?.client ?? client).post<CreateAccountResponse, CreateAccountError, ThrowOnError>({
    ...options,
    url: '/account',
    responseTransformer: CreateAccountResponseTransformer
}); };

/**
 * Delete a account
 * Delete a account.
 */
export const deleteAccount = <ThrowOnError extends boolean = false>(options: Options<DeleteAccountData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteAccountResponse, DeleteAccountError, ThrowOnError>({
    ...options,
    url: '/account/{id}'
}); };

/**
 * Get account by ID
 * Get account by ID.
 */
export const getAccountById = <ThrowOnError extends boolean = false>(options: Options<GetAccountByIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetAccountByIdResponse, GetAccountByIdError, ThrowOnError>({
    ...options,
    url: '/account/{id}',
    responseTransformer: GetAccountByIdResponseTransformer
}); };

/**
 * Update a account
 * Update a account.
 */
export const updateAccount = <ThrowOnError extends boolean = false>(options: Options<UpdateAccountData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateAccountResponse, UpdateAccountError, ThrowOnError>({
    ...options,
    url: '/account/{id}',
    responseTransformer: UpdateAccountResponseTransformer
}); };

/**
 * Get businesses
 * Get businesses.
 */
export const getAccountBusinesses = <ThrowOnError extends boolean = false>(options: Options<GetAccountBusinessesData, ThrowOnError>) => { return (options?.client ?? client).get<GetAccountBusinessesResponse, GetAccountBusinessesError, ThrowOnError>({
    ...options,
    url: '/account/{id}/businesses',
    responseTransformer: GetAccountBusinessesResponseTransformer
}); };

/**
 * Create a round investment
 * Create a round investment.
 */
export const createRoundInvestment = <ThrowOnError extends boolean = false>(options: Options<CreateRoundInvestmentData, ThrowOnError>) => { return (options?.client ?? client).post<CreateRoundInvestmentResponse, CreateRoundInvestmentError, ThrowOnError>({
    ...options,
    url: '/account/{id}/round-investments',
    responseTransformer: CreateRoundInvestmentResponseTransformer
}); };

/**
 * Get round investments
 * Get round investments.
 */
export const getAccountRoundInvestmentsCursor = <ThrowOnError extends boolean = false>(options: Options<GetAccountRoundInvestmentsCursorData, ThrowOnError>) => { return (options?.client ?? client).get<GetAccountRoundInvestmentsCursorResponse, GetAccountRoundInvestmentsCursorError, ThrowOnError>({
    ...options,
    url: '/account/{id}/round-investments/cursor',
    responseTransformer: GetAccountRoundInvestmentsCursorResponseTransformer
}); };

/**
 * Get round investments
 * Get round investments.
 */
export const getRoundInvestmentsOffset = <ThrowOnError extends boolean = false>(options: Options<GetRoundInvestmentsOffsetData, ThrowOnError>) => { return (options?.client ?? client).get<GetRoundInvestmentsOffsetResponse, GetRoundInvestmentsOffsetError, ThrowOnError>({
    ...options,
    url: '/account/{id}/round-investments/offset',
    responseTransformer: GetRoundInvestmentsOffsetResponseTransformer
}); };

/**
 * Delete a round investment
 * Delete a round investment.
 */
export const deleteRoundInvestment = <ThrowOnError extends boolean = false>(options: Options<DeleteRoundInvestmentData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteRoundInvestmentResponse, DeleteRoundInvestmentError, ThrowOnError>({
    ...options,
    url: '/account/{id}/round-investments/{investmentId}'
}); };

/**
 * Get a stripe checkout link
 * Get a stripe checkout link.
 */
export const getAccountCheckoutLink = <ThrowOnError extends boolean = false>(options: Options<GetAccountCheckoutLinkData, ThrowOnError>) => { return (options?.client ?? client).get<GetAccountCheckoutLinkResponse, GetAccountCheckoutLinkError, ThrowOnError>({
    ...options,
    url: '/account/{id}/round-investments/{investmentId}/checkout'
}); };

/**
 * Withdraw a round investment
 * Withdraw a round investment.
 */
export const withdrawRoundInvestment = <ThrowOnError extends boolean = false>(options: Options<WithdrawRoundInvestmentData, ThrowOnError>) => { return (options?.client ?? client).post<WithdrawRoundInvestmentResponse, WithdrawRoundInvestmentError, ThrowOnError>({
    ...options,
    url: '/account/{id}/round-investments/{investmentId}/withdraw'
}); };

/**
 * Create a business
 * Create a business.
 */
export const createBusiness = <ThrowOnError extends boolean = false>(options: Options<CreateBusinessData, ThrowOnError>) => { return (options?.client ?? client).post<CreateBusinessResponse, CreateBusinessError, ThrowOnError>({
    ...options,
    url: '/business',
    responseTransformer: CreateBusinessResponseTransformer
}); };

/**
 * Delete a business member
 * Delete a business member.
 */
export const deleteBusinessMember = <ThrowOnError extends boolean = false>(options: Options<DeleteBusinessMemberData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteBusinessMemberResponse, DeleteBusinessMemberError, ThrowOnError>({
    ...options,
    url: '/business/{businessId}/members/{id}'
}); };

/**
 * Update a business member
 * Update a business member.
 */
export const updateBusinessMember = <ThrowOnError extends boolean = false>(options: Options<UpdateBusinessMemberData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateBusinessMemberResponse, UpdateBusinessMemberError, ThrowOnError>({
    ...options,
    url: '/business/{businessId}/members/{id}',
    responseTransformer: UpdateBusinessMemberResponseTransformer
}); };

/**
 * Delete a business
 * Delete a business.
 */
export const deleteBusiness = <ThrowOnError extends boolean = false>(options: Options<DeleteBusinessData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteBusinessResponse, DeleteBusinessError, ThrowOnError>({
    ...options,
    url: '/business/{id}'
}); };

/**
 * Get business by ID
 * Get business by ID.
 */
export const getBusinessById = <ThrowOnError extends boolean = false>(options: Options<GetBusinessByIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetBusinessByIdResponse, GetBusinessByIdError, ThrowOnError>({
    ...options,
    url: '/business/{id}',
    responseTransformer: GetBusinessByIdResponseTransformer
}); };

/**
 * Get business members
 * Get business members.
 */
export const getBusinessMembers = <ThrowOnError extends boolean = false>(options: Options<GetBusinessMembersData, ThrowOnError>) => { return (options?.client ?? client).get<GetBusinessMembersResponse, GetBusinessMembersError, ThrowOnError>({
    ...options,
    url: '/business/{id}/members',
    responseTransformer: GetBusinessMembersResponseTransformer
}); };

/**
 * Create a business member
 * Create a business member.
 */
export const createBusinessMember = <ThrowOnError extends boolean = false>(options: Options<CreateBusinessMemberData, ThrowOnError>) => { return (options?.client ?? client).post<CreateBusinessMemberResponse, CreateBusinessMemberError, ThrowOnError>({
    ...options,
    url: '/business/{id}/members',
    responseTransformer: CreateBusinessMemberResponseTransformer
}); };

/**
 * Get recieved round investments
 * Get recieved round investments.
 */
export const getBusinessRecievedRoundInvestmentsCursor = <ThrowOnError extends boolean = false>(options: Options<GetBusinessRecievedRoundInvestmentsCursorData, ThrowOnError>) => { return (options?.client ?? client).get<GetBusinessRecievedRoundInvestmentsCursorResponse, GetBusinessRecievedRoundInvestmentsCursorError, ThrowOnError>({
    ...options,
    url: '/business/{id}/round-investments/recieved/cursor',
    responseTransformer: GetBusinessRecievedRoundInvestmentsCursorResponseTransformer
}); };

/**
 * Get rounds
 * Get rounds.
 */
export const getBusinessRounds = <ThrowOnError extends boolean = false>(options: Options<GetBusinessRoundsData, ThrowOnError>) => { return (options?.client ?? client).get<GetBusinessRoundsResponse, GetBusinessRoundsError, ThrowOnError>({
    ...options,
    url: '/business/{id}/rounds',
    responseTransformer: GetBusinessRoundsResponseTransformer
}); };

/**
 * Get business ventures
 * Get all of the ventures owned by a given business.
 */
export const getBusinessVentures = <ThrowOnError extends boolean = false>(options: Options<GetBusinessVenturesData, ThrowOnError>) => { return (options?.client ?? client).get<GetBusinessVenturesResponse, GetBusinessVenturesError, ThrowOnError>({
    ...options,
    url: '/business/{id}/ventures',
    responseTransformer: GetBusinessVenturesResponseTransformer
}); };

/**
 * Get business ventures
 * Get all of the ventures owned by a given business.
 */
export const getBusinessVenturesByPage = <ThrowOnError extends boolean = false>(options: Options<GetBusinessVenturesByPageData, ThrowOnError>) => { return (options?.client ?? client).get<GetBusinessVenturesByPageResponse, GetBusinessVenturesByPageError, ThrowOnError>({
    ...options,
    url: '/business/{id}/ventures/page',
    responseTransformer: GetBusinessVenturesByPageResponseTransformer
}); };

/**
 * Health check
 * Health check.
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<HealthCheckResponse, HealthCheckError, ThrowOnError>({
    ...options,
    url: '/health'
}); };

/**
 * Get round by cursor
 * Get round by cursor.
 */
export const getRoundByCursor = <ThrowOnError extends boolean = false>(options?: Options<GetRoundByCursorData, ThrowOnError>) => { return (options?.client ?? client).get<GetRoundByCursorResponse, GetRoundByCursorError, ThrowOnError>({
    ...options,
    url: '/round/cursor',
    responseTransformer: GetRoundByCursorResponseTransformer
}); };

/**
 * Create a partial total round
 * Create a partial total round.
 */
export const createDutchDynamicRound = <ThrowOnError extends boolean = false>(options: Options<CreateDutchDynamicRoundData, ThrowOnError>) => { return (options?.client ?? client).post<CreateDutchDynamicRoundResponse, CreateDutchDynamicRoundError, ThrowOnError>({
    ...options,
    url: '/round/dynamic/dutch',
    responseTransformer: CreateDutchDynamicRoundResponseTransformer
}); };

/**
 * Get cursor paginated partial total rounds
 * Get cursor paginated partial total rounds.
 */
export const getAllDutchDynamicRoundsCursor = <ThrowOnError extends boolean = false>(options?: Options<GetAllDutchDynamicRoundsCursorData, ThrowOnError>) => { return (options?.client ?? client).get<GetAllDutchDynamicRoundsCursorResponse, GetAllDutchDynamicRoundsCursorError, ThrowOnError>({
    ...options,
    url: '/round/dynamic/dutch/cursor',
    responseTransformer: GetAllDutchDynamicRoundsCursorResponseTransformer
}); };

/**
 * Get offset paginated dutch dynamic rounds
 * Get offset paginated dutch dynamic rounds.
 */
export const getAllDutchDynamicRoundsOffset = <ThrowOnError extends boolean = false>(options?: Options<GetAllDutchDynamicRoundsOffsetData, ThrowOnError>) => { return (options?.client ?? client).get<GetAllDutchDynamicRoundsOffsetResponse, GetAllDutchDynamicRoundsOffsetError, ThrowOnError>({
    ...options,
    url: '/round/dynamic/dutch/offset',
    responseTransformer: GetAllDutchDynamicRoundsOffsetResponseTransformer
}); };

/**
 * Delete a dutch dynamic round
 * Delete a dutch dynamic round.
 */
export const deleteDutchDynamicRound = <ThrowOnError extends boolean = false>(options: Options<DeleteDutchDynamicRoundData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteDutchDynamicRoundResponse, DeleteDutchDynamicRoundError, ThrowOnError>({
    ...options,
    url: '/round/dynamic/dutch/{id}'
}); };

/**
 * Get dutch dynamic round by ID
 * Get partial total round by the associated round ID.
 */
export const getDutchDynamicRoundById = <ThrowOnError extends boolean = false>(options: Options<GetDutchDynamicRoundByIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetDutchDynamicRoundByIdResponse, GetDutchDynamicRoundByIdError, ThrowOnError>({
    ...options,
    url: '/round/dynamic/dutch/{id}',
    responseTransformer: GetDutchDynamicRoundByIdResponseTransformer
}); };

/**
 * Create a regular dynamic round
 * Create a regular dynamic round.
 */
export const createRegularDynamicRound = <ThrowOnError extends boolean = false>(options: Options<CreateRegularDynamicRoundData, ThrowOnError>) => { return (options?.client ?? client).post<CreateRegularDynamicRoundResponse, CreateRegularDynamicRoundError, ThrowOnError>({
    ...options,
    url: '/round/dynamic/regular',
    responseTransformer: CreateRegularDynamicRoundResponseTransformer
}); };

/**
 * Get cursor paginated regular dynamic rounds
 * Get cursor paginated regular dynamic rounds.
 */
export const getAllRegularDynamicRoundsCursor = <ThrowOnError extends boolean = false>(options?: Options<GetAllRegularDynamicRoundsCursorData, ThrowOnError>) => { return (options?.client ?? client).get<GetAllRegularDynamicRoundsCursorResponse, GetAllRegularDynamicRoundsCursorError, ThrowOnError>({
    ...options,
    url: '/round/dynamic/regular/cursor',
    responseTransformer: GetAllRegularDynamicRoundsCursorResponseTransformer
}); };

/**
 * Get offset paginated regular dynamic rounds
 * Get offset paginated regular dynamic rounds.
 */
export const getAllRegularDynamicRoundsOffset = <ThrowOnError extends boolean = false>(options?: Options<GetAllRegularDynamicRoundsOffsetData, ThrowOnError>) => { return (options?.client ?? client).get<GetAllRegularDynamicRoundsOffsetResponse, GetAllRegularDynamicRoundsOffsetError, ThrowOnError>({
    ...options,
    url: '/round/dynamic/regular/offset',
    responseTransformer: GetAllRegularDynamicRoundsOffsetResponseTransformer
}); };

/**
 * Delete a regular dynamic round
 * Delete a regular dynamic round.
 */
export const deleteRegularDynamicRound = <ThrowOnError extends boolean = false>(options: Options<DeleteRegularDynamicRoundData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteRegularDynamicRoundResponse, DeleteRegularDynamicRoundError, ThrowOnError>({
    ...options,
    url: '/round/dynamic/regular/{id}'
}); };

/**
 * Get regular dynamic round by ID
 * Get regular dynamic round by the associated round ID.
 */
export const getRegularDynamicRoundById = <ThrowOnError extends boolean = false>(options: Options<GetRegularDynamicRoundByIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetRegularDynamicRoundByIdResponse, GetRegularDynamicRoundByIdError, ThrowOnError>({
    ...options,
    url: '/round/dynamic/regular/{id}',
    responseTransformer: GetRegularDynamicRoundByIdResponseTransformer
}); };

/**
 * Get round by page
 * Get round by page.
 */
export const getRoundByPage = <ThrowOnError extends boolean = false>(options?: Options<GetRoundByPageData, ThrowOnError>) => { return (options?.client ?? client).get<GetRoundByPageResponse, GetRoundByPageError, ThrowOnError>({
    ...options,
    url: '/round/page',
    responseTransformer: GetRoundByPageResponseTransformer
}); };

/**
 * Create a fixed total round
 * Create a fixed total round.
 */
export const createFixedTotalRound = <ThrowOnError extends boolean = false>(options: Options<CreateFixedTotalRoundData, ThrowOnError>) => { return (options?.client ?? client).post<CreateFixedTotalRoundResponse, CreateFixedTotalRoundError, ThrowOnError>({
    ...options,
    url: '/round/total/fixed',
    responseTransformer: CreateFixedTotalRoundResponseTransformer
}); };

/**
 * Get cursor paginated fixed total rounds
 * Get cursor paginated fixed total rounds.
 */
export const getAllFixedTotalRoundsCursor = <ThrowOnError extends boolean = false>(options?: Options<GetAllFixedTotalRoundsCursorData, ThrowOnError>) => { return (options?.client ?? client).get<GetAllFixedTotalRoundsCursorResponse, GetAllFixedTotalRoundsCursorError, ThrowOnError>({
    ...options,
    url: '/round/total/fixed/cursor',
    responseTransformer: GetAllFixedTotalRoundsCursorResponseTransformer
}); };

/**
 * Get offset paginated fixed total rounds
 * Get offset paginated fixed total rounds.
 */
export const getAllFixedTotalRoundsOffset = <ThrowOnError extends boolean = false>(options?: Options<GetAllFixedTotalRoundsOffsetData, ThrowOnError>) => { return (options?.client ?? client).get<GetAllFixedTotalRoundsOffsetResponse, GetAllFixedTotalRoundsOffsetError, ThrowOnError>({
    ...options,
    url: '/round/total/fixed/offset',
    responseTransformer: GetAllFixedTotalRoundsOffsetResponseTransformer
}); };

/**
 * Delete a fixed total round
 * Delete a fixed total round.
 */
export const deleteFixedTotalRound = <ThrowOnError extends boolean = false>(options: Options<DeleteFixedTotalRoundData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteFixedTotalRoundResponse, DeleteFixedTotalRoundError, ThrowOnError>({
    ...options,
    url: '/round/total/fixed/{id}'
}); };

/**
 * Get fixed total round by ID
 * Get fixed total round by the associated round ID.
 */
export const getFixedTotalRoundById = <ThrowOnError extends boolean = false>(options: Options<GetFixedTotalRoundByIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetFixedTotalRoundByIdResponse, GetFixedTotalRoundByIdError, ThrowOnError>({
    ...options,
    url: '/round/total/fixed/{id}',
    responseTransformer: GetFixedTotalRoundByIdResponseTransformer
}); };

/**
 * Create a partial total round
 * Create a partial total round.
 */
export const createPartialTotalRound = <ThrowOnError extends boolean = false>(options: Options<CreatePartialTotalRoundData, ThrowOnError>) => { return (options?.client ?? client).post<CreatePartialTotalRoundResponse, CreatePartialTotalRoundError, ThrowOnError>({
    ...options,
    url: '/round/total/partial',
    responseTransformer: CreatePartialTotalRoundResponseTransformer
}); };

/**
 * Get cursor paginated partial total rounds
 * Get cursor paginated partial total rounds.
 */
export const getAllPartialTotalRoundsCursor = <ThrowOnError extends boolean = false>(options?: Options<GetAllPartialTotalRoundsCursorData, ThrowOnError>) => { return (options?.client ?? client).get<GetAllPartialTotalRoundsCursorResponse, GetAllPartialTotalRoundsCursorError, ThrowOnError>({
    ...options,
    url: '/round/total/partial/cursor',
    responseTransformer: GetAllPartialTotalRoundsCursorResponseTransformer
}); };

/**
 * Get offset paginated partial total rounds
 * Get offset paginated partial total rounds.
 */
export const getAllPartialTotalRoundsOffset = <ThrowOnError extends boolean = false>(options?: Options<GetAllPartialTotalRoundsOffsetData, ThrowOnError>) => { return (options?.client ?? client).get<GetAllPartialTotalRoundsOffsetResponse, GetAllPartialTotalRoundsOffsetError, ThrowOnError>({
    ...options,
    url: '/round/total/partial/offset',
    responseTransformer: GetAllPartialTotalRoundsOffsetResponseTransformer
}); };

/**
 * Delete a partial total round
 * Delete a partial total round.
 */
export const deletePartialTotalRound = <ThrowOnError extends boolean = false>(options: Options<DeletePartialTotalRoundData, ThrowOnError>) => { return (options?.client ?? client).delete<DeletePartialTotalRoundResponse, DeletePartialTotalRoundError, ThrowOnError>({
    ...options,
    url: '/round/total/partial/{id}'
}); };

/**
 * Get partial total round by ID
 * Get partial total round by the associated round ID.
 */
export const getPartialTotalRoundById = <ThrowOnError extends boolean = false>(options: Options<GetPartialTotalRoundByIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetPartialTotalRoundByIdResponse, GetPartialTotalRoundByIdError, ThrowOnError>({
    ...options,
    url: '/round/total/partial/{id}',
    responseTransformer: GetPartialTotalRoundByIdResponseTransformer
}); };

/**
 * Get round by ID
 * Get round by ID.
 */
export const getRoundById = <ThrowOnError extends boolean = false>(options: Options<GetRoundByIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetRoundByIdResponse, GetRoundByIdError, ThrowOnError>({
    ...options,
    url: '/round/{id}',
    responseTransformer: GetRoundByIdResponseTransformer
}); };

/**
 * Get round investments
 * Get round investments.
 */
export const getRoundRoundInvestmentsCursor = <ThrowOnError extends boolean = false>(options: Options<GetRoundRoundInvestmentsCursorData, ThrowOnError>) => { return (options?.client ?? client).get<GetRoundRoundInvestmentsCursorResponse, GetRoundRoundInvestmentsCursorError, ThrowOnError>({
    ...options,
    url: '/round/{id}/round-investments/cursor',
    responseTransformer: GetRoundRoundInvestmentsCursorResponseTransformer
}); };

/**
 * Get round investments
 * Get round investments.
 */
export const getRoundRoundInvestmentsOffset = <ThrowOnError extends boolean = false>(options: Options<GetRoundRoundInvestmentsOffsetData, ThrowOnError>) => { return (options?.client ?? client).get<GetRoundRoundInvestmentsOffsetResponse, GetRoundRoundInvestmentsOffsetError, ThrowOnError>({
    ...options,
    url: '/round/{id}/round-investments/offset',
    responseTransformer: GetRoundRoundInvestmentsOffsetResponseTransformer
}); };

/**
 * Accept a round investment
 * Accept a round investment.
 */
export const acceptRoundInvestment = <ThrowOnError extends boolean = false>(options: Options<AcceptRoundInvestmentData, ThrowOnError>) => { return (options?.client ?? client).post<AcceptRoundInvestmentResponse, AcceptRoundInvestmentError, ThrowOnError>({
    ...options,
    url: '/round/{id}/round-investments/{investmentId}/accept'
}); };

/**
 * Get a user's account
 * Get the current account of a user.
 */
export const getUserAccount = <ThrowOnError extends boolean = false>(options: Options<GetUserAccountData, ThrowOnError>) => { return (options?.client ?? client).get<GetUserAccountResponse, GetUserAccountError, ThrowOnError>({
    ...options,
    url: '/user/{userId}/account',
    responseTransformer: GetUserAccountResponseTransformer
}); };

/**
 * Create a venture
 * Create a venture.
 */
export const createVenture = <ThrowOnError extends boolean = false>(options: Options<CreateVentureData, ThrowOnError>) => { return (options?.client ?? client).post<CreateVentureResponse, CreateVentureError, ThrowOnError>({
    ...options,
    url: '/venture',
    responseTransformer: CreateVentureResponseTransformer
}); };

/**
 * Get cursor paginated ventures
 * Get cursor paginated ventures.
 */
export const getAllVenturesCursor = <ThrowOnError extends boolean = false>(options?: Options<GetAllVenturesCursorData, ThrowOnError>) => { return (options?.client ?? client).get<GetAllVenturesCursorResponse, GetAllVenturesCursorError, ThrowOnError>({
    ...options,
    url: '/venture/cursor',
    responseTransformer: GetAllVenturesCursorResponseTransformer
}); };

/**
 * Get offset paginated ventures
 * Get offset paginated ventures.
 */
export const getAllVenturesOffset = <ThrowOnError extends boolean = false>(options?: Options<GetAllVenturesOffsetData, ThrowOnError>) => { return (options?.client ?? client).get<GetAllVenturesOffsetResponse, GetAllVenturesOffsetError, ThrowOnError>({
    ...options,
    url: '/venture/offset',
    responseTransformer: GetAllVenturesOffsetResponseTransformer
}); };

/**
 * Delete a venture
 * Delete a venture.
 */
export const deleteVenture = <ThrowOnError extends boolean = false>(options: Options<DeleteVentureData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteVentureResponse, DeleteVentureError, ThrowOnError>({
    ...options,
    url: '/venture/{id}'
}); };

/**
 * Get venture by ID
 * Get venture by ID.
 */
export const getVentureById = <ThrowOnError extends boolean = false>(options: Options<GetVentureByIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetVentureByIdResponse, GetVentureByIdError, ThrowOnError>({
    ...options,
    url: '/venture/{id}',
    responseTransformer: GetVentureByIdResponseTransformer
}); };

/**
 * Update a venture
 * Update a venture.
 */
export const updateVenture = <ThrowOnError extends boolean = false>(options: Options<UpdateVentureData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateVentureResponse, UpdateVentureError, ThrowOnError>({
    ...options,
    url: '/venture/{id}',
    responseTransformer: UpdateVentureResponseTransformer
}); };

/**
 * Get cursor paginated round investments for a venture
 * Get all round investments for a venture.
 */
export const getVentureRoundInvestmentsCursor = <ThrowOnError extends boolean = false>(options: Options<GetVentureRoundInvestmentsCursorData, ThrowOnError>) => { return (options?.client ?? client).get<GetVentureRoundInvestmentsCursorResponse, GetVentureRoundInvestmentsCursorError, ThrowOnError>({
    ...options,
    url: '/venture/{id}/round-investments/cursor',
    responseTransformer: GetVentureRoundInvestmentsCursorResponseTransformer
}); };

/**
 * Get offset paginated round investments for a venture
 * Get all round investments for a venture.
 */
export const getVentureRoundInvestmentsOffset = <ThrowOnError extends boolean = false>(options: Options<GetVentureRoundInvestmentsOffsetData, ThrowOnError>) => { return (options?.client ?? client).get<GetVentureRoundInvestmentsOffsetResponse, GetVentureRoundInvestmentsOffsetError, ThrowOnError>({
    ...options,
    url: '/venture/{id}/round-investments/offset',
    responseTransformer: GetVentureRoundInvestmentsOffsetResponseTransformer
}); };

/**
 * Get cursor paginated rounds for a venture
 * Get all rounds for a venture.
 */
export const getVentureRoundsCursor = <ThrowOnError extends boolean = false>(options: Options<GetVentureRoundsCursorData, ThrowOnError>) => { return (options?.client ?? client).get<GetVentureRoundsCursorResponse, GetVentureRoundsCursorError, ThrowOnError>({
    ...options,
    url: '/venture/{id}/rounds/cursor',
    responseTransformer: GetVentureRoundsCursorResponseTransformer
}); };

/**
 * Get cursor paginated rounds for a venture
 * Get all rounds for a venture.
 */
export const getVentureDutchDynamicRoundsCursor = <ThrowOnError extends boolean = false>(options: Options<GetVentureDutchDynamicRoundsCursorData, ThrowOnError>) => { return (options?.client ?? client).get<GetVentureDutchDynamicRoundsCursorResponse, GetVentureDutchDynamicRoundsCursorError, ThrowOnError>({
    ...options,
    url: '/venture/{id}/rounds/dynamic/dutch/cursor',
    responseTransformer: GetVentureDutchDynamicRoundsCursorResponseTransformer
}); };

/**
 * Get offset paginated rounds for a venture
 * Get all rounds for a venture.
 */
export const getVentureDutchDynamicRoundsOffset = <ThrowOnError extends boolean = false>(options: Options<GetVentureDutchDynamicRoundsOffsetData, ThrowOnError>) => { return (options?.client ?? client).get<GetVentureDutchDynamicRoundsOffsetResponse, GetVentureDutchDynamicRoundsOffsetError, ThrowOnError>({
    ...options,
    url: '/venture/{id}/rounds/dynamic/dutch/offset',
    responseTransformer: GetVentureDutchDynamicRoundsOffsetResponseTransformer
}); };

/**
 * Get cursor paginated rounds for a venture
 * Get all rounds for a venture.
 */
export const getVentureRegularDynamicRoundsCursor = <ThrowOnError extends boolean = false>(options: Options<GetVentureRegularDynamicRoundsCursorData, ThrowOnError>) => { return (options?.client ?? client).get<GetVentureRegularDynamicRoundsCursorResponse, GetVentureRegularDynamicRoundsCursorError, ThrowOnError>({
    ...options,
    url: '/venture/{id}/rounds/dynamic/regular/cursor',
    responseTransformer: GetVentureRegularDynamicRoundsCursorResponseTransformer
}); };

/**
 * Get offset paginated rounds for a venture
 * Get all rounds for a venture.
 */
export const getVentureRegularDynamicRoundsOffset = <ThrowOnError extends boolean = false>(options: Options<GetVentureRegularDynamicRoundsOffsetData, ThrowOnError>) => { return (options?.client ?? client).get<GetVentureRegularDynamicRoundsOffsetResponse, GetVentureRegularDynamicRoundsOffsetError, ThrowOnError>({
    ...options,
    url: '/venture/{id}/rounds/dynamic/regular/offset',
    responseTransformer: GetVentureRegularDynamicRoundsOffsetResponseTransformer
}); };

/**
 * Get offset paginated rounds for a venture
 * Get all rounds for a venture.
 */
export const getVentureRoundsOffset = <ThrowOnError extends boolean = false>(options: Options<GetVentureRoundsOffsetData, ThrowOnError>) => { return (options?.client ?? client).get<GetVentureRoundsOffsetResponse, GetVentureRoundsOffsetError, ThrowOnError>({
    ...options,
    url: '/venture/{id}/rounds/offset',
    responseTransformer: GetVentureRoundsOffsetResponseTransformer
}); };

/**
 * Get cursor paginated rounds for a venture
 * Get all rounds for a venture.
 */
export const getVentureFixedTotalRoundsCursor = <ThrowOnError extends boolean = false>(options: Options<GetVentureFixedTotalRoundsCursorData, ThrowOnError>) => { return (options?.client ?? client).get<GetVentureFixedTotalRoundsCursorResponse, GetVentureFixedTotalRoundsCursorError, ThrowOnError>({
    ...options,
    url: '/venture/{id}/rounds/total/fixed/cursor',
    responseTransformer: GetVentureFixedTotalRoundsCursorResponseTransformer
}); };

/**
 * Get offset paginated rounds for a venture
 * Get all rounds for a venture.
 */
export const getVentureFixedTotalRoundsOffset = <ThrowOnError extends boolean = false>(options: Options<GetVentureFixedTotalRoundsOffsetData, ThrowOnError>) => { return (options?.client ?? client).get<GetVentureFixedTotalRoundsOffsetResponse, GetVentureFixedTotalRoundsOffsetError, ThrowOnError>({
    ...options,
    url: '/venture/{id}/rounds/total/fixed/offset',
    responseTransformer: GetVentureFixedTotalRoundsOffsetResponseTransformer
}); };

/**
 * Get cursor paginated rounds for a venture
 * Get all rounds for a venture.
 */
export const getVenturePartialTotalRoundsCursor = <ThrowOnError extends boolean = false>(options: Options<GetVenturePartialTotalRoundsCursorData, ThrowOnError>) => { return (options?.client ?? client).get<GetVenturePartialTotalRoundsCursorResponse, GetVenturePartialTotalRoundsCursorError, ThrowOnError>({
    ...options,
    url: '/venture/{id}/rounds/total/partial/cursor',
    responseTransformer: GetVenturePartialTotalRoundsCursorResponseTransformer
}); };

/**
 * Get offset paginated rounds for a venture
 * Get all rounds for a venture.
 */
export const getVenturePartialTotalRoundsOffset = <ThrowOnError extends boolean = false>(options: Options<GetVenturePartialTotalRoundsOffsetData, ThrowOnError>) => { return (options?.client ?? client).get<GetVenturePartialTotalRoundsOffsetResponse, GetVenturePartialTotalRoundsOffsetError, ThrowOnError>({
    ...options,
    url: '/venture/{id}/rounds/total/partial/offset',
    responseTransformer: GetVenturePartialTotalRoundsOffsetResponseTransformer
}); };