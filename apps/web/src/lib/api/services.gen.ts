// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-fetch';
import { type CreateAccountData, type CreateAccountError, type CreateAccountResponse, type DeleteAccountData, type DeleteAccountError, type DeleteAccountResponse, type GetAccountByIdData, type GetAccountByIdError, type GetAccountByIdResponse, type UpdateAccountData, type UpdateAccountError, type UpdateAccountResponse, type GetAccountBusinessesData, type GetAccountBusinessesError, type GetAccountBusinessesResponse, type GetAccountChatsData, type GetAccountChatsError, type GetAccountChatsResponse, type GetAccountInvestmentsByCursorData, type GetAccountInvestmentsByCursorError, type GetAccountInvestmentsByCursorResponse, type GetAccountInvestmentsByPageData, type GetAccountInvestmentsByPageError, type GetAccountInvestmentsByPageResponse, type GetDailyAggregatedBusinessAnalyticsData, type GetDailyAggregatedBusinessAnalyticsError, type GetDailyAggregatedBusinessAnalyticsResponse, type DeleteBusinessFavouriteData, type DeleteBusinessFavouriteError, type DeleteBusinessFavouriteResponse, type GetBusinessFavouriteStatusData, type GetBusinessFavouriteStatusError, type GetBusinessFavouriteStatusResponse, type CreateBusinessFavouriteData, type CreateBusinessFavouriteError, type CreateBusinessFavouriteResponse, type GetBusinessFavouriteCountData, type GetBusinessFavouriteCountError, type GetBusinessFavouriteCountResponse, type GetBusinessImpressionCountData, type GetBusinessImpressionCountError, type GetBusinessImpressionCountResponse, type CreateBusinessImpressionData, type CreateBusinessImpressionError, type CreateBusinessImpressionResponse, type GetDailyAggregatedRoundAnalyticsData, type GetDailyAggregatedRoundAnalyticsError, type GetDailyAggregatedRoundAnalyticsResponse, type DeleteRoundFavouriteData, type DeleteRoundFavouriteError, type DeleteRoundFavouriteResponse, type GetRoundFavouriteStatusData, type GetRoundFavouriteStatusError, type GetRoundFavouriteStatusResponse, type CreateRoundFavouriteData, type CreateRoundFavouriteError, type CreateRoundFavouriteResponse, type GetRoundFavouriteCountData, type GetRoundFavouriteCountError, type GetRoundFavouriteCountResponse, type GetRoundImpressionCountData, type GetRoundImpressionCountError, type GetRoundImpressionCountResponse, type CreateRoundImpressionData, type CreateRoundImpressionError, type CreateRoundImpressionResponse, type CreateBusinessData, type CreateBusinessError, type CreateBusinessResponse, type DeleteBusinessData, type DeleteBusinessError, type DeleteBusinessResponse, type GetBusinessByIdData, type GetBusinessByIdError, type GetBusinessByIdResponse, type GetBusinessTotalFundingData, type GetBusinessTotalFundingError, type GetBusinessTotalFundingResponse, type GetBusinessInvestmentsByCursorData, type GetBusinessInvestmentsByCursorError, type GetBusinessInvestmentsByCursorResponse, type GetBusinessInvestmentsByPageData, type GetBusinessInvestmentsByPageError, type GetBusinessInvestmentsByPageResponse, type GetBusinessMembersByPageData, type GetBusinessMembersByPageError, type GetBusinessMembersByPageResponse, type GetBusinessMemberRolesData, type GetBusinessMemberRolesError, type GetBusinessMemberRolesResponse, type GetBusinessRoundsByCursorData, type GetBusinessRoundsByCursorError, type GetBusinessRoundsByCursorResponse, type GetBusinessRoundsByPageData, type GetBusinessRoundsByPageError, type GetBusinessRoundsByPageResponse, type GetStripeDashboardUrlData, type GetStripeDashboardUrlError, type GetStripeDashboardUrlResponse, type OnboardStripeConnectedAccountData, type OnboardStripeConnectedAccountError, type OnboardStripeConnectedAccountResponse, type CreateChatData, type CreateChatError, type CreateChatResponse, type DeleteChatMessageData, type DeleteChatMessageError, type DeleteChatMessageResponse, type UpdateChatMessageData, type UpdateChatMessageError, type UpdateChatMessageResponse, type DeleteChatData, type DeleteChatError, type DeleteChatResponse, type GetChatMessagesData, type GetChatMessagesError, type GetChatMessagesResponse, type CreateChatMessageData, type CreateChatMessageError, type CreateChatMessageResponse, type HealthCheckError, type HealthCheckResponse, type GetAllIndustriesError, type GetAllIndustriesResponse, type GetInvestmentByIdData, type GetInvestmentByIdError, type GetInvestmentByIdResponse, type CreateInvestmentPaymentIntentData, type CreateInvestmentPaymentIntentError, type CreateInvestmentPaymentIntentResponse, type GetRoundByCursorData, type GetRoundByCursorError, type GetRoundByCursorResponse, type CreateRoundData, type CreateRoundError, type CreateRoundResponse, type GetRoundsByPageData, type GetRoundsByPageError, type GetRoundsByPageResponse, type DeleteRoundData, type DeleteRoundError, type DeleteRoundResponse, type GetRoundByIdData, type GetRoundByIdError, type GetRoundByIdResponse, type GetUserAccountData, type GetUserAccountError, type GetUserAccountResponse, CreateAccountResponseTransformer, GetAccountByIdResponseTransformer, UpdateAccountResponseTransformer, GetAccountBusinessesResponseTransformer, GetAccountChatsResponseTransformer, GetAccountInvestmentsByCursorResponseTransformer, GetAccountInvestmentsByPageResponseTransformer, GetBusinessByIdResponseTransformer, GetBusinessInvestmentsByCursorResponseTransformer, GetBusinessInvestmentsByPageResponseTransformer, GetBusinessMembersByPageResponseTransformer, GetBusinessMemberRolesResponseTransformer, GetBusinessRoundsByCursorResponseTransformer, GetBusinessRoundsByPageResponseTransformer, CreateChatResponseTransformer, GetChatMessagesResponseTransformer, GetAllIndustriesResponseTransformer, GetInvestmentByIdResponseTransformer, GetRoundByCursorResponseTransformer, CreateRoundResponseTransformer, GetRoundsByPageResponseTransformer, GetRoundByIdResponseTransformer, GetUserAccountResponseTransformer } from './types.gen';

export const client = createClient(createConfig());

/**
 * Create a account
 * Create a account.
 */
export const createAccount = <ThrowOnError extends boolean = false>(options: Options<CreateAccountData, ThrowOnError>) => { return (options?.client ?? client).post<CreateAccountResponse, CreateAccountError, ThrowOnError>({
    ...options,
    url: '/account',
    responseTransformer: CreateAccountResponseTransformer
}); };

/**
 * Delete a account
 * Delete a account.
 */
export const deleteAccount = <ThrowOnError extends boolean = false>(options: Options<DeleteAccountData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteAccountResponse, DeleteAccountError, ThrowOnError>({
    ...options,
    url: '/account/{id}'
}); };

/**
 * Get account by ID
 * Get account by ID.
 */
export const getAccountById = <ThrowOnError extends boolean = false>(options: Options<GetAccountByIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetAccountByIdResponse, GetAccountByIdError, ThrowOnError>({
    ...options,
    url: '/account/{id}',
    responseTransformer: GetAccountByIdResponseTransformer
}); };

/**
 * Update a account
 * Update a account.
 */
export const updateAccount = <ThrowOnError extends boolean = false>(options: Options<UpdateAccountData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateAccountResponse, UpdateAccountError, ThrowOnError>({
    ...options,
    url: '/account/{id}',
    responseTransformer: UpdateAccountResponseTransformer
}); };

/**
 * Get businesses
 * Get businesses.
 */
export const getAccountBusinesses = <ThrowOnError extends boolean = false>(options: Options<GetAccountBusinessesData, ThrowOnError>) => { return (options?.client ?? client).get<GetAccountBusinessesResponse, GetAccountBusinessesError, ThrowOnError>({
    ...options,
    url: '/account/{id}/businesses',
    responseTransformer: GetAccountBusinessesResponseTransformer
}); };

/**
 * Get account chats
 * Get account chats.
 */
export const getAccountChats = <ThrowOnError extends boolean = false>(options: Options<GetAccountChatsData, ThrowOnError>) => { return (options?.client ?? client).get<GetAccountChatsResponse, GetAccountChatsError, ThrowOnError>({
    ...options,
    url: '/account/{id}/chats',
    responseTransformer: GetAccountChatsResponseTransformer
}); };

/**
 * Get round investments
 * Get round investments.
 */
export const getAccountInvestmentsByCursor = <ThrowOnError extends boolean = false>(options: Options<GetAccountInvestmentsByCursorData, ThrowOnError>) => { return (options?.client ?? client).get<GetAccountInvestmentsByCursorResponse, GetAccountInvestmentsByCursorError, ThrowOnError>({
    ...options,
    url: '/account/{id}/investments',
    responseTransformer: GetAccountInvestmentsByCursorResponseTransformer
}); };

/**
 * Get round investments
 * Get round investments.
 */
export const getAccountInvestmentsByPage = <ThrowOnError extends boolean = false>(options: Options<GetAccountInvestmentsByPageData, ThrowOnError>) => { return (options?.client ?? client).get<GetAccountInvestmentsByPageResponse, GetAccountInvestmentsByPageError, ThrowOnError>({
    ...options,
    url: '/account/{id}/investments/page',
    responseTransformer: GetAccountInvestmentsByPageResponseTransformer
}); };

/**
 * Get daily aggregated business analytics
 * Get daily aggregated business analytics.
 */
export const getDailyAggregatedBusinessAnalytics = <ThrowOnError extends boolean = false>(options: Options<GetDailyAggregatedBusinessAnalyticsData, ThrowOnError>) => { return (options?.client ?? client).get<GetDailyAggregatedBusinessAnalyticsResponse, GetDailyAggregatedBusinessAnalyticsError, ThrowOnError>({
    ...options,
    url: '/analytic/businesses/{id}'
}); };

/**
 * Delete a business favourite
 * Delete a business favourite.
 */
export const deleteBusinessFavourite = <ThrowOnError extends boolean = false>(options: Options<DeleteBusinessFavouriteData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteBusinessFavouriteResponse, DeleteBusinessFavouriteError, ThrowOnError>({
    ...options,
    url: '/analytic/businesses/{id}/account/{accountId}/favourite'
}); };

/**
 * Get a business favourite status
 * Get a business favourite status.
 */
export const getBusinessFavouriteStatus = <ThrowOnError extends boolean = false>(options: Options<GetBusinessFavouriteStatusData, ThrowOnError>) => { return (options?.client ?? client).get<GetBusinessFavouriteStatusResponse, GetBusinessFavouriteStatusError, ThrowOnError>({
    ...options,
    url: '/analytic/businesses/{id}/account/{accountId}/favourite'
}); };

/**
 * Create a business favourite
 * Create a business favourite.
 */
export const createBusinessFavourite = <ThrowOnError extends boolean = false>(options: Options<CreateBusinessFavouriteData, ThrowOnError>) => { return (options?.client ?? client).post<CreateBusinessFavouriteResponse, CreateBusinessFavouriteError, ThrowOnError>({
    ...options,
    url: '/analytic/businesses/{id}/account/{accountId}/favourite'
}); };

/**
 * Get a business favourite count
 * Get a business favourite count.
 */
export const getBusinessFavouriteCount = <ThrowOnError extends boolean = false>(options: Options<GetBusinessFavouriteCountData, ThrowOnError>) => { return (options?.client ?? client).get<GetBusinessFavouriteCountResponse, GetBusinessFavouriteCountError, ThrowOnError>({
    ...options,
    url: '/analytic/businesses/{id}/favourites'
}); };

/**
 * Get a business impression count
 * Get a business impression count.
 */
export const getBusinessImpressionCount = <ThrowOnError extends boolean = false>(options: Options<GetBusinessImpressionCountData, ThrowOnError>) => { return (options?.client ?? client).get<GetBusinessImpressionCountResponse, GetBusinessImpressionCountError, ThrowOnError>({
    ...options,
    url: '/analytic/businesses/{id}/impressions'
}); };

/**
 * Create a business impression
 * Create a business impression.
 */
export const createBusinessImpression = <ThrowOnError extends boolean = false>(options: Options<CreateBusinessImpressionData, ThrowOnError>) => { return (options?.client ?? client).post<CreateBusinessImpressionResponse, CreateBusinessImpressionError, ThrowOnError>({
    ...options,
    url: '/analytic/businesses/{id}/impressions'
}); };

/**
 * Get daily aggregated round analytics
 * Get daily aggregated round analytics.
 */
export const getDailyAggregatedRoundAnalytics = <ThrowOnError extends boolean = false>(options: Options<GetDailyAggregatedRoundAnalyticsData, ThrowOnError>) => { return (options?.client ?? client).get<GetDailyAggregatedRoundAnalyticsResponse, GetDailyAggregatedRoundAnalyticsError, ThrowOnError>({
    ...options,
    url: '/analytic/rounds/{id}'
}); };

/**
 * Delete a round favourite
 * Delete a round favourite.
 */
export const deleteRoundFavourite = <ThrowOnError extends boolean = false>(options: Options<DeleteRoundFavouriteData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteRoundFavouriteResponse, DeleteRoundFavouriteError, ThrowOnError>({
    ...options,
    url: '/analytic/rounds/{id}/account/{accountId}/favourite'
}); };

/**
 * Get a round favourite status
 * Get a round favourite status.
 */
export const getRoundFavouriteStatus = <ThrowOnError extends boolean = false>(options: Options<GetRoundFavouriteStatusData, ThrowOnError>) => { return (options?.client ?? client).get<GetRoundFavouriteStatusResponse, GetRoundFavouriteStatusError, ThrowOnError>({
    ...options,
    url: '/analytic/rounds/{id}/account/{accountId}/favourite'
}); };

/**
 * Create a round favourite
 * Create a round favourite.
 */
export const createRoundFavourite = <ThrowOnError extends boolean = false>(options: Options<CreateRoundFavouriteData, ThrowOnError>) => { return (options?.client ?? client).post<CreateRoundFavouriteResponse, CreateRoundFavouriteError, ThrowOnError>({
    ...options,
    url: '/analytic/rounds/{id}/account/{accountId}/favourite'
}); };

/**
 * Get a round favourite count
 * Get a round favourite count.
 */
export const getRoundFavouriteCount = <ThrowOnError extends boolean = false>(options: Options<GetRoundFavouriteCountData, ThrowOnError>) => { return (options?.client ?? client).get<GetRoundFavouriteCountResponse, GetRoundFavouriteCountError, ThrowOnError>({
    ...options,
    url: '/analytic/rounds/{id}/favourites'
}); };

/**
 * Get a round impression count
 * Get a round impression count.
 */
export const getRoundImpressionCount = <ThrowOnError extends boolean = false>(options: Options<GetRoundImpressionCountData, ThrowOnError>) => { return (options?.client ?? client).get<GetRoundImpressionCountResponse, GetRoundImpressionCountError, ThrowOnError>({
    ...options,
    url: '/analytic/rounds/{id}/impressions'
}); };

/**
 * Create a round impression
 * Create a round impression.
 */
export const createRoundImpression = <ThrowOnError extends boolean = false>(options: Options<CreateRoundImpressionData, ThrowOnError>) => { return (options?.client ?? client).post<CreateRoundImpressionResponse, CreateRoundImpressionError, ThrowOnError>({
    ...options,
    url: '/analytic/rounds/{id}/impressions'
}); };

/**
 * Create a business
 * Create a business.
 */
export const createBusiness = <ThrowOnError extends boolean = false>(options: Options<CreateBusinessData, ThrowOnError>) => { return (options?.client ?? client).post<CreateBusinessResponse, CreateBusinessError, ThrowOnError>({
    ...options,
    url: '/business'
}); };

/**
 * Delete a business
 * Delete a business.
 */
export const deleteBusiness = <ThrowOnError extends boolean = false>(options: Options<DeleteBusinessData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteBusinessResponse, DeleteBusinessError, ThrowOnError>({
    ...options,
    url: '/business/{id}'
}); };

/**
 * Get business by ID
 * Get business by ID.
 */
export const getBusinessById = <ThrowOnError extends boolean = false>(options: Options<GetBusinessByIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetBusinessByIdResponse, GetBusinessByIdError, ThrowOnError>({
    ...options,
    url: '/business/{id}',
    responseTransformer: GetBusinessByIdResponseTransformer
}); };

/**
 * Get total funding
 * Get total funding.
 */
export const getBusinessTotalFunding = <ThrowOnError extends boolean = false>(options: Options<GetBusinessTotalFundingData, ThrowOnError>) => { return (options?.client ?? client).get<GetBusinessTotalFundingResponse, GetBusinessTotalFundingError, ThrowOnError>({
    ...options,
    url: '/business/{id}/funding'
}); };

/**
 * Get recieved round investments
 * Get recieved round investments.
 */
export const getBusinessInvestmentsByCursor = <ThrowOnError extends boolean = false>(options: Options<GetBusinessInvestmentsByCursorData, ThrowOnError>) => { return (options?.client ?? client).get<GetBusinessInvestmentsByCursorResponse, GetBusinessInvestmentsByCursorError, ThrowOnError>({
    ...options,
    url: '/business/{id}/investments',
    responseTransformer: GetBusinessInvestmentsByCursorResponseTransformer
}); };

/**
 * Get recieved round investments
 * Get recieved round investments.
 */
export const getBusinessInvestmentsByPage = <ThrowOnError extends boolean = false>(options: Options<GetBusinessInvestmentsByPageData, ThrowOnError>) => { return (options?.client ?? client).get<GetBusinessInvestmentsByPageResponse, GetBusinessInvestmentsByPageError, ThrowOnError>({
    ...options,
    url: '/business/{id}/investments/page',
    responseTransformer: GetBusinessInvestmentsByPageResponseTransformer
}); };

/**
 * Get business members
 * Get business members.
 */
export const getBusinessMembersByPage = <ThrowOnError extends boolean = false>(options: Options<GetBusinessMembersByPageData, ThrowOnError>) => { return (options?.client ?? client).get<GetBusinessMembersByPageResponse, GetBusinessMembersByPageError, ThrowOnError>({
    ...options,
    url: '/business/{id}/members/page',
    responseTransformer: GetBusinessMembersByPageResponseTransformer
}); };

/**
 * Get business member roles
 * Get all the roles created for this business.
 */
export const getBusinessMemberRoles = <ThrowOnError extends boolean = false>(options: Options<GetBusinessMemberRolesData, ThrowOnError>) => { return (options?.client ?? client).get<GetBusinessMemberRolesResponse, GetBusinessMemberRolesError, ThrowOnError>({
    ...options,
    url: '/business/{id}/roles',
    responseTransformer: GetBusinessMemberRolesResponseTransformer
}); };

/**
 * Get rounds
 * Get rounds.
 */
export const getBusinessRoundsByCursor = <ThrowOnError extends boolean = false>(options: Options<GetBusinessRoundsByCursorData, ThrowOnError>) => { return (options?.client ?? client).get<GetBusinessRoundsByCursorResponse, GetBusinessRoundsByCursorError, ThrowOnError>({
    ...options,
    url: '/business/{id}/rounds',
    responseTransformer: GetBusinessRoundsByCursorResponseTransformer
}); };

/**
 * Get rounds
 * Get rounds.
 */
export const getBusinessRoundsByPage = <ThrowOnError extends boolean = false>(options: Options<GetBusinessRoundsByPageData, ThrowOnError>) => { return (options?.client ?? client).get<GetBusinessRoundsByPageResponse, GetBusinessRoundsByPageError, ThrowOnError>({
    ...options,
    url: '/business/{id}/rounds/page',
    responseTransformer: GetBusinessRoundsByPageResponseTransformer
}); };

/**
 * Get Stripe dashboard url
 * Get Stripe dashboard url.
 */
export const getStripeDashboardUrl = <ThrowOnError extends boolean = false>(options: Options<GetStripeDashboardUrlData, ThrowOnError>) => { return (options?.client ?? client).get<GetStripeDashboardUrlResponse, GetStripeDashboardUrlError, ThrowOnError>({
    ...options,
    url: '/business/{id}/stripe-dashboard-url'
}); };

/**
 * Onboard Stripe connected account
 * Onboard Stripe connected account.
 */
export const onboardStripeConnectedAccount = <ThrowOnError extends boolean = false>(options: Options<OnboardStripeConnectedAccountData, ThrowOnError>) => { return (options?.client ?? client).post<OnboardStripeConnectedAccountResponse, OnboardStripeConnectedAccountError, ThrowOnError>({
    ...options,
    url: '/business/{id}/stripe-onboard'
}); };

/**
 * Create a chat
 * Create a chat.
 */
export const createChat = <ThrowOnError extends boolean = false>(options: Options<CreateChatData, ThrowOnError>) => { return (options?.client ?? client).post<CreateChatResponse, CreateChatError, ThrowOnError>({
    ...options,
    url: '/chat',
    responseTransformer: CreateChatResponseTransformer
}); };

/**
 * Delete a chat message
 * Delete a chat message.
 */
export const deleteChatMessage = <ThrowOnError extends boolean = false>(options: Options<DeleteChatMessageData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteChatMessageResponse, DeleteChatMessageError, ThrowOnError>({
    ...options,
    url: '/chat/message/{id}'
}); };

/**
 * Update a chat message
 * Update a chat message.
 */
export const updateChatMessage = <ThrowOnError extends boolean = false>(options: Options<UpdateChatMessageData, ThrowOnError>) => { return (options?.client ?? client).put<UpdateChatMessageResponse, UpdateChatMessageError, ThrowOnError>({
    ...options,
    url: '/chat/message/{id}'
}); };

/**
 * Delete a chat
 * Delete a chat.
 */
export const deleteChat = <ThrowOnError extends boolean = false>(options: Options<DeleteChatData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteChatResponse, DeleteChatError, ThrowOnError>({
    ...options,
    url: '/chat/{id}'
}); };

/**
 * Get chat messages
 * Get chat messages.
 */
export const getChatMessages = <ThrowOnError extends boolean = false>(options: Options<GetChatMessagesData, ThrowOnError>) => { return (options?.client ?? client).get<GetChatMessagesResponse, GetChatMessagesError, ThrowOnError>({
    ...options,
    url: '/chat/{id}/messages',
    responseTransformer: GetChatMessagesResponseTransformer
}); };

/**
 * Create a chat message
 * Create a chat message.
 */
export const createChatMessage = <ThrowOnError extends boolean = false>(options: Options<CreateChatMessageData, ThrowOnError>) => { return (options?.client ?? client).post<CreateChatMessageResponse, CreateChatMessageError, ThrowOnError>({
    ...options,
    url: '/chat/{id}/messages'
}); };

/**
 * Health check
 * Health check.
 */
export const healthCheck = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<HealthCheckResponse, HealthCheckError, ThrowOnError>({
    ...options,
    url: '/health'
}); };

/**
 * Get all industries
 * Get all industries.
 */
export const getAllIndustries = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetAllIndustriesResponse, GetAllIndustriesError, ThrowOnError>({
    ...options,
    url: '/industries',
    responseTransformer: GetAllIndustriesResponseTransformer
}); };

/**
 * Get a round investment
 * Get a round investment.
 */
export const getInvestmentById = <ThrowOnError extends boolean = false>(options: Options<GetInvestmentByIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetInvestmentByIdResponse, GetInvestmentByIdError, ThrowOnError>({
    ...options,
    url: '/investments/{id}',
    responseTransformer: GetInvestmentByIdResponseTransformer
}); };

/**
 * Create a stripe payment intent
 * Create a stripe payment intent.
 */
export const createInvestmentPaymentIntent = <ThrowOnError extends boolean = false>(options: Options<CreateInvestmentPaymentIntentData, ThrowOnError>) => { return (options?.client ?? client).get<CreateInvestmentPaymentIntentResponse, CreateInvestmentPaymentIntentError, ThrowOnError>({
    ...options,
    url: '/investments/{id}/payment-intent'
}); };

/**
 * Get rounds by cursor
 * Get rounds by cursor.
 */
export const getRoundByCursor = <ThrowOnError extends boolean = false>(options?: Options<GetRoundByCursorData, ThrowOnError>) => { return (options?.client ?? client).get<GetRoundByCursorResponse, GetRoundByCursorError, ThrowOnError>({
    ...options,
    url: '/round',
    responseTransformer: GetRoundByCursorResponseTransformer
}); };

/**
 * Create a round
 * Create a round.
 */
export const createRound = <ThrowOnError extends boolean = false>(options: Options<CreateRoundData, ThrowOnError>) => { return (options?.client ?? client).post<CreateRoundResponse, CreateRoundError, ThrowOnError>({
    ...options,
    url: '/round',
    responseTransformer: CreateRoundResponseTransformer
}); };

/**
 * Get rounds by page
 * Get rounds by page.
 */
export const getRoundsByPage = <ThrowOnError extends boolean = false>(options?: Options<GetRoundsByPageData, ThrowOnError>) => { return (options?.client ?? client).get<GetRoundsByPageResponse, GetRoundsByPageError, ThrowOnError>({
    ...options,
    url: '/round/page',
    responseTransformer: GetRoundsByPageResponseTransformer
}); };

/**
 * Delete a round
 * Delete a round.
 */
export const deleteRound = <ThrowOnError extends boolean = false>(options: Options<DeleteRoundData, ThrowOnError>) => { return (options?.client ?? client).delete<DeleteRoundResponse, DeleteRoundError, ThrowOnError>({
    ...options,
    url: '/round/{id}'
}); };

/**
 * Get round by ID
 * Get round by ID.
 */
export const getRoundById = <ThrowOnError extends boolean = false>(options: Options<GetRoundByIdData, ThrowOnError>) => { return (options?.client ?? client).get<GetRoundByIdResponse, GetRoundByIdError, ThrowOnError>({
    ...options,
    url: '/round/{id}',
    responseTransformer: GetRoundByIdResponseTransformer
}); };

/**
 * Get a user's account
 * Get the current account of a user.
 */
export const getUserAccount = <ThrowOnError extends boolean = false>(options: Options<GetUserAccountData, ThrowOnError>) => { return (options?.client ?? client).get<GetUserAccountResponse, GetUserAccountError, ThrowOnError>({
    ...options,
    url: '/user/{userId}/account',
    responseTransformer: GetUserAccountResponseTransformer
}); };