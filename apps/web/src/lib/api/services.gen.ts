// This file is auto-generated by @hey-api/openapi-ts

import {
	createClient,
	createConfig,
	type Options,
} from "@hey-api/client-fetch";
import {
	type CreateAccountData,
	type CreateAccountError,
	type CreateAccountResponse,
	type DeleteAccountData,
	type DeleteAccountError,
	type DeleteAccountResponse,
	type GetAccountByIdData,
	type GetAccountByIdError,
	type GetAccountByIdResponse,
	type UpdateAccountData,
	type UpdateAccountError,
	type UpdateAccountResponse,
	type GetAccountBusinessesData,
	type GetAccountBusinessesError,
	type GetAccountBusinessesResponse,
	type GetAccountInvestmentsByCursorData,
	type GetAccountInvestmentsByCursorError,
	type GetAccountInvestmentsByCursorResponse,
	type CreateRoundInvestmentData,
	type CreateRoundInvestmentError,
	type CreateRoundInvestmentResponse,
	type GetAccountInvestmentsByPageData,
	type GetAccountInvestmentsByPageError,
	type GetAccountInvestmentsByPageResponse,
	type DeleteRoundInvestmentData,
	type DeleteRoundInvestmentError,
	type DeleteRoundInvestmentResponse,
	type GetAccountCheckoutLinkData,
	type GetAccountCheckoutLinkError,
	type GetAccountCheckoutLinkResponse,
	type WithdrawInvestmentData,
	type WithdrawInvestmentError,
	type WithdrawInvestmentResponse,
	type HandleStripeWebhookData,
	type HandleStripeWebhookError,
	type HandleStripeWebhookResponse,
	type CreateBusinessData,
	type CreateBusinessError,
	type CreateBusinessResponse,
	type DeleteBusinessData,
	type DeleteBusinessError,
	type DeleteBusinessResponse,
	type GetBusinessByIdData,
	type GetBusinessByIdError,
	type GetBusinessByIdResponse,
	type GetBusinessInvestmentsByCursorData,
	type GetBusinessInvestmentsByCursorError,
	type GetBusinessInvestmentsByCursorResponse,
	type GetBusinessInvestmentsByPageData,
	type GetBusinessInvestmentsByPageError,
	type GetBusinessInvestmentsByPageResponse,
	type GetBusinessRoundsByCursorData,
	type GetBusinessRoundsByCursorError,
	type GetBusinessRoundsByCursorResponse,
	type GetBusinessRoundsByPageData,
	type GetBusinessRoundsByPageError,
	type GetBusinessRoundsByPageResponse,
	type GetBusinessVenturesByCursorData,
	type GetBusinessVenturesByCursorError,
	type GetBusinessVenturesByCursorResponse,
	type GetBusinessVenturesByPageData,
	type GetBusinessVenturesByPageError,
	type GetBusinessVenturesByPageResponse,
	type HealthCheckError,
	type HealthCheckResponse,
	type GetInvestmentByIdData,
	type GetInvestmentByIdError,
	type GetInvestmentByIdResponse,
	type GetRoundByCursorData,
	type GetRoundByCursorError,
	type GetRoundByCursorResponse,
	type CreateRoundData,
	type CreateRoundError,
	type CreateRoundResponse,
	type GetRoundsByPageData,
	type GetRoundsByPageError,
	type GetRoundsByPageResponse,
	type DeleteRoundData,
	type DeleteRoundError,
	type DeleteRoundResponse,
	type GetRoundByIdData,
	type GetRoundByIdError,
	type GetRoundByIdResponse,
	type DeleteRoundLikeData,
	type DeleteRoundLikeError,
	type DeleteRoundLikeResponse,
	type GetRoundLikeStatusData,
	type GetRoundLikeStatusError,
	type GetRoundLikeStatusResponse,
	type CreateRoundLikeData,
	type CreateRoundLikeError,
	type CreateRoundLikeResponse,
	type GetRoundInvestmentsByCursorData,
	type GetRoundInvestmentsByCursorError,
	type GetRoundInvestmentsByCursorResponse,
	type GetRoundInvestmentsByPageData,
	type GetRoundInvestmentsByPageError,
	type GetRoundInvestmentsByPageResponse,
	type AcceptInvestmentData,
	type AcceptInvestmentError,
	type AcceptInvestmentResponse,
	type GetRoundLikeCountData,
	type GetRoundLikeCountError,
	type GetRoundLikeCountResponse,
	type GetUserAccountData,
	type GetUserAccountError,
	type GetUserAccountResponse,
	type GetVenturesByCursorData,
	type GetVenturesByCursorError,
	type GetVenturesByCursorResponse,
	type CreateVentureData,
	type CreateVentureError,
	type CreateVentureResponse,
	type GetVenturesByPageData,
	type GetVenturesByPageError,
	type GetVenturesByPageResponse,
	type DeleteVentureData,
	type DeleteVentureError,
	type DeleteVentureResponse,
	type GetVentureByIdData,
	type GetVentureByIdError,
	type GetVentureByIdResponse,
	type UpdateVentureData,
	type UpdateVentureError,
	type UpdateVentureResponse,
	type DeleteVentureLikeData,
	type DeleteVentureLikeError,
	type DeleteVentureLikeResponse,
	type GetVentureLikeStatusData,
	type GetVentureLikeStatusError,
	type GetVentureLikeStatusResponse,
	type CreateVentureLikeData,
	type CreateVentureLikeError,
	type CreateVentureLikeResponse,
	type GetVentureLikeCountData,
	type GetVentureLikeCountError,
	type GetVentureLikeCountResponse,
	type GetVentureRoundInvestmentsByCursorData,
	type GetVentureRoundInvestmentsByCursorError,
	type GetVentureRoundInvestmentsByCursorResponse,
	type GetVentureRoundInvestmentsByPageData,
	type GetVentureRoundInvestmentsByPageError,
	type GetVentureRoundInvestmentsByPageResponse,
	type GetVentureRoundsByCursorData,
	type GetVentureRoundsByCursorError,
	type GetVentureRoundsByCursorResponse,
	type GetVentureRoundsByPageData,
	type GetVentureRoundsByPageError,
	type GetVentureRoundsByPageResponse,
	CreateAccountResponseTransformer,
	GetAccountByIdResponseTransformer,
	UpdateAccountResponseTransformer,
	GetAccountBusinessesResponseTransformer,
	GetAccountInvestmentsByCursorResponseTransformer,
	CreateRoundInvestmentResponseTransformer,
	GetAccountInvestmentsByPageResponseTransformer,
	CreateBusinessResponseTransformer,
	GetBusinessByIdResponseTransformer,
	GetBusinessInvestmentsByCursorResponseTransformer,
	GetBusinessInvestmentsByPageResponseTransformer,
	GetBusinessRoundsByCursorResponseTransformer,
	GetBusinessRoundsByPageResponseTransformer,
	GetBusinessVenturesByCursorResponseTransformer,
	GetBusinessVenturesByPageResponseTransformer,
	GetInvestmentByIdResponseTransformer,
	GetRoundByCursorResponseTransformer,
	CreateRoundResponseTransformer,
	GetRoundsByPageResponseTransformer,
	GetRoundByIdResponseTransformer,
	GetRoundInvestmentsByCursorResponseTransformer,
	GetRoundInvestmentsByPageResponseTransformer,
	GetUserAccountResponseTransformer,
	GetVenturesByCursorResponseTransformer,
	CreateVentureResponseTransformer,
	GetVenturesByPageResponseTransformer,
	GetVentureByIdResponseTransformer,
	UpdateVentureResponseTransformer,
	GetVentureRoundInvestmentsByCursorResponseTransformer,
	GetVentureRoundInvestmentsByPageResponseTransformer,
	GetVentureRoundsByCursorResponseTransformer,
	GetVentureRoundsByPageResponseTransformer,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Create a account
 * Create a account.
 */
export const createAccount = <ThrowOnError extends boolean = false>(
	options: Options<CreateAccountData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		CreateAccountResponse,
		CreateAccountError,
		ThrowOnError
	>({
		...options,
		url: "/account",
		responseTransformer: CreateAccountResponseTransformer,
	});
};

/**
 * Delete a account
 * Delete a account.
 */
export const deleteAccount = <ThrowOnError extends boolean = false>(
	options: Options<DeleteAccountData, ThrowOnError>
) => {
	return (options?.client ?? client).delete<
		DeleteAccountResponse,
		DeleteAccountError,
		ThrowOnError
	>({
		...options,
		url: "/account/{id}",
	});
};

/**
 * Get account by ID
 * Get account by ID.
 */
export const getAccountById = <ThrowOnError extends boolean = false>(
	options: Options<GetAccountByIdData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetAccountByIdResponse,
		GetAccountByIdError,
		ThrowOnError
	>({
		...options,
		url: "/account/{id}",
		responseTransformer: GetAccountByIdResponseTransformer,
	});
};

/**
 * Update a account
 * Update a account.
 */
export const updateAccount = <ThrowOnError extends boolean = false>(
	options: Options<UpdateAccountData, ThrowOnError>
) => {
	return (options?.client ?? client).put<
		UpdateAccountResponse,
		UpdateAccountError,
		ThrowOnError
	>({
		...options,
		url: "/account/{id}",
		responseTransformer: UpdateAccountResponseTransformer,
	});
};

/**
 * Get businesses
 * Get businesses.
 */
export const getAccountBusinesses = <ThrowOnError extends boolean = false>(
	options: Options<GetAccountBusinessesData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetAccountBusinessesResponse,
		GetAccountBusinessesError,
		ThrowOnError
	>({
		...options,
		url: "/account/{id}/businesses",
		responseTransformer: GetAccountBusinessesResponseTransformer,
	});
};

/**
 * Get round investments
 * Get round investments.
 */
export const getAccountInvestmentsByCursor = <
	ThrowOnError extends boolean = false
>(
	options: Options<GetAccountInvestmentsByCursorData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetAccountInvestmentsByCursorResponse,
		GetAccountInvestmentsByCursorError,
		ThrowOnError
	>({
		...options,
		url: "/account/{id}/investments",
		responseTransformer: GetAccountInvestmentsByCursorResponseTransformer,
	});
};

/**
 * Create a round investment
 * Create a round investment.
 */
export const createRoundInvestment = <ThrowOnError extends boolean = false>(
	options: Options<CreateRoundInvestmentData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		CreateRoundInvestmentResponse,
		CreateRoundInvestmentError,
		ThrowOnError
	>({
		...options,
		url: "/account/{id}/investments",
		responseTransformer: CreateRoundInvestmentResponseTransformer,
	});
};

/**
 * Get round investments
 * Get round investments.
 */
export const getAccountInvestmentsByPage = <
	ThrowOnError extends boolean = false
>(
	options: Options<GetAccountInvestmentsByPageData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetAccountInvestmentsByPageResponse,
		GetAccountInvestmentsByPageError,
		ThrowOnError
	>({
		...options,
		url: "/account/{id}/investments/page",
		responseTransformer: GetAccountInvestmentsByPageResponseTransformer,
	});
};

/**
 * Delete a round investment
 * Delete a round investment.
 */
export const deleteRoundInvestment = <ThrowOnError extends boolean = false>(
	options: Options<DeleteRoundInvestmentData, ThrowOnError>
) => {
	return (options?.client ?? client).delete<
		DeleteRoundInvestmentResponse,
		DeleteRoundInvestmentError,
		ThrowOnError
	>({
		...options,
		url: "/account/{id}/investments/{investmentId}",
	});
};

/**
 * Get a stripe checkout link
 * Get a stripe checkout link.
 */
export const getAccountCheckoutLink = <ThrowOnError extends boolean = false>(
	options: Options<GetAccountCheckoutLinkData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetAccountCheckoutLinkResponse,
		GetAccountCheckoutLinkError,
		ThrowOnError
	>({
		...options,
		url: "/account/{id}/investments/{investmentId}/checkout",
	});
};

/**
 * Withdraw a investment
 * Withdraw a investment.
 */
export const withdrawInvestment = <ThrowOnError extends boolean = false>(
	options: Options<WithdrawInvestmentData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		WithdrawInvestmentResponse,
		WithdrawInvestmentError,
		ThrowOnError
	>({
		...options,
		url: "/account/{id}/investments/{investmentId}/withdraw",
	});
};

/**
 * Create a business
 * Create a business.
 */
export const createBusiness = <ThrowOnError extends boolean = false>(
	options: Options<CreateBusinessData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		CreateBusinessResponse,
		CreateBusinessError,
		ThrowOnError
	>({
		...options,
		url: "/business",
		responseTransformer: CreateBusinessResponseTransformer,
	});
};

/**
 * Delete a business
 * Delete a business.
 */
export const deleteBusiness = <ThrowOnError extends boolean = false>(
	options: Options<DeleteBusinessData, ThrowOnError>
) => {
	return (options?.client ?? client).delete<
		DeleteBusinessResponse,
		DeleteBusinessError,
		ThrowOnError
	>({
		...options,
		url: "/business/{id}",
	});
};

/**
 * Get business by ID
 * Get business by ID.
 */
export const getBusinessById = <ThrowOnError extends boolean = false>(
	options: Options<GetBusinessByIdData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetBusinessByIdResponse,
		GetBusinessByIdError,
		ThrowOnError
	>({
		...options,
		url: "/business/{id}",
		responseTransformer: GetBusinessByIdResponseTransformer,
	});
};

/**
 * Get recieved round investments
 * Get recieved round investments.
 */
export const getBusinessInvestmentsByCursor = <
	ThrowOnError extends boolean = false
>(
	options: Options<GetBusinessInvestmentsByCursorData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetBusinessInvestmentsByCursorResponse,
		GetBusinessInvestmentsByCursorError,
		ThrowOnError
	>({
		...options,
		url: "/business/{id}/investments",
		responseTransformer: GetBusinessInvestmentsByCursorResponseTransformer,
	});
};

/**
 * Get recieved round investments
 * Get recieved round investments.
 */
export const getBusinessInvestmentsByPage = <
	ThrowOnError extends boolean = false
>(
	options: Options<GetBusinessInvestmentsByPageData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetBusinessInvestmentsByPageResponse,
		GetBusinessInvestmentsByPageError,
		ThrowOnError
	>({
		...options,
		url: "/business/{id}/investments/page",
		responseTransformer: GetBusinessInvestmentsByPageResponseTransformer,
	});
};

/**
 * Get rounds
 * Get rounds.
 */
export const getBusinessRoundsByCursor = <ThrowOnError extends boolean = false>(
	options: Options<GetBusinessRoundsByCursorData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetBusinessRoundsByCursorResponse,
		GetBusinessRoundsByCursorError,
		ThrowOnError
	>({
		...options,
		url: "/business/{id}/rounds",
		responseTransformer: GetBusinessRoundsByCursorResponseTransformer,
	});
};

/**
 * Get rounds
 * Get rounds.
 */
export const getBusinessRoundsByPage = <ThrowOnError extends boolean = false>(
	options: Options<GetBusinessRoundsByPageData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetBusinessRoundsByPageResponse,
		GetBusinessRoundsByPageError,
		ThrowOnError
	>({
		...options,
		url: "/business/{id}/rounds/page",
		responseTransformer: GetBusinessRoundsByPageResponseTransformer,
	});
};

/**
 * Get business ventures
 * Get all of the ventures owned by a given business.
 */
export const getBusinessVenturesByCursor = <
	ThrowOnError extends boolean = false
>(
	options: Options<GetBusinessVenturesByCursorData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetBusinessVenturesByCursorResponse,
		GetBusinessVenturesByCursorError,
		ThrowOnError
	>({
		...options,
		url: "/business/{id}/ventures",
		responseTransformer: GetBusinessVenturesByCursorResponseTransformer,
	});
};

/**
 * Get business ventures
 * Get all of the ventures owned by a given business.
 */
export const getBusinessVenturesByPage = <ThrowOnError extends boolean = false>(
	options: Options<GetBusinessVenturesByPageData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetBusinessVenturesByPageResponse,
		GetBusinessVenturesByPageError,
		ThrowOnError
	>({
		...options,
		url: "/business/{id}/ventures/page",
		responseTransformer: GetBusinessVenturesByPageResponseTransformer,
	});
};

/**
 * Health check
 * Health check.
 */
export const healthCheck = <ThrowOnError extends boolean = false>(
	options?: Options<unknown, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		HealthCheckResponse,
		HealthCheckError,
		ThrowOnError
	>({
		...options,
		url: "/health",
	});
};

/**
 * Get investment by ID
 * Get investment by ID.
 */
export const getInvestmentById = <ThrowOnError extends boolean = false>(
	options: Options<GetInvestmentByIdData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetInvestmentByIdResponse,
		GetInvestmentByIdError,
		ThrowOnError
	>({
		...options,
		url: "/investment/{id}",
		responseTransformer: GetInvestmentByIdResponseTransformer,
	});
};

/**
 * Get rounds by cursor
 * Get rounds by cursor.
 */
export const getRoundByCursor = <ThrowOnError extends boolean = false>(
	options?: Options<GetRoundByCursorData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetRoundByCursorResponse,
		GetRoundByCursorError,
		ThrowOnError
	>({
		...options,
		url: "/round",
		responseTransformer: GetRoundByCursorResponseTransformer,
	});
};

/**
 * Create a round
 * Create a round.
 */
export const createRound = <ThrowOnError extends boolean = false>(
	options: Options<CreateRoundData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		CreateRoundResponse,
		CreateRoundError,
		ThrowOnError
	>({
		...options,
		url: "/round",
		responseTransformer: CreateRoundResponseTransformer,
	});
};

/**
 * Get rounds by page
 * Get rounds by page.
 */
export const getRoundsByPage = <ThrowOnError extends boolean = false>(
	options?: Options<GetRoundsByPageData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetRoundsByPageResponse,
		GetRoundsByPageError,
		ThrowOnError
	>({
		...options,
		url: "/round/page",
		responseTransformer: GetRoundsByPageResponseTransformer,
	});
};

/**
 * Delete a round
 * Delete a round.
 */
export const deleteRound = <ThrowOnError extends boolean = false>(
	options: Options<DeleteRoundData, ThrowOnError>
) => {
	return (options?.client ?? client).delete<
		DeleteRoundResponse,
		DeleteRoundError,
		ThrowOnError
	>({
		...options,
		url: "/round/{id}",
	});
};

/**
 * Get round by ID
 * Get round by ID.
 */
export const getRoundById = <ThrowOnError extends boolean = false>(
	options: Options<GetRoundByIdData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetRoundByIdResponse,
		GetRoundByIdError,
		ThrowOnError
	>({
		...options,
		url: "/round/{id}",
		responseTransformer: GetRoundByIdResponseTransformer,
	});
};

/**
 * Delete a round like
 * Delete a round like.
 */
export const deleteRoundLike = <ThrowOnError extends boolean = false>(
	options: Options<DeleteRoundLikeData, ThrowOnError>
) => {
	return (options?.client ?? client).delete<
		DeleteRoundLikeResponse,
		DeleteRoundLikeError,
		ThrowOnError
	>({
		...options,
		url: "/round/{id}/account/{accountId}/like",
	});
};

/**
 * Get a round like status
 * Get a round like status.
 */
export const getRoundLikeStatus = <ThrowOnError extends boolean = false>(
	options: Options<GetRoundLikeStatusData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetRoundLikeStatusResponse,
		GetRoundLikeStatusError,
		ThrowOnError
	>({
		...options,
		url: "/round/{id}/account/{accountId}/like",
	});
};

/**
 * Create a round like
 * Create a round like.
 */
export const createRoundLike = <ThrowOnError extends boolean = false>(
	options: Options<CreateRoundLikeData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		CreateRoundLikeResponse,
		CreateRoundLikeError,
		ThrowOnError
	>({
		...options,
		url: "/round/{id}/account/{accountId}/like",
	});
};

/**
 * Get round investments
 * Get round investments.
 */
export const getRoundInvestmentsByCursor = <
	ThrowOnError extends boolean = false
>(
	options: Options<GetRoundInvestmentsByCursorData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetRoundInvestmentsByCursorResponse,
		GetRoundInvestmentsByCursorError,
		ThrowOnError
	>({
		...options,
		url: "/round/{id}/investments",
		responseTransformer: GetRoundInvestmentsByCursorResponseTransformer,
	});
};

/**
 * Get round investments
 * Get round investments.
 */
export const getRoundInvestmentsByPage = <ThrowOnError extends boolean = false>(
	options: Options<GetRoundInvestmentsByPageData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetRoundInvestmentsByPageResponse,
		GetRoundInvestmentsByPageError,
		ThrowOnError
	>({
		...options,
		url: "/round/{id}/investments/page",
		responseTransformer: GetRoundInvestmentsByPageResponseTransformer,
	});
};

/**
 * Accept an investment
 * Accept an investment.
 */
export const acceptInvestment = <ThrowOnError extends boolean = false>(
	options: Options<AcceptInvestmentData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		AcceptInvestmentResponse,
		AcceptInvestmentError,
		ThrowOnError
	>({
		...options,
		url: "/round/{id}/investments/{investmentId}/accept",
	});
};

/**
 * Get a round like count
 * Get a round like count.
 */
export const getRoundLikeCount = <ThrowOnError extends boolean = false>(
	options: Options<GetRoundLikeCountData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetRoundLikeCountResponse,
		GetRoundLikeCountError,
		ThrowOnError
	>({
		...options,
		url: "/round/{id}/like",
	});
};

/**
 * Get a user's account
 * Get the current account of a user.
 */
export const getUserAccount = <ThrowOnError extends boolean = false>(
	options: Options<GetUserAccountData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetUserAccountResponse,
		GetUserAccountError,
		ThrowOnError
	>({
		...options,
		url: "/user/{userId}/account",
		responseTransformer: GetUserAccountResponseTransformer,
	});
};

/**
 * Get cursor paginated ventures
 * Get cursor paginated ventures.
 */
export const getVenturesByCursor = <ThrowOnError extends boolean = false>(
	options?: Options<GetVenturesByCursorData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetVenturesByCursorResponse,
		GetVenturesByCursorError,
		ThrowOnError
	>({
		...options,
		url: "/venture",
		responseTransformer: GetVenturesByCursorResponseTransformer,
	});
};

/**
 * Create a venture
 * Create a venture.
 */
export const createVenture = <ThrowOnError extends boolean = false>(
	options: Options<CreateVentureData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		CreateVentureResponse,
		CreateVentureError,
		ThrowOnError
	>({
		...options,
		url: "/venture",
		responseTransformer: CreateVentureResponseTransformer,
	});
};

/**
 * Get offset paginated ventures
 * Get offset paginated ventures.
 */
export const getVenturesByPage = <ThrowOnError extends boolean = false>(
	options?: Options<GetVenturesByPageData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetVenturesByPageResponse,
		GetVenturesByPageError,
		ThrowOnError
	>({
		...options,
		url: "/venture/page",
		responseTransformer: GetVenturesByPageResponseTransformer,
	});
};

/**
 * Delete a venture
 * Delete a venture.
 */
export const deleteVenture = <ThrowOnError extends boolean = false>(
	options: Options<DeleteVentureData, ThrowOnError>
) => {
	return (options?.client ?? client).delete<
		DeleteVentureResponse,
		DeleteVentureError,
		ThrowOnError
	>({
		...options,
		url: "/venture/{id}",
	});
};

/**
 * Get venture by ID
 * Get venture by ID.
 */
export const getVentureById = <ThrowOnError extends boolean = false>(
	options: Options<GetVentureByIdData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetVentureByIdResponse,
		GetVentureByIdError,
		ThrowOnError
	>({
		...options,
		url: "/venture/{id}",
		responseTransformer: GetVentureByIdResponseTransformer,
	});
};

/**
 * Update a venture
 * Update a venture.
 */
export const updateVenture = <ThrowOnError extends boolean = false>(
	options: Options<UpdateVentureData, ThrowOnError>
) => {
	return (options?.client ?? client).put<
		UpdateVentureResponse,
		UpdateVentureError,
		ThrowOnError
	>({
		...options,
		url: "/venture/{id}",
		responseTransformer: UpdateVentureResponseTransformer,
	});
};

/**
 * Delete a venture like
 * Delete a venture like.
 */
export const deleteVentureLike = <ThrowOnError extends boolean = false>(
	options: Options<DeleteVentureLikeData, ThrowOnError>
) => {
	return (options?.client ?? client).delete<
		DeleteVentureLikeResponse,
		DeleteVentureLikeError,
		ThrowOnError
	>({
		...options,
		url: "/venture/{id}/account/{accountId}/like",
	});
};

/**
 * Get a venture like status
 * Get a venture like status.
 */
export const getVentureLikeStatus = <ThrowOnError extends boolean = false>(
	options: Options<GetVentureLikeStatusData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetVentureLikeStatusResponse,
		GetVentureLikeStatusError,
		ThrowOnError
	>({
		...options,
		url: "/venture/{id}/account/{accountId}/like",
	});
};

/**
 * Create a venture like
 * Create a venture like.
 */
export const createVentureLike = <ThrowOnError extends boolean = false>(
	options: Options<CreateVentureLikeData, ThrowOnError>
) => {
	return (options?.client ?? client).post<
		CreateVentureLikeResponse,
		CreateVentureLikeError,
		ThrowOnError
	>({
		...options,
		url: "/venture/{id}/account/{accountId}/like",
	});
};

/**
 * Get a venture like count
 * Get a venture like count.
 */
export const getVentureLikeCount = <ThrowOnError extends boolean = false>(
	options: Options<GetVentureLikeCountData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetVentureLikeCountResponse,
		GetVentureLikeCountError,
		ThrowOnError
	>({
		...options,
		url: "/venture/{id}/like",
	});
};

/**
 * Get cursor paginated round investments for a venture
 * Get all round investments for a venture.
 */
export const getVentureRoundInvestmentsByCursor = <
	ThrowOnError extends boolean = false
>(
	options: Options<GetVentureRoundInvestmentsByCursorData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetVentureRoundInvestmentsByCursorResponse,
		GetVentureRoundInvestmentsByCursorError,
		ThrowOnError
	>({
		...options,
		url: "/venture/{id}/round-investments",
		responseTransformer: GetVentureRoundInvestmentsByCursorResponseTransformer,
	});
};

/**
 * Get offset paginated round investments for a venture
 * Get all round investments for a venture.
 */
export const getVentureRoundInvestmentsByPage = <
	ThrowOnError extends boolean = false
>(
	options: Options<GetVentureRoundInvestmentsByPageData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetVentureRoundInvestmentsByPageResponse,
		GetVentureRoundInvestmentsByPageError,
		ThrowOnError
	>({
		...options,
		url: "/venture/{id}/round-investments/page",
		responseTransformer: GetVentureRoundInvestmentsByPageResponseTransformer,
	});
};

/**
 * Get cursor paginated rounds for a venture
 * Get all rounds for a venture.
 */
export const getVentureRoundsByCursor = <ThrowOnError extends boolean = false>(
	options: Options<GetVentureRoundsByCursorData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetVentureRoundsByCursorResponse,
		GetVentureRoundsByCursorError,
		ThrowOnError
	>({
		...options,
		url: "/venture/{id}/rounds",
		responseTransformer: GetVentureRoundsByCursorResponseTransformer,
	});
};

/**
 * Get offset paginated rounds for a venture
 * Get all rounds for a venture.
 */
export const getVentureRoundsByPage = <ThrowOnError extends boolean = false>(
	options: Options<GetVentureRoundsByPageData, ThrowOnError>
) => {
	return (options?.client ?? client).get<
		GetVentureRoundsByPageResponse,
		GetVentureRoundsByPageError,
		ThrowOnError
	>({
		...options,
		url: "/venture/{id}/rounds/page",
		responseTransformer: GetVentureRoundsByPageResponseTransformer,
	});
};
