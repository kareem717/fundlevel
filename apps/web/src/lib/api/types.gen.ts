// This file is auto-generated by @hey-api/openapi-ts

export type Account = {
    createdAt: Date;
    deletedAt: (Date) | null;
    firstName: string;
    id: number;
    lastName: string;
    updatedAt: (Date) | null;
    userId: string;
};

export type Business = {
    businessColour: string;
    businessLegalSection: BusinessLegalSection;
    businessLegalSectionId?: (number) | null;
    createdAt: Date;
    deletedAt: (Date) | null;
    displayName: string;
    employeeCount?: '1' | '2-10' | '11-50' | '51-200' | '201-500' | '501-1000' | '1000+';
    foundingDate: Date;
    id: number;
    industries: Array<Industry> | null;
    stripeAccount: BusinessStripeAccount;
    updatedAt: (Date) | null;
};

export type employeeCount = '1' | '2-10' | '11-50' | '51-200' | '201-500' | '501-1000' | '1000+';

export const employeeCount = {
    _1: '1',
    _2_10: '2-10',
    _11_50: '11-50',
    _51_200: '51-200',
    _201_500: '201-500',
    _501_1000: '501-1000',
    _1000_: '1000+'
} as const;

export type BusinessLegalSection = {
    businessNumber: string;
    createdAt: Date;
    id: number;
    updatedAt: (Date) | null;
};

export type BusinessMemberRole = {
    description: string;
    id: number;
    name: string;
    permissions: Array<RolePermission> | null;
};

export type BusinessMemberWithRoleNameAndAccount = {
    account: SafeAccount;
    accountId: number;
    businessId: number;
    createdAt: Date;
    deletedAt: (Date) | null;
    role: string;
    roleId: number;
    updatedAt: (Date) | null;
};

export type BusinessParams = {
    businessColour?: (string) | null;
    displayName: string;
    employeeCount: '1' | '2-10' | '11-50' | '51-200' | '201-500' | '501-1000' | '1000+';
    foundingDate: Date;
};

export type BusinessStripeAccount = {
    businessId: number;
    createdAt: Date;
    deletedAt: (Date) | null;
    stripeConnectedAccountId: string;
    stripeDisabledReason: (string) | null;
    stripePayoutsEnabled: boolean;
    stripeTransfersEnabled: boolean;
    updatedAt: (Date) | null;
};

export type Chat = {
    createdAt: Date;
    createdByAccountId: number;
    createdForAccountId: number;
    deletedAt: (Date) | null;
    id: number;
    lastMessageAt: (Date) | null;
    updatedAt: (Date) | null;
};

export type ChatMessage = {
    content: string;
    createdAt: Date;
    deletedAt: (Date) | null;
    id: number;
    readAt: (Date) | null;
    senderAccountId: number;
    updatedAt: (Date) | null;
};

export type CreateAccountParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    firstName: string;
    lastName: string;
    userId: string;
};

export type CreateBusinessParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    business: BusinessParams;
    industryIds?: Array<(number)> | null;
    initialOwnerId: number;
};

export type CreateChatParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    createdByAccountId: number;
    createdForAccountId: number;
};

export type CreateChatResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    createdAt: Date;
    createdByAccountId: number;
    createdForAccountId: number;
    deletedAt: (Date) | null;
    id: number;
    lastMessageAt: (Date) | null;
    message: string;
    updatedAt: (Date) | null;
};

export type CreateMessageParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    content: string;
    senderAccountId: number;
};

export type CreateRoundParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    beginsAt: Date;
    businessId: number;
    description: string;
    endsAt: Date;
    investmentsRequireApproval: boolean;
    investorCount: number;
    percentageSelling: number;
    valuationAmountUSDCents: number;
};

export type ErrorDetail = {
    /**
     * Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
     */
    location?: string;
    /**
     * Error message text
     */
    message?: string;
    /**
     * The value at the given location
     */
    value?: unknown;
};

export type ErrorModel = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail?: string;
    /**
     * Optional list of individual error details
     */
    errors?: Array<ErrorDetail> | null;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string;
    /**
     * HTTP status code
     */
    status?: number;
    /**
     * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
     */
    title?: string;
    /**
     * A URI reference to human-readable documentation for the error.
     */
    type?: string;
};

export type FundingOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
    totalFunding: number;
};

export type GetAllIndustriesResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    industries: Array<Industry> | null;
    message: string;
};

export type GetAllMemberRolesOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
    roles: Array<BusinessMemberRole> | null;
};

export type GetBusinessesOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    businesses: Array<Business> | null;
    message: string;
};

export type GetChatMessagesResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasNext: boolean;
    message: string;
    messages: Array<ChatMessage> | null;
    nextCursor: (Date) | null;
};

export type GetChatsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    chats: Array<Chat> | null;
    hasNext: boolean;
    message: string;
    nextCursor: (Date) | null;
};

export type GetCursorPaginatedInvestmentsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    investments: Array<Investment> | null;
    message: string;
    nextCursor: (number) | null;
};

export type GetCursorPaginatedRoundsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    message: string;
    nextCursor: (number) | null;
    rounds: Array<Round> | null;
};

export type GetDailyAggregatedBusinessAnalyticsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    analytics: Array<SimplifiedDailyAggregatedBusinessAnalytics> | null;
    message: string;
};

export type GetDailyAggregatedRoundAnalyticsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    analytics: Array<SimplifiedDailyAggregatedRoundAnalytics> | null;
    message: string;
};

export type GetInvestmentActivePaymentOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    investmentPayment: InvestmentPayment;
    message: string;
};

export type GetInvestmentPaymentsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    investmentPayments: Array<InvestmentPayment> | null;
    message: string;
};

export type GetLikeCountOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    count: number;
    message: string;
};

export type GetOffsetPaginatedBusinessMembersOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    members: Array<BusinessMemberWithRoleNameAndAccount> | null;
    message: string;
    total: number;
};

export type GetOffsetPaginatedInvestmentsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    investments: Array<Investment> | null;
    message: string;
    total: number;
};

export type GetOffsetPaginatedRoundsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    message: string;
    rounds: Array<Round> | null;
    total: number;
};

export type GetRoundCreateRequirementsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
    requirements: RoundCreateRequirements;
};

export type GetStripeAccountOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
    stripeAccount: BusinessStripeAccount;
};

export type ImpressionCountOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    count: number;
    message: string;
};

export type ImpressionInputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    accountId: number;
};

export type Industry = {
    createdAt: Date;
    deletedAt: (Date) | null;
    id: number;
    label: string;
    updatedAt: (Date) | null;
};

export type Investment = {
    approvedAt?: Date;
    completedAt?: Date;
    createdAt: Date;
    deletedAt: (Date) | null;
    id: number;
    investorId: number;
    paymentCompletedAt?: Date;
    payments?: Array<InvestmentPayment> | null;
    requiresApproval: boolean;
    roundId: number;
    status: 'awaiting_term_acceptance' | 'awaiting_payment' | 'investor_tasks_completed' | 'failed_to_accept_terms' | 'failed_to_make_payment' | 'investor_withdrew' | 'business_rejected' | 'round_closed_before_investor_tasks_completed';
    termsCompletedAt?: Date;
    updatedAt: (Date) | null;
};

export type status = 'awaiting_term_acceptance' | 'awaiting_payment' | 'investor_tasks_completed' | 'failed_to_accept_terms' | 'failed_to_make_payment' | 'investor_withdrew' | 'business_rejected' | 'round_closed_before_investor_tasks_completed';

export const status = {
    AWAITING_TERM_ACCEPTANCE: 'awaiting_term_acceptance',
    AWAITING_PAYMENT: 'awaiting_payment',
    INVESTOR_TASKS_COMPLETED: 'investor_tasks_completed',
    FAILED_TO_ACCEPT_TERMS: 'failed_to_accept_terms',
    FAILED_TO_MAKE_PAYMENT: 'failed_to_make_payment',
    INVESTOR_WITHDREW: 'investor_withdrew',
    BUSINESS_REJECTED: 'business_rejected',
    ROUND_CLOSED_BEFORE_INVESTOR_TASKS_COMPLETED: 'round_closed_before_investor_tasks_completed'
} as const;

export type InvestmentPayment = {
    createdAt: Date;
    deletedAt: (Date) | null;
    id: number;
    investmentId: number;
    status: 'cancelled' | 'processing' | 'requires_action' | 'requires_capture' | 'requires_confirmation' | 'requires_payment_method' | 'succeeded';
    stripePaymentIntentClientSecret: string;
    stripePaymentIntentId: string;
    updatedAt: (Date) | null;
};

export type status2 = 'cancelled' | 'processing' | 'requires_action' | 'requires_capture' | 'requires_confirmation' | 'requires_payment_method' | 'succeeded';

export const status2 = {
    CANCELLED: 'cancelled',
    PROCESSING: 'processing',
    REQUIRES_ACTION: 'requires_action',
    REQUIRES_CAPTURE: 'requires_capture',
    REQUIRES_CONFIRMATION: 'requires_confirmation',
    REQUIRES_PAYMENT_METHOD: 'requires_payment_method',
    SUCCEEDED: 'succeeded'
} as const;

export type InvestmentPaymentIntentClientSecretOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    clientSecret: string;
    message: string;
};

export type IsFavouritedOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    favourited: boolean;
    message: string;
};

export type MessageResponse = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
};

export type OnboardStripeConnectedAccountInputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    refreshURL: string;
    returnURL: string;
};

export type RolePermission = {
    description: string;
    id: number;
    value: string;
};

export type Round = {
    beginsAt: Date;
    businessId: number;
    createdAt: Date;
    deletedAt: (Date) | null;
    description: string;
    endsAt: Date;
    id: number;
    investmentsRequireApproval: boolean;
    investorCount: number;
    percentageSelling: number;
    status: 'active' | 'successful' | 'failed';
    updatedAt: (Date) | null;
    valuationAmountUSDCents: number;
};

export type status3 = 'active' | 'successful' | 'failed';

export const status3 = {
    ACTIVE: 'active',
    SUCCESSFUL: 'successful',
    FAILED: 'failed'
} as const;

export type RoundCreateRequirements = {
    hasActiveStatus: boolean;
    legalSection: boolean;
    stripeAccount: boolean;
};

export type RoundWithBusiness = {
    beginsAt: Date;
    business: Business;
    businessId: number;
    createdAt: Date;
    deletedAt: (Date) | null;
    description: string;
    endsAt: Date;
    id: number;
    investmentsRequireApproval: boolean;
    investorCount: number;
    percentageSelling: number;
    status: 'active' | 'successful' | 'failed';
    updatedAt: (Date) | null;
    valuationAmountUSDCents: number;
};

export type SafeAccount = {
    createdAt: Date;
    deletedAt: (Date) | null;
    firstName: string;
    id: number;
    lastName: string;
    updatedAt: (Date) | null;
};

export type SimplifiedDailyAggregatedBusinessAnalytics = {
    dayOfYear: number;
    favouritedCount: number;
    impressionsCount: number;
    uniquesImpressionsCount: number;
};

export type SimplifiedDailyAggregatedRoundAnalytics = {
    dayOfYear: number;
    favouritedCount: number;
    impressionsCount: number;
    uniquesImpressionsCount: number;
};

export type SingleAccountResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    account: Account;
    message: string;
};

export type SingleBusinessResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    business: Business;
    message: string;
};

export type SingleInvestmentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    investment: Investment;
    message: string;
};

export type SingleRoundResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
    round: Round;
};

export type SingleRoundWithBusinessResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
    round: RoundWithBusiness;
};

export type UrlOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
    url: string;
};

export type UpdateAccountParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    firstName: string;
    lastName: string;
};

export type UpdateMessageParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    content: string;
    readAt: (Date) | null;
};

export type UpsertBusinessLegalSectionParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    businessNumber: string;
};

export type CreateAccountData = {
    body: CreateAccountParams;
};

export type CreateAccountResponse = (SingleAccountResponseBody);

export type CreateAccountError = (ErrorModel);

export type DeleteAccountData = {
    path: {
        id: number;
    };
};

export type DeleteAccountResponse = (MessageResponse);

export type DeleteAccountError = (ErrorModel);

export type GetAccountByIdData = {
    path: {
        id: number;
    };
};

export type GetAccountByIdResponse = (SingleAccountResponseBody);

export type GetAccountByIdError = (ErrorModel);

export type UpdateAccountData = {
    body: UpdateAccountParams;
    path: {
        id: number;
    };
};

export type UpdateAccountResponse = (SingleAccountResponseBody);

export type UpdateAccountError = (ErrorModel);

export type GetAccountBusinessesData = {
    path: {
        id: number;
    };
};

export type GetAccountBusinessesResponse = (GetBusinessesOutputBody);

export type GetAccountBusinessesError = (ErrorModel);

export type GetAccountChatsData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: Date;
        limit?: number;
    };
};

export type GetAccountChatsResponse = (GetChatsOutputBody);

export type GetAccountChatsError = (ErrorModel);

export type GetAccountInvestmentsByCursorData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
        sortBy?: 'created_at';
        sortOrder?: 'asc' | 'desc';
        status?: Array<('awaiting_term_acceptance' | 'awaiting_payment' | 'investor_tasks_completed' | 'failed_to_accept_terms' | 'failed_to_make_payment' | 'investor_withdrew' | 'business_rejected' | 'round_closed_before_investor_tasks_completed')> | null;
    };
};

export type GetAccountInvestmentsByCursorResponse = (GetCursorPaginatedInvestmentsOutputBody);

export type GetAccountInvestmentsByCursorError = (ErrorModel);

export type GetAccountInvestmentsByPageData = {
    path: {
        id: number;
    };
    query?: {
        page?: number;
        pageSize?: number;
        sortBy?: 'created_at';
        sortOrder?: 'asc' | 'desc';
        status?: Array<('awaiting_term_acceptance' | 'awaiting_payment' | 'investor_tasks_completed' | 'failed_to_accept_terms' | 'failed_to_make_payment' | 'investor_withdrew' | 'business_rejected' | 'round_closed_before_investor_tasks_completed')> | null;
    };
};

export type GetAccountInvestmentsByPageResponse = (GetOffsetPaginatedInvestmentsOutputBody);

export type GetAccountInvestmentsByPageError = (ErrorModel);

export type GetDailyAggregatedBusinessAnalyticsData = {
    path: {
        id: number;
    };
    query?: {
        maxDayOfYear?: number;
        minDayOfYear?: number;
    };
};

export type GetDailyAggregatedBusinessAnalyticsResponse = (GetDailyAggregatedBusinessAnalyticsOutputBody);

export type GetDailyAggregatedBusinessAnalyticsError = (ErrorModel);

export type DeleteBusinessFavouriteData = {
    path: {
        accountId: number;
        id: number;
    };
};

export type DeleteBusinessFavouriteResponse = (MessageResponse);

export type DeleteBusinessFavouriteError = (ErrorModel);

export type GetBusinessFavouriteStatusData = {
    path: {
        accountId: number;
        id: number;
    };
};

export type GetBusinessFavouriteStatusResponse = (IsFavouritedOutputBody);

export type GetBusinessFavouriteStatusError = (ErrorModel);

export type CreateBusinessFavouriteData = {
    path: {
        accountId: number;
        id: number;
    };
};

export type CreateBusinessFavouriteResponse = (MessageResponse);

export type CreateBusinessFavouriteError = (ErrorModel);

export type GetBusinessFavouriteCountData = {
    path: {
        id: number;
    };
};

export type GetBusinessFavouriteCountResponse = (GetLikeCountOutputBody);

export type GetBusinessFavouriteCountError = (ErrorModel);

export type GetBusinessImpressionCountData = {
    path: {
        id: number;
    };
};

export type GetBusinessImpressionCountResponse = (ImpressionCountOutputBody);

export type GetBusinessImpressionCountError = (ErrorModel);

export type CreateBusinessImpressionData = {
    body: ImpressionInputBody;
    path: {
        id: number;
    };
};

export type CreateBusinessImpressionResponse = (MessageResponse);

export type CreateBusinessImpressionError = (ErrorModel);

export type GetDailyAggregatedRoundAnalyticsData = {
    path: {
        id: number;
    };
    query?: {
        maxDayOfYear?: number;
        minDayOfYear?: number;
    };
};

export type GetDailyAggregatedRoundAnalyticsResponse = (GetDailyAggregatedRoundAnalyticsOutputBody);

export type GetDailyAggregatedRoundAnalyticsError = (ErrorModel);

export type DeleteRoundFavouriteData = {
    path: {
        accountId: number;
        id: number;
    };
};

export type DeleteRoundFavouriteResponse = (MessageResponse);

export type DeleteRoundFavouriteError = (ErrorModel);

export type GetRoundFavouriteStatusData = {
    path: {
        accountId: number;
        id: number;
    };
};

export type GetRoundFavouriteStatusResponse = (IsFavouritedOutputBody);

export type GetRoundFavouriteStatusError = (ErrorModel);

export type CreateRoundFavouriteData = {
    path: {
        accountId: number;
        id: number;
    };
};

export type CreateRoundFavouriteResponse = (MessageResponse);

export type CreateRoundFavouriteError = (ErrorModel);

export type GetRoundFavouriteCountData = {
    path: {
        id: number;
    };
};

export type GetRoundFavouriteCountResponse = (GetLikeCountOutputBody);

export type GetRoundFavouriteCountError = (ErrorModel);

export type GetRoundImpressionCountData = {
    path: {
        id: number;
    };
};

export type GetRoundImpressionCountResponse = (ImpressionCountOutputBody);

export type GetRoundImpressionCountError = (ErrorModel);

export type CreateRoundImpressionData = {
    body: ImpressionInputBody;
    path: {
        id: number;
    };
};

export type CreateRoundImpressionResponse = (MessageResponse);

export type CreateRoundImpressionError = (ErrorModel);

export type CreateBusinessData = {
    body: CreateBusinessParams;
};

export type CreateBusinessResponse = (MessageResponse);

export type CreateBusinessError = (ErrorModel);

export type DeleteBusinessData = {
    path: {
        id: number;
    };
};

export type DeleteBusinessResponse = (MessageResponse);

export type DeleteBusinessError = (ErrorModel);

export type GetBusinessByIdData = {
    path: {
        id: number;
    };
};

export type GetBusinessByIdResponse = (SingleBusinessResponseBody);

export type GetBusinessByIdError = (ErrorModel);

export type GetBusinessTotalFundingData = {
    path: {
        id: number;
    };
};

export type GetBusinessTotalFundingResponse = (FundingOutputBody);

export type GetBusinessTotalFundingError = (ErrorModel);

export type GetBusinessInvestmentsByCursorData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
        sortBy?: 'created_at';
        sortOrder?: 'asc' | 'desc';
        status?: Array<('awaiting_term_acceptance' | 'awaiting_payment' | 'investor_tasks_completed' | 'failed_to_accept_terms' | 'failed_to_make_payment' | 'investor_withdrew' | 'business_rejected' | 'round_closed_before_investor_tasks_completed')> | null;
    };
};

export type GetBusinessInvestmentsByCursorResponse = (GetCursorPaginatedInvestmentsOutputBody);

export type GetBusinessInvestmentsByCursorError = (ErrorModel);

export type GetBusinessInvestmentsByPageData = {
    path: {
        id: number;
    };
    query?: {
        page?: number;
        pageSize?: number;
        sortBy?: 'created_at';
        sortOrder?: 'asc' | 'desc';
        status?: Array<('awaiting_term_acceptance' | 'awaiting_payment' | 'investor_tasks_completed' | 'failed_to_accept_terms' | 'failed_to_make_payment' | 'investor_withdrew' | 'business_rejected' | 'round_closed_before_investor_tasks_completed')> | null;
    };
};

export type GetBusinessInvestmentsByPageResponse = (GetOffsetPaginatedInvestmentsOutputBody);

export type GetBusinessInvestmentsByPageError = (ErrorModel);

export type GetBusinessMembersByPageData = {
    path: {
        id: number;
    };
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetBusinessMembersByPageResponse = (GetOffsetPaginatedBusinessMembersOutputBody);

export type GetBusinessMembersByPageError = (ErrorModel);

export type GetBusinessRoundCreateRequirementsData = {
    path: {
        id: number;
    };
};

export type GetBusinessRoundCreateRequirementsResponse = (GetRoundCreateRequirementsOutputBody);

export type GetBusinessRoundCreateRequirementsError = (ErrorModel);

export type GetBusinessMemberRolesResponse = (GetAllMemberRolesOutputBody);

export type GetBusinessMemberRolesError = (ErrorModel);

export type GetBusinessRoundsByCursorData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetBusinessRoundsByCursorResponse = (GetCursorPaginatedRoundsOutputBody);

export type GetBusinessRoundsByCursorError = (ErrorModel);

export type GetBusinessRoundsByPageData = {
    path: {
        id: number;
    };
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetBusinessRoundsByPageResponse = (GetOffsetPaginatedRoundsOutputBody);

export type GetBusinessRoundsByPageError = (ErrorModel);

export type UpsertBusinessLegalSectionData = {
    body: UpsertBusinessLegalSectionParams;
    path: {
        id: number;
    };
};

export type UpsertBusinessLegalSectionResponse = (MessageResponse);

export type UpsertBusinessLegalSectionError = (ErrorModel);

export type GetBusinessStripeAccountData = {
    path: {
        id: number;
    };
};

export type GetBusinessStripeAccountResponse = (GetStripeAccountOutputBody);

export type GetBusinessStripeAccountError = (ErrorModel);

export type GetStripeDashboardUrlData = {
    path: {
        id: number;
    };
};

export type GetStripeDashboardUrlResponse = (UrlOutputBody);

export type GetStripeDashboardUrlError = (ErrorModel);

export type OnboardStripeConnectedAccountData = {
    body: OnboardStripeConnectedAccountInputBody;
    path: {
        id: number;
    };
};

export type OnboardStripeConnectedAccountResponse = (UrlOutputBody);

export type OnboardStripeConnectedAccountError = (ErrorModel);

export type CreateChatData = {
    body: CreateChatParams;
};

export type CreateChatResponse = (CreateChatResponseBody);

export type CreateChatError = (ErrorModel);

export type DeleteChatMessageData = {
    path: {
        id: number;
    };
};

export type DeleteChatMessageResponse = (MessageResponse);

export type DeleteChatMessageError = (ErrorModel);

export type UpdateChatMessageData = {
    body: UpdateMessageParams;
    path: {
        id: number;
    };
};

export type UpdateChatMessageResponse = (MessageResponse);

export type UpdateChatMessageError = (ErrorModel);

export type DeleteChatData = {
    path: {
        id: number;
    };
};

export type DeleteChatResponse = (MessageResponse);

export type DeleteChatError = (ErrorModel);

export type GetChatMessagesData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: Date;
        limit?: number;
        maxCreatedAt?: Date;
        minCreatedAt?: Date;
        read?: boolean;
        senderAccountIds?: Array<(number)> | null;
    };
};

export type GetChatMessagesResponse = (GetChatMessagesResponseBody);

export type GetChatMessagesError = (ErrorModel);

export type CreateChatMessageData = {
    body: CreateMessageParams;
    path: {
        id: number;
    };
};

export type CreateChatMessageResponse = (MessageResponse);

export type CreateChatMessageError = (ErrorModel);

export type HealthCheckResponse = (MessageResponse);

export type HealthCheckError = (ErrorModel);

export type GetAllIndustriesResponse = (GetAllIndustriesResponseBody);

export type GetAllIndustriesError = (ErrorModel);

export type CreateRoundInvestmentData = {
    path: {
        id: number;
    };
};

export type CreateRoundInvestmentResponse = (SingleInvestmentResponseBody);

export type CreateRoundInvestmentError = (ErrorModel);

export type GetInvestmentByIdData = {
    path: {
        id: number;
    };
};

export type GetInvestmentByIdResponse = (SingleInvestmentResponseBody);

export type GetInvestmentByIdError = (ErrorModel);

export type GetInvestmentActivePaymentData = {
    path: {
        id: number;
    };
};

export type GetInvestmentActivePaymentResponse = (GetInvestmentActivePaymentOutputBody);

export type GetInvestmentActivePaymentError = (ErrorModel);

export type CreateInvestmentPaymentIntentData = {
    path: {
        id: number;
    };
};

export type CreateInvestmentPaymentIntentResponse = (InvestmentPaymentIntentClientSecretOutputBody);

export type CreateInvestmentPaymentIntentError = (ErrorModel);

export type GetInvestmentPaymentsData = {
    path: {
        id: number;
    };
};

export type GetInvestmentPaymentsResponse = (GetInvestmentPaymentsOutputBody);

export type GetInvestmentPaymentsError = (ErrorModel);

export type GetRoundByCursorData = {
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetRoundByCursorResponse = (GetCursorPaginatedRoundsOutputBody);

export type GetRoundByCursorError = (ErrorModel);

export type CreateRoundData = {
    body: CreateRoundParams;
};

export type CreateRoundResponse = (SingleRoundResponseBody);

export type CreateRoundError = (ErrorModel);

export type GetRoundsByPageData = {
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetRoundsByPageResponse = (GetOffsetPaginatedRoundsOutputBody);

export type GetRoundsByPageError = (ErrorModel);

export type DeleteRoundData = {
    path: {
        id: number;
    };
};

export type DeleteRoundResponse = (string);

export type DeleteRoundError = (ErrorModel);

export type GetRoundByIdData = {
    path: {
        id: number;
    };
};

export type GetRoundByIdResponse = (SingleRoundWithBusinessResponseBody);

export type GetRoundByIdError = (ErrorModel);

export type GetUserAccountData = {
    path: {
        userId: string;
    };
};

export type GetUserAccountResponse = (SingleAccountResponseBody);

export type GetUserAccountError = (ErrorModel);

export type CreateAccountResponseTransformer = (data: any) => Promise<CreateAccountResponse>;

export type SingleAccountResponseBodyModelResponseTransformer = (data: any) => SingleAccountResponseBody;

export type AccountModelResponseTransformer = (data: any) => Account;

export const AccountModelResponseTransformer: AccountModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const SingleAccountResponseBodyModelResponseTransformer: SingleAccountResponseBodyModelResponseTransformer = data => {
    if (data?.account) {
        AccountModelResponseTransformer(data.account);
    }
    return data;
};

export const CreateAccountResponseTransformer: CreateAccountResponseTransformer = async (data) => {
    SingleAccountResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAccountByIdResponseTransformer = (data: any) => Promise<GetAccountByIdResponse>;

export const GetAccountByIdResponseTransformer: GetAccountByIdResponseTransformer = async (data) => {
    SingleAccountResponseBodyModelResponseTransformer(data);
    return data;
};

export type UpdateAccountResponseTransformer = (data: any) => Promise<UpdateAccountResponse>;

export const UpdateAccountResponseTransformer: UpdateAccountResponseTransformer = async (data) => {
    SingleAccountResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAccountBusinessesResponseTransformer = (data: any) => Promise<GetAccountBusinessesResponse>;

export type GetBusinessesOutputBodyModelResponseTransformer = (data: any) => GetBusinessesOutputBody;

export type BusinessModelResponseTransformer = (data: any) => Business;

export type BusinessLegalSectionModelResponseTransformer = (data: any) => BusinessLegalSection;

export const BusinessLegalSectionModelResponseTransformer: BusinessLegalSectionModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export type IndustryModelResponseTransformer = (data: any) => Industry;

export const IndustryModelResponseTransformer: IndustryModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export type BusinessStripeAccountModelResponseTransformer = (data: any) => BusinessStripeAccount;

export const BusinessStripeAccountModelResponseTransformer: BusinessStripeAccountModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const BusinessModelResponseTransformer: BusinessModelResponseTransformer = data => {
    if (data?.businessLegalSection) {
        BusinessLegalSectionModelResponseTransformer(data.businessLegalSection);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.foundingDate) {
        data.foundingDate = new Date(data.foundingDate);
    }
    if (Array.isArray(data?.industries)) {
        data.industries.forEach(IndustryModelResponseTransformer);
    }
    if (data?.stripeAccount) {
        BusinessStripeAccountModelResponseTransformer(data.stripeAccount);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const GetBusinessesOutputBodyModelResponseTransformer: GetBusinessesOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.businesses)) {
        data.businesses.forEach(BusinessModelResponseTransformer);
    }
    return data;
};

export const GetAccountBusinessesResponseTransformer: GetAccountBusinessesResponseTransformer = async (data) => {
    GetBusinessesOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetAccountChatsResponseTransformer = (data: any) => Promise<GetAccountChatsResponse>;

export type GetChatsOutputBodyModelResponseTransformer = (data: any) => GetChatsOutputBody;

export type ChatModelResponseTransformer = (data: any) => Chat;

export const ChatModelResponseTransformer: ChatModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.lastMessageAt) {
        data.lastMessageAt = new Date(data.lastMessageAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const GetChatsOutputBodyModelResponseTransformer: GetChatsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.chats)) {
        data.chats.forEach(ChatModelResponseTransformer);
    }
    if (data?.nextCursor) {
        data.nextCursor = new Date(data.nextCursor);
    }
    return data;
};

export const GetAccountChatsResponseTransformer: GetAccountChatsResponseTransformer = async (data) => {
    GetChatsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetAccountInvestmentsByCursorResponseTransformer = (data: any) => Promise<GetAccountInvestmentsByCursorResponse>;

export type GetCursorPaginatedInvestmentsOutputBodyModelResponseTransformer = (data: any) => GetCursorPaginatedInvestmentsOutputBody;

export type InvestmentModelResponseTransformer = (data: any) => Investment;

export type InvestmentPaymentModelResponseTransformer = (data: any) => InvestmentPayment;

export const InvestmentPaymentModelResponseTransformer: InvestmentPaymentModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const InvestmentModelResponseTransformer: InvestmentModelResponseTransformer = data => {
    if (data?.approvedAt) {
        data.approvedAt = new Date(data.approvedAt);
    }
    if (data?.completedAt) {
        data.completedAt = new Date(data.completedAt);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.paymentCompletedAt) {
        data.paymentCompletedAt = new Date(data.paymentCompletedAt);
    }
    if (Array.isArray(data?.payments)) {
        data.payments.forEach(InvestmentPaymentModelResponseTransformer);
    }
    if (data?.termsCompletedAt) {
        data.termsCompletedAt = new Date(data.termsCompletedAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const GetCursorPaginatedInvestmentsOutputBodyModelResponseTransformer: GetCursorPaginatedInvestmentsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.investments)) {
        data.investments.forEach(InvestmentModelResponseTransformer);
    }
    return data;
};

export const GetAccountInvestmentsByCursorResponseTransformer: GetAccountInvestmentsByCursorResponseTransformer = async (data) => {
    GetCursorPaginatedInvestmentsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetAccountInvestmentsByPageResponseTransformer = (data: any) => Promise<GetAccountInvestmentsByPageResponse>;

export type GetOffsetPaginatedInvestmentsOutputBodyModelResponseTransformer = (data: any) => GetOffsetPaginatedInvestmentsOutputBody;

export const GetOffsetPaginatedInvestmentsOutputBodyModelResponseTransformer: GetOffsetPaginatedInvestmentsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.investments)) {
        data.investments.forEach(InvestmentModelResponseTransformer);
    }
    return data;
};

export const GetAccountInvestmentsByPageResponseTransformer: GetAccountInvestmentsByPageResponseTransformer = async (data) => {
    GetOffsetPaginatedInvestmentsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetBusinessByIdResponseTransformer = (data: any) => Promise<GetBusinessByIdResponse>;

export type SingleBusinessResponseBodyModelResponseTransformer = (data: any) => SingleBusinessResponseBody;

export const SingleBusinessResponseBodyModelResponseTransformer: SingleBusinessResponseBodyModelResponseTransformer = data => {
    if (data?.business) {
        BusinessModelResponseTransformer(data.business);
    }
    return data;
};

export const GetBusinessByIdResponseTransformer: GetBusinessByIdResponseTransformer = async (data) => {
    SingleBusinessResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetBusinessInvestmentsByCursorResponseTransformer = (data: any) => Promise<GetBusinessInvestmentsByCursorResponse>;

export const GetBusinessInvestmentsByCursorResponseTransformer: GetBusinessInvestmentsByCursorResponseTransformer = async (data) => {
    GetCursorPaginatedInvestmentsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetBusinessInvestmentsByPageResponseTransformer = (data: any) => Promise<GetBusinessInvestmentsByPageResponse>;

export const GetBusinessInvestmentsByPageResponseTransformer: GetBusinessInvestmentsByPageResponseTransformer = async (data) => {
    GetOffsetPaginatedInvestmentsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetBusinessMembersByPageResponseTransformer = (data: any) => Promise<GetBusinessMembersByPageResponse>;

export type GetOffsetPaginatedBusinessMembersOutputBodyModelResponseTransformer = (data: any) => GetOffsetPaginatedBusinessMembersOutputBody;

export type BusinessMemberWithRoleNameAndAccountModelResponseTransformer = (data: any) => BusinessMemberWithRoleNameAndAccount;

export type SafeAccountModelResponseTransformer = (data: any) => SafeAccount;

export const SafeAccountModelResponseTransformer: SafeAccountModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const BusinessMemberWithRoleNameAndAccountModelResponseTransformer: BusinessMemberWithRoleNameAndAccountModelResponseTransformer = data => {
    if (data?.account) {
        SafeAccountModelResponseTransformer(data.account);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const GetOffsetPaginatedBusinessMembersOutputBodyModelResponseTransformer: GetOffsetPaginatedBusinessMembersOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.members)) {
        data.members.forEach(BusinessMemberWithRoleNameAndAccountModelResponseTransformer);
    }
    return data;
};

export const GetBusinessMembersByPageResponseTransformer: GetBusinessMembersByPageResponseTransformer = async (data) => {
    GetOffsetPaginatedBusinessMembersOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetBusinessRoundsByCursorResponseTransformer = (data: any) => Promise<GetBusinessRoundsByCursorResponse>;

export type GetCursorPaginatedRoundsOutputBodyModelResponseTransformer = (data: any) => GetCursorPaginatedRoundsOutputBody;

export type RoundModelResponseTransformer = (data: any) => Round;

export const RoundModelResponseTransformer: RoundModelResponseTransformer = data => {
    if (data?.beginsAt) {
        data.beginsAt = new Date(data.beginsAt);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.endsAt) {
        data.endsAt = new Date(data.endsAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const GetCursorPaginatedRoundsOutputBodyModelResponseTransformer: GetCursorPaginatedRoundsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.rounds)) {
        data.rounds.forEach(RoundModelResponseTransformer);
    }
    return data;
};

export const GetBusinessRoundsByCursorResponseTransformer: GetBusinessRoundsByCursorResponseTransformer = async (data) => {
    GetCursorPaginatedRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetBusinessRoundsByPageResponseTransformer = (data: any) => Promise<GetBusinessRoundsByPageResponse>;

export type GetOffsetPaginatedRoundsOutputBodyModelResponseTransformer = (data: any) => GetOffsetPaginatedRoundsOutputBody;

export const GetOffsetPaginatedRoundsOutputBodyModelResponseTransformer: GetOffsetPaginatedRoundsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.rounds)) {
        data.rounds.forEach(RoundModelResponseTransformer);
    }
    return data;
};

export const GetBusinessRoundsByPageResponseTransformer: GetBusinessRoundsByPageResponseTransformer = async (data) => {
    GetOffsetPaginatedRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetBusinessStripeAccountResponseTransformer = (data: any) => Promise<GetBusinessStripeAccountResponse>;

export type GetStripeAccountOutputBodyModelResponseTransformer = (data: any) => GetStripeAccountOutputBody;

export const GetStripeAccountOutputBodyModelResponseTransformer: GetStripeAccountOutputBodyModelResponseTransformer = data => {
    if (data?.stripeAccount) {
        BusinessStripeAccountModelResponseTransformer(data.stripeAccount);
    }
    return data;
};

export const GetBusinessStripeAccountResponseTransformer: GetBusinessStripeAccountResponseTransformer = async (data) => {
    GetStripeAccountOutputBodyModelResponseTransformer(data);
    return data;
};

export type CreateChatResponseTransformer = (data: any) => Promise<CreateChatResponse>;

export type CreateChatResponseBodyModelResponseTransformer = (data: any) => CreateChatResponseBody;

export const CreateChatResponseBodyModelResponseTransformer: CreateChatResponseBodyModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.lastMessageAt) {
        data.lastMessageAt = new Date(data.lastMessageAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const CreateChatResponseTransformer: CreateChatResponseTransformer = async (data) => {
    CreateChatResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetChatMessagesResponseTransformer = (data: any) => Promise<GetChatMessagesResponse>;

export type GetChatMessagesResponseBodyModelResponseTransformer = (data: any) => GetChatMessagesResponseBody;

export type ChatMessageModelResponseTransformer = (data: any) => ChatMessage;

export const ChatMessageModelResponseTransformer: ChatMessageModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.readAt) {
        data.readAt = new Date(data.readAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const GetChatMessagesResponseBodyModelResponseTransformer: GetChatMessagesResponseBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.messages)) {
        data.messages.forEach(ChatMessageModelResponseTransformer);
    }
    if (data?.nextCursor) {
        data.nextCursor = new Date(data.nextCursor);
    }
    return data;
};

export const GetChatMessagesResponseTransformer: GetChatMessagesResponseTransformer = async (data) => {
    GetChatMessagesResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAllIndustriesResponseTransformer = (data: any) => Promise<GetAllIndustriesResponse>;

export type GetAllIndustriesResponseBodyModelResponseTransformer = (data: any) => GetAllIndustriesResponseBody;

export const GetAllIndustriesResponseBodyModelResponseTransformer: GetAllIndustriesResponseBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.industries)) {
        data.industries.forEach(IndustryModelResponseTransformer);
    }
    return data;
};

export const GetAllIndustriesResponseTransformer: GetAllIndustriesResponseTransformer = async (data) => {
    GetAllIndustriesResponseBodyModelResponseTransformer(data);
    return data;
};

export type CreateRoundInvestmentResponseTransformer = (data: any) => Promise<CreateRoundInvestmentResponse>;

export type SingleInvestmentResponseBodyModelResponseTransformer = (data: any) => SingleInvestmentResponseBody;

export const SingleInvestmentResponseBodyModelResponseTransformer: SingleInvestmentResponseBodyModelResponseTransformer = data => {
    if (data?.investment) {
        InvestmentModelResponseTransformer(data.investment);
    }
    return data;
};

export const CreateRoundInvestmentResponseTransformer: CreateRoundInvestmentResponseTransformer = async (data) => {
    SingleInvestmentResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetInvestmentByIdResponseTransformer = (data: any) => Promise<GetInvestmentByIdResponse>;

export const GetInvestmentByIdResponseTransformer: GetInvestmentByIdResponseTransformer = async (data) => {
    SingleInvestmentResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetInvestmentActivePaymentResponseTransformer = (data: any) => Promise<GetInvestmentActivePaymentResponse>;

export type GetInvestmentActivePaymentOutputBodyModelResponseTransformer = (data: any) => GetInvestmentActivePaymentOutputBody;

export const GetInvestmentActivePaymentOutputBodyModelResponseTransformer: GetInvestmentActivePaymentOutputBodyModelResponseTransformer = data => {
    if (data?.investmentPayment) {
        InvestmentPaymentModelResponseTransformer(data.investmentPayment);
    }
    return data;
};

export const GetInvestmentActivePaymentResponseTransformer: GetInvestmentActivePaymentResponseTransformer = async (data) => {
    GetInvestmentActivePaymentOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetInvestmentPaymentsResponseTransformer = (data: any) => Promise<GetInvestmentPaymentsResponse>;

export type GetInvestmentPaymentsOutputBodyModelResponseTransformer = (data: any) => GetInvestmentPaymentsOutputBody;

export const GetInvestmentPaymentsOutputBodyModelResponseTransformer: GetInvestmentPaymentsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.investmentPayments)) {
        data.investmentPayments.forEach(InvestmentPaymentModelResponseTransformer);
    }
    return data;
};

export const GetInvestmentPaymentsResponseTransformer: GetInvestmentPaymentsResponseTransformer = async (data) => {
    GetInvestmentPaymentsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetRoundByCursorResponseTransformer = (data: any) => Promise<GetRoundByCursorResponse>;

export const GetRoundByCursorResponseTransformer: GetRoundByCursorResponseTransformer = async (data) => {
    GetCursorPaginatedRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type CreateRoundResponseTransformer = (data: any) => Promise<CreateRoundResponse>;

export type SingleRoundResponseBodyModelResponseTransformer = (data: any) => SingleRoundResponseBody;

export const SingleRoundResponseBodyModelResponseTransformer: SingleRoundResponseBodyModelResponseTransformer = data => {
    if (data?.round) {
        RoundModelResponseTransformer(data.round);
    }
    return data;
};

export const CreateRoundResponseTransformer: CreateRoundResponseTransformer = async (data) => {
    SingleRoundResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetRoundsByPageResponseTransformer = (data: any) => Promise<GetRoundsByPageResponse>;

export const GetRoundsByPageResponseTransformer: GetRoundsByPageResponseTransformer = async (data) => {
    GetOffsetPaginatedRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetRoundByIdResponseTransformer = (data: any) => Promise<GetRoundByIdResponse>;

export type SingleRoundWithBusinessResponseBodyModelResponseTransformer = (data: any) => SingleRoundWithBusinessResponseBody;

export type RoundWithBusinessModelResponseTransformer = (data: any) => RoundWithBusiness;

export const RoundWithBusinessModelResponseTransformer: RoundWithBusinessModelResponseTransformer = data => {
    if (data?.beginsAt) {
        data.beginsAt = new Date(data.beginsAt);
    }
    if (data?.business) {
        BusinessModelResponseTransformer(data.business);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.endsAt) {
        data.endsAt = new Date(data.endsAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const SingleRoundWithBusinessResponseBodyModelResponseTransformer: SingleRoundWithBusinessResponseBodyModelResponseTransformer = data => {
    if (data?.round) {
        RoundWithBusinessModelResponseTransformer(data.round);
    }
    return data;
};

export const GetRoundByIdResponseTransformer: GetRoundByIdResponseTransformer = async (data) => {
    SingleRoundWithBusinessResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetUserAccountResponseTransformer = (data: any) => Promise<GetUserAccountResponse>;

export const GetUserAccountResponseTransformer: GetUserAccountResponseTransformer = async (data) => {
    SingleAccountResponseBodyModelResponseTransformer(data);
    return data;
};