// This file is auto-generated by @hey-api/openapi-ts

export type Account = {
    createdAt: Date;
    deletedAt: (Date) | null;
    firstName: string;
    id: number;
    lastName: string;
    updatedAt: (Date) | null;
    userId: string;
};

export type Address = {
    city: string;
    country: string;
    createdAt: Date;
    deletedAt: (Date) | null;
    district: string;
    fullAddress: string;
    id: number;
    line1: string;
    line2: string;
    postalCode: string;
    rawJson: unknown;
    region: string;
    regionCode: string;
    updatedAt: (Date) | null;
    xCoordinate: number;
    yCoordinate: number;
};

export type Business = {
    address: Address;
    addressId: number;
    businessNumber: string;
    createdAt: Date;
    deletedAt: (Date) | null;
    foundingDate: Date;
    id: number;
    industry: Industry;
    industryId: number;
    isRemote: boolean;
    name: string;
    ownerAccountId: number;
    status: 'pending' | 'active' | 'disabled';
    teamSize: '0-1' | '2-10' | '11-50' | '51-200' | '201-500' | '501-1000' | '1000+';
    updatedAt: (Date) | null;
};

export type status = 'pending' | 'active' | 'disabled';

export const status = {
    PENDING: 'pending',
    ACTIVE: 'active',
    DISABLED: 'disabled'
} as const;

export type teamSize = '0-1' | '2-10' | '11-50' | '51-200' | '201-500' | '501-1000' | '1000+';

export const teamSize = {
    _0_1: '0-1',
    _2_10: '2-10',
    _11_50: '11-50',
    _51_200: '51-200',
    _201_500: '201-500',
    _501_1000: '501-1000',
    _1000_: '1000+'
} as const;

export type BusinessParams = {
    businessNumber: string;
    foundingDate: Date;
    industryId: number;
    isRemote?: boolean;
    name: string;
    ownerAccountId: number;
    teamSize: '0-1' | '2-10' | '11-50' | '51-200' | '201-500' | '501-1000' | '1000+';
};

export type CreateAccountParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    firstName: string;
    lastName: string;
    userId: string;
};

export type CreateAddressParams = {
    city: string;
    country: string;
    district: string;
    fullAddress: string;
    line1: string;
    line2: string;
    postalCode: string;
    rawJson: unknown;
    region: string;
    regionCode: string;
    xCoordinate: number;
    yCoordinate: number;
};

export type CreateBusinessParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    address: CreateAddressParams;
    business: BusinessParams;
};

export type CreateInvestmentParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    investorId: number;
    roundId: number;
};

export type CreateRoundParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    beginsAt: Date;
    endsAt: Date;
    investorCount: number;
    percentageOffered: number;
    percentageValue: number;
    valueCurrency: 'usd' | 'gbp' | 'eur' | 'cad' | 'aud' | 'jpy';
    ventureId: number;
};

export type valueCurrency = 'usd' | 'gbp' | 'eur' | 'cad' | 'aud' | 'jpy';

export const valueCurrency = {
    USD: 'usd',
    GBP: 'gbp',
    EUR: 'eur',
    CAD: 'cad',
    AUD: 'aud',
    JPY: 'jpy'
} as const;

export type CreateVentureParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    businessId: number;
    description: string;
    name: string;
    overview: string;
};

export type ErrorDetail = {
    /**
     * Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
     */
    location?: string;
    /**
     * Error message text
     */
    message?: string;
    /**
     * The value at the given location
     */
    value?: unknown;
};

export type ErrorModel = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail?: string;
    /**
     * Optional list of individual error details
     */
    errors?: Array<ErrorDetail> | null;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string;
    /**
     * HTTP status code
     */
    status?: number;
    /**
     * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
     */
    title?: string;
    /**
     * A URI reference to human-readable documentation for the error.
     */
    type?: string;
};

export type FundingOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
    totalFunding: number;
};

export type GetAllIndustriesResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    industries: Array<Industry> | null;
    message: string;
};

export type GetBusinessesOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    businesses: Array<Business> | null;
    message: string;
};

export type GetCursorPaginatedRoundInvestmentsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    investments: Array<RoundInvestment> | null;
    message: string;
    nextCursor: (number) | null;
};

export type GetCursorPaginatedRoundsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    message: string;
    nextCursor: (number) | null;
    rounds: Array<Round> | null;
};

export type GetCursorPaginatedVenturesOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    message: string;
    nextCursor: (number) | null;
    ventures: Array<Venture> | null;
};

export type GetLikeCountOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    count: number;
    message: string;
};

export type GetOffsetPaginatedRoundInvestmentsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    investments: Array<RoundInvestment> | null;
    message: string;
};

export type GetOffsetPaginatedRoundsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    message: string;
    rounds: Array<Round> | null;
};

export type GetOffsetPaginatedVenturesOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    message: string;
    ventures: Array<Venture> | null;
};

export type Industry = {
    createdAt: Date;
    deletedAt: (Date) | null;
    id: number;
    label: string;
    updatedAt: (Date) | null;
};

export type IsLikedOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    liked: boolean;
    message: string;
};

export type LinkOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    link: string;
    message: string;
};

export type MessageResponse = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
};

export type Round = {
    beginsAt: Date;
    buyIn: number;
    createdAt: Date;
    deletedAt: (Date) | null;
    endsAt: Date;
    id: number;
    investorCount: number;
    percentageOffered: number;
    percentageValue: number;
    status: 'active' | 'successful' | 'failed';
    updatedAt: (Date) | null;
    valueCurrency: 'usd' | 'gbp' | 'eur' | 'cad' | 'aud' | 'jpy';
    venture: Venture;
    ventureId: number;
};

export type status2 = 'active' | 'successful' | 'failed';

export const status2 = {
    ACTIVE: 'active',
    SUCCESSFUL: 'successful',
    FAILED: 'failed'
} as const;

export type RoundInvestment = {
    createdAt: Date;
    deletedAt: (Date) | null;
    id: number;
    investor: Account;
    investorId: number;
    paidAt: (Date) | null;
    round: Round;
    roundId: number;
    status: 'pending' | 'accepted' | 'rejected' | 'withdrawn' | 'successful' | 'failed';
    updatedAt: (Date) | null;
};

export type status3 = 'pending' | 'accepted' | 'rejected' | 'withdrawn' | 'successful' | 'failed';

export const status3 = {
    PENDING: 'pending',
    ACCEPTED: 'accepted',
    REJECTED: 'rejected',
    WITHDRAWN: 'withdrawn',
    SUCCESSFUL: 'successful',
    FAILED: 'failed'
} as const;

export type SingleAccountResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    account: Account;
    message: string;
};

export type SingleBusinessResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    business: Business;
    message: string;
};

export type SingleInvestmentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    investment: RoundInvestment;
    message: string;
};

export type SingleRoundResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
    round: Round;
};

export type SingleVentureResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
    venture: Venture;
};

export type UpdateAccountParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    firstName: string;
    lastName: string;
};

export type UpdateVentureParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    description: string;
    name: string;
    overview: string;
};

export type Venture = {
    business: Business;
    businessId: number;
    createdAt: Date;
    deletedAt: (Date) | null;
    description: string;
    id: number;
    isHidden: boolean;
    name: string;
    overview: string;
    updatedAt: (Date) | null;
};

export type CreateAccountData = {
    body: CreateAccountParams;
};

export type CreateAccountResponse = (SingleAccountResponseBody);

export type CreateAccountError = (ErrorModel);

export type DeleteAccountData = {
    path: {
        id: number;
    };
};

export type DeleteAccountResponse = (MessageResponse);

export type DeleteAccountError = (ErrorModel);

export type GetAccountByIdData = {
    path: {
        id: number;
    };
};

export type GetAccountByIdResponse = (SingleAccountResponseBody);

export type GetAccountByIdError = (ErrorModel);

export type UpdateAccountData = {
    body: UpdateAccountParams;
    path: {
        id: number;
    };
};

export type UpdateAccountResponse = (SingleAccountResponseBody);

export type UpdateAccountError = (ErrorModel);

export type GetAccountBusinessesData = {
    path: {
        id: number;
    };
};

export type GetAccountBusinessesResponse = (GetBusinessesOutputBody);

export type GetAccountBusinessesError = (ErrorModel);

export type GetAccountInvestmentsByCursorData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetAccountInvestmentsByCursorResponse = (GetCursorPaginatedRoundInvestmentsOutputBody);

export type GetAccountInvestmentsByCursorError = (ErrorModel);

export type CreateRoundInvestmentData = {
    body: CreateInvestmentParams;
};

export type CreateRoundInvestmentResponse = (SingleInvestmentResponseBody);

export type CreateRoundInvestmentError = (ErrorModel);

export type GetAccountInvestmentsByPageData = {
    path: {
        id: number;
    };
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetAccountInvestmentsByPageResponse = (GetOffsetPaginatedRoundInvestmentsOutputBody);

export type GetAccountInvestmentsByPageError = (ErrorModel);

export type DeleteRoundInvestmentData = {
    path: {
        id: number;
        investmentId: number;
    };
};

export type DeleteRoundInvestmentResponse = (string);

export type DeleteRoundInvestmentError = (ErrorModel);

export type GetAccountCheckoutLinkData = {
    path: {
        id: number;
        investmentId: number;
    };
    query: {
        redirectUrl: string;
    };
};

export type GetAccountCheckoutLinkResponse = (LinkOutputBody);

export type GetAccountCheckoutLinkError = (ErrorModel);

export type WithdrawInvestmentData = {
    path: {
        id: number;
        investmentId: number;
    };
};

export type WithdrawInvestmentResponse = (string);

export type WithdrawInvestmentError = (ErrorModel);

export type HandleStripeWebhookData = {
    body: unknown;
    headers?: {
        'Stripe-Signature'?: string;
    };
};

export type HandleStripeWebhookResponse = (string);

export type HandleStripeWebhookError = (ErrorModel);

export type CreateBusinessData = {
    body: CreateBusinessParams;
};

export type CreateBusinessResponse = (SingleBusinessResponseBody);

export type CreateBusinessError = (ErrorModel);

export type DeleteBusinessData = {
    path: {
        id: number;
    };
};

export type DeleteBusinessResponse = (MessageResponse);

export type DeleteBusinessError = (ErrorModel);

export type GetBusinessByIdData = {
    path: {
        id: number;
    };
};

export type GetBusinessByIdResponse = (SingleBusinessResponseBody);

export type GetBusinessByIdError = (ErrorModel);

export type GetBusinessTotalFundingData = {
    path: {
        id: number;
    };
};

export type GetBusinessTotalFundingResponse = (FundingOutputBody);

export type GetBusinessTotalFundingError = (ErrorModel);

export type GetBusinessInvestmentsByCursorData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetBusinessInvestmentsByCursorResponse = (GetCursorPaginatedRoundInvestmentsOutputBody);

export type GetBusinessInvestmentsByCursorError = (ErrorModel);

export type GetBusinessInvestmentsByPageData = {
    path: {
        id: number;
    };
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetBusinessInvestmentsByPageResponse = (GetOffsetPaginatedRoundInvestmentsOutputBody);

export type GetBusinessInvestmentsByPageError = (ErrorModel);

export type GetBusinessRoundsByCursorData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetBusinessRoundsByCursorResponse = (GetCursorPaginatedRoundsOutputBody);

export type GetBusinessRoundsByCursorError = (ErrorModel);

export type GetBusinessRoundsByPageData = {
    path: {
        id: number;
    };
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetBusinessRoundsByPageResponse = (GetOffsetPaginatedRoundsOutputBody);

export type GetBusinessRoundsByPageError = (ErrorModel);

export type GetBusinessVenturesByCursorData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetBusinessVenturesByCursorResponse = (GetCursorPaginatedVenturesOutputBody);

export type GetBusinessVenturesByCursorError = (ErrorModel);

export type GetBusinessVenturesByPageData = {
    path: {
        id: number;
    };
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetBusinessVenturesByPageResponse = (GetOffsetPaginatedVenturesOutputBody);

export type GetBusinessVenturesByPageError = (ErrorModel);

export type HealthCheckResponse = (MessageResponse);

export type HealthCheckError = (ErrorModel);

export type GetAllIndustriesResponse = (GetAllIndustriesResponseBody);

export type GetAllIndustriesError = (ErrorModel);

export type GetInvestmentByIdData = {
    path: {
        id: number;
    };
};

export type GetInvestmentByIdResponse = (SingleInvestmentResponseBody);

export type GetInvestmentByIdError = (ErrorModel);

export type GetRoundByCursorData = {
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetRoundByCursorResponse = (GetCursorPaginatedRoundsOutputBody);

export type GetRoundByCursorError = (ErrorModel);

export type CreateRoundData = {
    body: CreateRoundParams;
};

export type CreateRoundResponse = (SingleRoundResponseBody);

export type CreateRoundError = (ErrorModel);

export type GetRoundsByPageData = {
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetRoundsByPageResponse = (GetOffsetPaginatedRoundsOutputBody);

export type GetRoundsByPageError = (ErrorModel);

export type DeleteRoundData = {
    path: {
        id: number;
    };
};

export type DeleteRoundResponse = (string);

export type DeleteRoundError = (ErrorModel);

export type GetRoundByIdData = {
    path: {
        id: number;
    };
};

export type GetRoundByIdResponse = (SingleRoundResponseBody);

export type GetRoundByIdError = (ErrorModel);

export type DeleteRoundLikeData = {
    path: {
        accountId: number;
        id: number;
    };
};

export type DeleteRoundLikeResponse = (MessageResponse);

export type DeleteRoundLikeError = (ErrorModel);

export type GetRoundLikeStatusData = {
    path: {
        accountId: number;
        id: number;
    };
};

export type GetRoundLikeStatusResponse = (IsLikedOutputBody);

export type GetRoundLikeStatusError = (ErrorModel);

export type CreateRoundLikeData = {
    path: {
        accountId: number;
        id: number;
    };
};

export type CreateRoundLikeResponse = (MessageResponse);

export type CreateRoundLikeError = (ErrorModel);

export type GetRoundInvestmentsByCursorData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetRoundInvestmentsByCursorResponse = (GetCursorPaginatedRoundInvestmentsOutputBody);

export type GetRoundInvestmentsByCursorError = (ErrorModel);

export type GetRoundInvestmentsByPageData = {
    path: {
        id: number;
    };
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetRoundInvestmentsByPageResponse = (GetOffsetPaginatedRoundInvestmentsOutputBody);

export type GetRoundInvestmentsByPageError = (ErrorModel);

export type AcceptInvestmentData = {
    path: {
        id: number;
        investmentId: number;
    };
};

export type AcceptInvestmentResponse = (string);

export type AcceptInvestmentError = (ErrorModel);

export type GetRoundLikeCountData = {
    path: {
        id: number;
    };
};

export type GetRoundLikeCountResponse = (GetLikeCountOutputBody);

export type GetRoundLikeCountError = (ErrorModel);

export type GetUserAccountData = {
    path: {
        userId: string;
    };
};

export type GetUserAccountResponse = (SingleAccountResponseBody);

export type GetUserAccountError = (ErrorModel);

export type GetVenturesByCursorData = {
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetVenturesByCursorResponse = (GetCursorPaginatedVenturesOutputBody);

export type GetVenturesByCursorError = (ErrorModel);

export type CreateVentureData = {
    body: CreateVentureParams;
};

export type CreateVentureResponse = (SingleVentureResponseBody);

export type CreateVentureError = (ErrorModel);

export type GetVenturesByPageData = {
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetVenturesByPageResponse = (GetOffsetPaginatedVenturesOutputBody);

export type GetVenturesByPageError = (ErrorModel);

export type DeleteVentureData = {
    path: {
        id: number;
    };
};

export type DeleteVentureResponse = (MessageResponse);

export type DeleteVentureError = (ErrorModel);

export type GetVentureByIdData = {
    path: {
        id: number;
    };
};

export type GetVentureByIdResponse = (SingleVentureResponseBody);

export type GetVentureByIdError = (ErrorModel);

export type UpdateVentureData = {
    body: UpdateVentureParams;
    path: {
        id: number;
    };
};

export type UpdateVentureResponse = (SingleVentureResponseBody);

export type UpdateVentureError = (ErrorModel);

export type DeleteVentureLikeData = {
    path: {
        accountId: number;
        id: number;
    };
};

export type DeleteVentureLikeResponse = (MessageResponse);

export type DeleteVentureLikeError = (ErrorModel);

export type GetVentureLikeStatusData = {
    path: {
        accountId: number;
        id: number;
    };
};

export type GetVentureLikeStatusResponse = (IsLikedOutputBody);

export type GetVentureLikeStatusError = (ErrorModel);

export type CreateVentureLikeData = {
    path: {
        accountId: number;
        id: number;
    };
};

export type CreateVentureLikeResponse = (MessageResponse);

export type CreateVentureLikeError = (ErrorModel);

export type GetVentureLikeCountData = {
    path: {
        id: number;
    };
};

export type GetVentureLikeCountResponse = (GetLikeCountOutputBody);

export type GetVentureLikeCountError = (ErrorModel);

export type GetVentureRoundInvestmentsByCursorData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetVentureRoundInvestmentsByCursorResponse = (GetCursorPaginatedRoundInvestmentsOutputBody);

export type GetVentureRoundInvestmentsByCursorError = (ErrorModel);

export type GetVentureRoundInvestmentsByPageData = {
    path: {
        id: number;
    };
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetVentureRoundInvestmentsByPageResponse = (GetOffsetPaginatedRoundInvestmentsOutputBody);

export type GetVentureRoundInvestmentsByPageError = (ErrorModel);

export type GetVentureRoundsByCursorData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetVentureRoundsByCursorResponse = (GetCursorPaginatedRoundsOutputBody);

export type GetVentureRoundsByCursorError = (ErrorModel);

export type GetVentureRoundsByPageData = {
    path: {
        id: number;
    };
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetVentureRoundsByPageResponse = (GetOffsetPaginatedRoundsOutputBody);

export type GetVentureRoundsByPageError = (ErrorModel);

export type CreateAccountResponseTransformer = (data: any) => Promise<CreateAccountResponse>;

export type SingleAccountResponseBodyModelResponseTransformer = (data: any) => SingleAccountResponseBody;

export type AccountModelResponseTransformer = (data: any) => Account;

export const AccountModelResponseTransformer: AccountModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const SingleAccountResponseBodyModelResponseTransformer: SingleAccountResponseBodyModelResponseTransformer = data => {
    if (data?.account) {
        AccountModelResponseTransformer(data.account);
    }
    return data;
};

export const CreateAccountResponseTransformer: CreateAccountResponseTransformer = async (data) => {
    SingleAccountResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAccountByIdResponseTransformer = (data: any) => Promise<GetAccountByIdResponse>;

export const GetAccountByIdResponseTransformer: GetAccountByIdResponseTransformer = async (data) => {
    SingleAccountResponseBodyModelResponseTransformer(data);
    return data;
};

export type UpdateAccountResponseTransformer = (data: any) => Promise<UpdateAccountResponse>;

export const UpdateAccountResponseTransformer: UpdateAccountResponseTransformer = async (data) => {
    SingleAccountResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAccountBusinessesResponseTransformer = (data: any) => Promise<GetAccountBusinessesResponse>;

export type GetBusinessesOutputBodyModelResponseTransformer = (data: any) => GetBusinessesOutputBody;

export type BusinessModelResponseTransformer = (data: any) => Business;

export type AddressModelResponseTransformer = (data: any) => Address;

export const AddressModelResponseTransformer: AddressModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export type IndustryModelResponseTransformer = (data: any) => Industry;

export const IndustryModelResponseTransformer: IndustryModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const BusinessModelResponseTransformer: BusinessModelResponseTransformer = data => {
    if (data?.address) {
        AddressModelResponseTransformer(data.address);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.foundingDate) {
        data.foundingDate = new Date(data.foundingDate);
    }
    if (data?.industry) {
        IndustryModelResponseTransformer(data.industry);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const GetBusinessesOutputBodyModelResponseTransformer: GetBusinessesOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.businesses)) {
        data.businesses.forEach(BusinessModelResponseTransformer);
    }
    return data;
};

export const GetAccountBusinessesResponseTransformer: GetAccountBusinessesResponseTransformer = async (data) => {
    GetBusinessesOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetAccountInvestmentsByCursorResponseTransformer = (data: any) => Promise<GetAccountInvestmentsByCursorResponse>;

export type GetCursorPaginatedRoundInvestmentsOutputBodyModelResponseTransformer = (data: any) => GetCursorPaginatedRoundInvestmentsOutputBody;

export type RoundInvestmentModelResponseTransformer = (data: any) => RoundInvestment;

export type RoundModelResponseTransformer = (data: any) => Round;

export type VentureModelResponseTransformer = (data: any) => Venture;

export const VentureModelResponseTransformer: VentureModelResponseTransformer = data => {
    if (data?.business) {
        BusinessModelResponseTransformer(data.business);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const RoundModelResponseTransformer: RoundModelResponseTransformer = data => {
    if (data?.beginsAt) {
        data.beginsAt = new Date(data.beginsAt);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.endsAt) {
        data.endsAt = new Date(data.endsAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    if (data?.venture) {
        VentureModelResponseTransformer(data.venture);
    }
    return data;
};

export const RoundInvestmentModelResponseTransformer: RoundInvestmentModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.investor) {
        AccountModelResponseTransformer(data.investor);
    }
    if (data?.paidAt) {
        data.paidAt = new Date(data.paidAt);
    }
    if (data?.round) {
        RoundModelResponseTransformer(data.round);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const GetCursorPaginatedRoundInvestmentsOutputBodyModelResponseTransformer: GetCursorPaginatedRoundInvestmentsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.investments)) {
        data.investments.forEach(RoundInvestmentModelResponseTransformer);
    }
    return data;
};

export const GetAccountInvestmentsByCursorResponseTransformer: GetAccountInvestmentsByCursorResponseTransformer = async (data) => {
    GetCursorPaginatedRoundInvestmentsOutputBodyModelResponseTransformer(data);
    return data;
};

export type CreateRoundInvestmentResponseTransformer = (data: any) => Promise<CreateRoundInvestmentResponse>;

export type SingleInvestmentResponseBodyModelResponseTransformer = (data: any) => SingleInvestmentResponseBody;

export const SingleInvestmentResponseBodyModelResponseTransformer: SingleInvestmentResponseBodyModelResponseTransformer = data => {
    if (data?.investment) {
        RoundInvestmentModelResponseTransformer(data.investment);
    }
    return data;
};

export const CreateRoundInvestmentResponseTransformer: CreateRoundInvestmentResponseTransformer = async (data) => {
    SingleInvestmentResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAccountInvestmentsByPageResponseTransformer = (data: any) => Promise<GetAccountInvestmentsByPageResponse>;

export type GetOffsetPaginatedRoundInvestmentsOutputBodyModelResponseTransformer = (data: any) => GetOffsetPaginatedRoundInvestmentsOutputBody;

export const GetOffsetPaginatedRoundInvestmentsOutputBodyModelResponseTransformer: GetOffsetPaginatedRoundInvestmentsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.investments)) {
        data.investments.forEach(RoundInvestmentModelResponseTransformer);
    }
    return data;
};

export const GetAccountInvestmentsByPageResponseTransformer: GetAccountInvestmentsByPageResponseTransformer = async (data) => {
    GetOffsetPaginatedRoundInvestmentsOutputBodyModelResponseTransformer(data);
    return data;
};

export type CreateBusinessResponseTransformer = (data: any) => Promise<CreateBusinessResponse>;

export type SingleBusinessResponseBodyModelResponseTransformer = (data: any) => SingleBusinessResponseBody;

export const SingleBusinessResponseBodyModelResponseTransformer: SingleBusinessResponseBodyModelResponseTransformer = data => {
    if (data?.business) {
        BusinessModelResponseTransformer(data.business);
    }
    return data;
};

export const CreateBusinessResponseTransformer: CreateBusinessResponseTransformer = async (data) => {
    SingleBusinessResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetBusinessByIdResponseTransformer = (data: any) => Promise<GetBusinessByIdResponse>;

export const GetBusinessByIdResponseTransformer: GetBusinessByIdResponseTransformer = async (data) => {
    SingleBusinessResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetBusinessInvestmentsByCursorResponseTransformer = (data: any) => Promise<GetBusinessInvestmentsByCursorResponse>;

export const GetBusinessInvestmentsByCursorResponseTransformer: GetBusinessInvestmentsByCursorResponseTransformer = async (data) => {
    GetCursorPaginatedRoundInvestmentsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetBusinessInvestmentsByPageResponseTransformer = (data: any) => Promise<GetBusinessInvestmentsByPageResponse>;

export const GetBusinessInvestmentsByPageResponseTransformer: GetBusinessInvestmentsByPageResponseTransformer = async (data) => {
    GetOffsetPaginatedRoundInvestmentsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetBusinessRoundsByCursorResponseTransformer = (data: any) => Promise<GetBusinessRoundsByCursorResponse>;

export type GetCursorPaginatedRoundsOutputBodyModelResponseTransformer = (data: any) => GetCursorPaginatedRoundsOutputBody;

export const GetCursorPaginatedRoundsOutputBodyModelResponseTransformer: GetCursorPaginatedRoundsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.rounds)) {
        data.rounds.forEach(RoundModelResponseTransformer);
    }
    return data;
};

export const GetBusinessRoundsByCursorResponseTransformer: GetBusinessRoundsByCursorResponseTransformer = async (data) => {
    GetCursorPaginatedRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetBusinessRoundsByPageResponseTransformer = (data: any) => Promise<GetBusinessRoundsByPageResponse>;

export type GetOffsetPaginatedRoundsOutputBodyModelResponseTransformer = (data: any) => GetOffsetPaginatedRoundsOutputBody;

export const GetOffsetPaginatedRoundsOutputBodyModelResponseTransformer: GetOffsetPaginatedRoundsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.rounds)) {
        data.rounds.forEach(RoundModelResponseTransformer);
    }
    return data;
};

export const GetBusinessRoundsByPageResponseTransformer: GetBusinessRoundsByPageResponseTransformer = async (data) => {
    GetOffsetPaginatedRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetBusinessVenturesByCursorResponseTransformer = (data: any) => Promise<GetBusinessVenturesByCursorResponse>;

export type GetCursorPaginatedVenturesOutputBodyModelResponseTransformer = (data: any) => GetCursorPaginatedVenturesOutputBody;

export const GetCursorPaginatedVenturesOutputBodyModelResponseTransformer: GetCursorPaginatedVenturesOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.ventures)) {
        data.ventures.forEach(VentureModelResponseTransformer);
    }
    return data;
};

export const GetBusinessVenturesByCursorResponseTransformer: GetBusinessVenturesByCursorResponseTransformer = async (data) => {
    GetCursorPaginatedVenturesOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetBusinessVenturesByPageResponseTransformer = (data: any) => Promise<GetBusinessVenturesByPageResponse>;

export type GetOffsetPaginatedVenturesOutputBodyModelResponseTransformer = (data: any) => GetOffsetPaginatedVenturesOutputBody;

export const GetOffsetPaginatedVenturesOutputBodyModelResponseTransformer: GetOffsetPaginatedVenturesOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.ventures)) {
        data.ventures.forEach(VentureModelResponseTransformer);
    }
    return data;
};

export const GetBusinessVenturesByPageResponseTransformer: GetBusinessVenturesByPageResponseTransformer = async (data) => {
    GetOffsetPaginatedVenturesOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetAllIndustriesResponseTransformer = (data: any) => Promise<GetAllIndustriesResponse>;

export type GetAllIndustriesResponseBodyModelResponseTransformer = (data: any) => GetAllIndustriesResponseBody;

export const GetAllIndustriesResponseBodyModelResponseTransformer: GetAllIndustriesResponseBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.industries)) {
        data.industries.forEach(IndustryModelResponseTransformer);
    }
    return data;
};

export const GetAllIndustriesResponseTransformer: GetAllIndustriesResponseTransformer = async (data) => {
    GetAllIndustriesResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetInvestmentByIdResponseTransformer = (data: any) => Promise<GetInvestmentByIdResponse>;

export const GetInvestmentByIdResponseTransformer: GetInvestmentByIdResponseTransformer = async (data) => {
    SingleInvestmentResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetRoundByCursorResponseTransformer = (data: any) => Promise<GetRoundByCursorResponse>;

export const GetRoundByCursorResponseTransformer: GetRoundByCursorResponseTransformer = async (data) => {
    GetCursorPaginatedRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type CreateRoundResponseTransformer = (data: any) => Promise<CreateRoundResponse>;

export type SingleRoundResponseBodyModelResponseTransformer = (data: any) => SingleRoundResponseBody;

export const SingleRoundResponseBodyModelResponseTransformer: SingleRoundResponseBodyModelResponseTransformer = data => {
    if (data?.round) {
        RoundModelResponseTransformer(data.round);
    }
    return data;
};

export const CreateRoundResponseTransformer: CreateRoundResponseTransformer = async (data) => {
    SingleRoundResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetRoundsByPageResponseTransformer = (data: any) => Promise<GetRoundsByPageResponse>;

export const GetRoundsByPageResponseTransformer: GetRoundsByPageResponseTransformer = async (data) => {
    GetOffsetPaginatedRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetRoundByIdResponseTransformer = (data: any) => Promise<GetRoundByIdResponse>;

export const GetRoundByIdResponseTransformer: GetRoundByIdResponseTransformer = async (data) => {
    SingleRoundResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetRoundInvestmentsByCursorResponseTransformer = (data: any) => Promise<GetRoundInvestmentsByCursorResponse>;

export const GetRoundInvestmentsByCursorResponseTransformer: GetRoundInvestmentsByCursorResponseTransformer = async (data) => {
    GetCursorPaginatedRoundInvestmentsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetRoundInvestmentsByPageResponseTransformer = (data: any) => Promise<GetRoundInvestmentsByPageResponse>;

export const GetRoundInvestmentsByPageResponseTransformer: GetRoundInvestmentsByPageResponseTransformer = async (data) => {
    GetOffsetPaginatedRoundInvestmentsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetUserAccountResponseTransformer = (data: any) => Promise<GetUserAccountResponse>;

export const GetUserAccountResponseTransformer: GetUserAccountResponseTransformer = async (data) => {
    SingleAccountResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetVenturesByCursorResponseTransformer = (data: any) => Promise<GetVenturesByCursorResponse>;

export const GetVenturesByCursorResponseTransformer: GetVenturesByCursorResponseTransformer = async (data) => {
    GetCursorPaginatedVenturesOutputBodyModelResponseTransformer(data);
    return data;
};

export type CreateVentureResponseTransformer = (data: any) => Promise<CreateVentureResponse>;

export type SingleVentureResponseBodyModelResponseTransformer = (data: any) => SingleVentureResponseBody;

export const SingleVentureResponseBodyModelResponseTransformer: SingleVentureResponseBodyModelResponseTransformer = data => {
    if (data?.venture) {
        VentureModelResponseTransformer(data.venture);
    }
    return data;
};

export const CreateVentureResponseTransformer: CreateVentureResponseTransformer = async (data) => {
    SingleVentureResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetVenturesByPageResponseTransformer = (data: any) => Promise<GetVenturesByPageResponse>;

export const GetVenturesByPageResponseTransformer: GetVenturesByPageResponseTransformer = async (data) => {
    GetOffsetPaginatedVenturesOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetVentureByIdResponseTransformer = (data: any) => Promise<GetVentureByIdResponse>;

export const GetVentureByIdResponseTransformer: GetVentureByIdResponseTransformer = async (data) => {
    SingleVentureResponseBodyModelResponseTransformer(data);
    return data;
};

export type UpdateVentureResponseTransformer = (data: any) => Promise<UpdateVentureResponse>;

export const UpdateVentureResponseTransformer: UpdateVentureResponseTransformer = async (data) => {
    SingleVentureResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetVentureRoundInvestmentsByCursorResponseTransformer = (data: any) => Promise<GetVentureRoundInvestmentsByCursorResponse>;

export const GetVentureRoundInvestmentsByCursorResponseTransformer: GetVentureRoundInvestmentsByCursorResponseTransformer = async (data) => {
    GetCursorPaginatedRoundInvestmentsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetVentureRoundInvestmentsByPageResponseTransformer = (data: any) => Promise<GetVentureRoundInvestmentsByPageResponse>;

export const GetVentureRoundInvestmentsByPageResponseTransformer: GetVentureRoundInvestmentsByPageResponseTransformer = async (data) => {
    GetOffsetPaginatedRoundInvestmentsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetVentureRoundsByCursorResponseTransformer = (data: any) => Promise<GetVentureRoundsByCursorResponse>;

export const GetVentureRoundsByCursorResponseTransformer: GetVentureRoundsByCursorResponseTransformer = async (data) => {
    GetCursorPaginatedRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetVentureRoundsByPageResponseTransformer = (data: any) => Promise<GetVentureRoundsByPageResponse>;

export const GetVentureRoundsByPageResponseTransformer: GetVentureRoundsByPageResponseTransformer = async (data) => {
    GetOffsetPaginatedRoundsOutputBodyModelResponseTransformer(data);
    return data;
};