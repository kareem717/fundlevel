// This file is auto-generated by @hey-api/openapi-ts

export type Account = {
    createdAt: Date;
    deletedAt: (Date) | null;
    id: number;
    name: string;
    updatedAt: (Date) | null;
    userId: string;
};

export type CreateAccountParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    name: string;
    userId: string;
};

export type CreateFooParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    name: string;
};

export type ErrorDetail = {
    /**
     * Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
     */
    location?: string;
    /**
     * Error message text
     */
    message?: string;
    /**
     * The value at the given location
     */
    value?: unknown;
};

export type ErrorModel = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail?: string;
    /**
     * Optional list of individual error details
     */
    errors?: Array<ErrorDetail> | null;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string;
    /**
     * HTTP status code
     */
    status?: number;
    /**
     * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
     */
    title?: string;
    /**
     * A URI reference to human-readable documentation for the error.
     */
    type?: string;
};

export type Foo = {
    createdAt: Date;
    deletedAt: (Date) | null;
    id: number;
    name: string;
    updatedAt: (Date) | null;
};

export type GetAllFooOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    foos: Array<Foo> | null;
    hasMore: boolean;
    message: string;
    nextCursor: (number) | null;
};

export type MessageResponse = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
};

export type SingleAccountResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    account: Account;
    message: string;
};

export type SingleFooResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    foo: Foo;
    message: string;
};

export type UpdateAccountParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    name: string;
};

export type UpdateFooParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    name: string;
};

export type CreateAccountData = {
    body: CreateAccountParams;
};

export type CreateAccountResponse = (SingleAccountResponseBody);

export type CreateAccountError = (ErrorModel);

export type GetAccountByUserIdData = {
    path: {
        userId: string;
    };
};

export type GetAccountByUserIdResponse = (SingleAccountResponseBody);

export type GetAccountByUserIdError = (ErrorModel);

export type DeleteAccountData = {
    path: {
        id: number;
    };
};

export type DeleteAccountResponse = (MessageResponse);

export type DeleteAccountError = (ErrorModel);

export type GetAccountByIdData = {
    path: {
        id: number;
    };
};

export type GetAccountByIdResponse = (SingleAccountResponseBody);

export type GetAccountByIdError = (ErrorModel);

export type UpdateAccountData = {
    body: UpdateAccountParams;
    path: {
        id: number;
    };
};

export type UpdateAccountResponse = (SingleAccountResponseBody);

export type UpdateAccountError = (ErrorModel);

export type GetAllFoosData = {
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetAllFoosResponse = (GetAllFooOutputBody);

export type GetAllFoosError = (ErrorModel);

export type CreateFooData = {
    body: CreateFooParams;
};

export type CreateFooResponse = (SingleFooResponseBody);

export type CreateFooError = (ErrorModel);

export type DeleteFooData = {
    path: {
        id: number;
    };
};

export type DeleteFooResponse = (MessageResponse);

export type DeleteFooError = (ErrorModel);

export type GetFooByIdData = {
    path: {
        id: number;
    };
};

export type GetFooByIdResponse = (SingleFooResponseBody);

export type GetFooByIdError = (ErrorModel);

export type UpdateFooData = {
    body: UpdateFooParams;
    path: {
        id: number;
    };
};

export type UpdateFooResponse = (SingleFooResponseBody);

export type UpdateFooError = (ErrorModel);

export type HealthCheckResponse = (MessageResponse);

export type HealthCheckError = (ErrorModel);

export type CreateAccountResponseTransformer = (data: any) => Promise<CreateAccountResponse>;

export type SingleAccountResponseBodyModelResponseTransformer = (data: any) => SingleAccountResponseBody;

export type AccountModelResponseTransformer = (data: any) => Account;

export const AccountModelResponseTransformer: AccountModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const SingleAccountResponseBodyModelResponseTransformer: SingleAccountResponseBodyModelResponseTransformer = data => {
    if (data?.account) {
        AccountModelResponseTransformer(data.account);
    }
    return data;
};

export const CreateAccountResponseTransformer: CreateAccountResponseTransformer = async (data) => {
    SingleAccountResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAccountByUserIdResponseTransformer = (data: any) => Promise<GetAccountByUserIdResponse>;

export const GetAccountByUserIdResponseTransformer: GetAccountByUserIdResponseTransformer = async (data) => {
    SingleAccountResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAccountByIdResponseTransformer = (data: any) => Promise<GetAccountByIdResponse>;

export const GetAccountByIdResponseTransformer: GetAccountByIdResponseTransformer = async (data) => {
    SingleAccountResponseBodyModelResponseTransformer(data);
    return data;
};

export type UpdateAccountResponseTransformer = (data: any) => Promise<UpdateAccountResponse>;

export const UpdateAccountResponseTransformer: UpdateAccountResponseTransformer = async (data) => {
    SingleAccountResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAllFoosResponseTransformer = (data: any) => Promise<GetAllFoosResponse>;

export type GetAllFooOutputBodyModelResponseTransformer = (data: any) => GetAllFooOutputBody;

export type FooModelResponseTransformer = (data: any) => Foo;

export const FooModelResponseTransformer: FooModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const GetAllFooOutputBodyModelResponseTransformer: GetAllFooOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.foos)) {
        data.foos.forEach(FooModelResponseTransformer);
    }
    return data;
};

export const GetAllFoosResponseTransformer: GetAllFoosResponseTransformer = async (data) => {
    GetAllFooOutputBodyModelResponseTransformer(data);
    return data;
};

export type CreateFooResponseTransformer = (data: any) => Promise<CreateFooResponse>;

export type SingleFooResponseBodyModelResponseTransformer = (data: any) => SingleFooResponseBody;

export const SingleFooResponseBodyModelResponseTransformer: SingleFooResponseBodyModelResponseTransformer = data => {
    if (data?.foo) {
        FooModelResponseTransformer(data.foo);
    }
    return data;
};

export const CreateFooResponseTransformer: CreateFooResponseTransformer = async (data) => {
    SingleFooResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetFooByIdResponseTransformer = (data: any) => Promise<GetFooByIdResponse>;

export const GetFooByIdResponseTransformer: GetFooByIdResponseTransformer = async (data) => {
    SingleFooResponseBodyModelResponseTransformer(data);
    return data;
};

export type UpdateFooResponseTransformer = (data: any) => Promise<UpdateFooResponse>;

export const UpdateFooResponseTransformer: UpdateFooResponseTransformer = async (data) => {
    SingleFooResponseBodyModelResponseTransformer(data);
    return data;
};