// This file is auto-generated by @hey-api/openapi-ts

export type Account = {
    createdAt: Date;
    deletedAt: (Date) | null;
    firstName: string;
    id: number;
    lastName: string;
    updatedAt: (Date) | null;
    userId: string;
};

export type Address = {
    city: string;
    country: string;
    createdAt: Date;
    deletedAt: (Date) | null;
    district: string;
    fullAddress: string;
    id: number;
    line1: string;
    line2: string;
    postalCode: string;
    rawJson: unknown;
    region: string;
    regionCode: string;
    updatedAt: (Date) | null;
    xCoordinate: number;
    yCoordinate: number;
};

export type Business = {
    address: Address;
    businessNumber: string;
    createdAt: Date;
    deletedAt: (Date) | null;
    foundingDate: Date;
    id: number;
    name: string;
    ownerAccountId: number;
    status: 'pending' | 'active' | 'disabled';
    updatedAt: (Date) | null;
};

export type status = 'pending' | 'active' | 'disabled';

export const status = {
    PENDING: 'pending',
    ACTIVE: 'active',
    DISABLED: 'disabled'
} as const;

export type BusinessMember = {
    accountId: number;
    businessId: number;
    createdAt: Date;
    role: 'admin' | 'member';
    updatedAt: (Date) | null;
};

export type role = 'admin' | 'member';

export const role = {
    ADMIN: 'admin',
    MEMBER: 'member'
} as const;

export type BusinessParams = {
    businessNumber: string;
    foundingDate: Date;
    name: string;
    ownerAccountId: number;
    status: 'pending' | 'active' | 'disabled';
};

export type CreateAccountParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    firstName: string;
    lastName: string;
    userId: string;
};

export type CreateAddressParams = {
    city: string;
    country: string;
    district: string;
    fullAddress: string;
    line1: string;
    line2: string;
    postalCode: string;
    rawJson: unknown;
    region: string;
    regionCode: string;
    xCoordinate: number;
    yCoordinate: number;
};

export type CreateBusinessMemberParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    accountId: number;
    businessId: number;
    role: 'admin' | 'member';
};

export type CreateBusinessParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    address: CreateAddressParams;
    business: BusinessParams;
};

export type CreateDutchDynamicRoundParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    dutchDynamicRound: DutchDynamicRoundParams;
    round: CreateRoundParams;
};

export type CreateFixedTotalRoundParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    round: CreateRoundParams;
};

export type CreateInvestmentParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    amount: number;
    investorId: number;
    roundId: number;
};

export type CreatePartialTotalRoundParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    partialTotalRound: PartialTotalRoundParams;
    round: CreateRoundParams;
};

export type CreateRegularDynamicRoundParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    regularDynamicRound: RegularDynamicRoundParams;
    round: CreateRoundParams;
};

export type CreateRoundParams = {
    beginsAt: Date;
    endsAt: Date;
    percentageOffered: number;
    percentageValue: number;
    status: 'active' | 'successful' | 'failed';
    valueCurrency: 'USD' | 'GBP' | 'EUR' | 'CAD' | 'AUD' | 'JPY';
    ventureId: number;
};

export type status2 = 'active' | 'successful' | 'failed';

export const status2 = {
    ACTIVE: 'active',
    SUCCESSFUL: 'successful',
    FAILED: 'failed'
} as const;

export type valueCurrency = 'USD' | 'GBP' | 'EUR' | 'CAD' | 'AUD' | 'JPY';

export const valueCurrency = {
    USD: 'USD',
    GBP: 'GBP',
    EUR: 'EUR',
    CAD: 'CAD',
    AUD: 'AUD',
    JPY: 'JPY'
} as const;

export type CreateVentureParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    address?: CreateAddressParams;
    venture: VentureParams;
};

export type DutchDynamicRound = {
    createdAt: Date;
    deletedAt: (Date) | null;
    round: Round;
    roundId: number;
    updatedAt: (Date) | null;
    valuationDollarDropRate: number;
    valuationDropIntervalDays: number;
    valuationStopLoss: number;
};

export type DutchDynamicRoundParams = {
    valuationDollarDropRate: number;
    valuationDropIntervalDays: number;
    valuationStopLoss: number;
};

export type ErrorDetail = {
    /**
     * Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
     */
    location?: string;
    /**
     * Error message text
     */
    message?: string;
    /**
     * The value at the given location
     */
    value?: unknown;
};

export type ErrorModel = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail?: string;
    /**
     * Optional list of individual error details
     */
    errors?: Array<ErrorDetail> | null;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string;
    /**
     * HTTP status code
     */
    status?: number;
    /**
     * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
     */
    title?: string;
    /**
     * A URI reference to human-readable documentation for the error.
     */
    type?: string;
};

export type FixedTotalRound = {
    createdAt: Date;
    deletedAt: (Date) | null;
    round: Round;
    updatedAt: (Date) | null;
};

export type GetBusinessesOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    businesses: Array<Business> | null;
    message: string;
};

export type GetCursorPaginatedDutchDynamicRoundsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    dutchDynamicRounds: Array<DutchDynamicRound> | null;
    hasMore: boolean;
    message: string;
    nextCursor: (number) | null;
};

export type GetCursorPaginatedFixedTotalRoundsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    fixedTotalRounds: Array<FixedTotalRound> | null;
    hasMore: boolean;
    message: string;
    nextCursor: (number) | null;
};

export type GetCursorPaginatedPartialTotalRoundsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    message: string;
    nextCursor: (number) | null;
    partialTotalRounds: Array<PartialTotalRound> | null;
};

export type GetCursorPaginatedRegularDynamicRoundsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    message: string;
    nextCursor: (number) | null;
    regularDynamicRounds: Array<RegularDynamicRound> | null;
};

export type GetCursorPaginatedRoundInvestmentsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    investments: Array<RoundInvestment> | null;
    message: string;
    nextCursor: (number) | null;
};

export type GetCursorPaginatedRoundsWithSubtypesOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    message: string;
    nextCursor: (number) | null;
    roundsWithSubtypes: Array<RoundWithSubtypes> | null;
};

export type GetCursorPaginatedVenturesOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    message: string;
    nextCursor: (number) | null;
    ventures: Array<Venture> | null;
};

export type GetOffsetPaginatedBusinessMembersResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    businessMembers: Array<BusinessMember> | null;
    hasMore: boolean;
    message: string;
};

export type GetOffsetPaginatedDutchDynamicRoundsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    dutchDynamicRounds: Array<DutchDynamicRound> | null;
    hasMore: boolean;
    message: string;
};

export type GetOffsetPaginatedFixedTotalRoundsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    fixedTotalRounds: Array<FixedTotalRound> | null;
    hasMore: boolean;
    message: string;
};

export type GetOffsetPaginatedPartialTotalRoundsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    message: string;
    partialTotalRounds: Array<PartialTotalRound> | null;
};

export type GetOffsetPaginatedRegularDynamicRoundsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    message: string;
    regularDynamicRounds: Array<RegularDynamicRound> | null;
};

export type GetOffsetPaginatedRoundInvestmentsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    investments: Array<RoundInvestment> | null;
    message: string;
};

export type GetOffsetPaginatedRoundsWithSubtypesOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    message: string;
    roundsWithSubtypes: Array<RoundWithSubtypes> | null;
};

export type GetOffsetPaginatedVenturesOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    message: string;
    ventures: Array<Venture> | null;
};

export type LinkOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    link: string;
    message: string;
};

export type MessageResponse = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
};

export type PartialTotalRound = {
    createdAt: Date;
    deletedAt: (Date) | null;
    investorCount: number;
    round: Round;
    roundId: number;
    updatedAt: (Date) | null;
};

export type PartialTotalRoundParams = {
    investorCount: number;
};

export type RegularDynamicRound = {
    createdAt: Date;
    daysExtendOnBid: number;
    deletedAt: (Date) | null;
    round: Round;
    roundId: number;
    updatedAt: (Date) | null;
};

export type RegularDynamicRoundParams = {
    daysExtendOnBid: number;
};

export type Round = {
    beginsAt: Date;
    createdAt: Date;
    deletedAt: (Date) | null;
    endsAt: Date;
    id: number;
    percentageOffered: number;
    percentageValue: number;
    status: 'active' | 'successful' | 'failed';
    updatedAt: (Date) | null;
    valueCurrency: 'USD' | 'GBP' | 'EUR' | 'CAD' | 'AUD' | 'JPY';
    ventureId: number;
};

export type RoundInvestment = {
    amount: number;
    createdAt: Date;
    deletedAt: (Date) | null;
    id: number;
    investor: Account;
    investorId: number;
    readonly paidAt: (Date) | null;
    round: Round;
    roundId: number;
    readonly status: 'pending' | 'accepted' | 'rejected' | 'withdrawn' | 'successful' | 'failed';
    readonly stripeCheckoutSessionId: (string) | null;
    updatedAt: (Date) | null;
};

export type status3 = 'pending' | 'accepted' | 'rejected' | 'withdrawn' | 'successful' | 'failed';

export const status3 = {
    PENDING: 'pending',
    ACCEPTED: 'accepted',
    REJECTED: 'rejected',
    WITHDRAWN: 'withdrawn',
    SUCCESSFUL: 'successful',
    FAILED: 'failed'
} as const;

export type RoundWithSubtypes = {
    beginsAt: Date;
    createdAt: Date;
    deletedAt: (Date) | null;
    dutchDynamicRound: DutchDynamicRound;
    endsAt: Date;
    fixedTotalRound: FixedTotalRound;
    id: number;
    partialTotalRound: PartialTotalRound;
    percentageOffered: number;
    percentageValue: number;
    regularDynamicRound: RegularDynamicRound;
    status: 'active' | 'successful' | 'failed';
    updatedAt: (Date) | null;
    valueCurrency: 'USD' | 'GBP' | 'EUR' | 'CAD' | 'AUD' | 'JPY';
    ventureId: number;
};

export type SingleAccountResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    account: Account;
    message: string;
};

export type SingleBusinessMemberResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    businessMember: BusinessMember;
    message: string;
};

export type SingleBusinessResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    business: Business;
    message: string;
};

export type SingleDutchDynamicRoundResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
    round: DutchDynamicRound;
};

export type SingleFixedTotalRoundResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
    round: FixedTotalRound;
};

export type SinglePartialTotalRoundResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
    round: PartialTotalRound;
};

export type SingleRegularDynamicRoundResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
    round: RegularDynamicRound;
};

export type SingleRoundInvestmentResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    investment: RoundInvestment;
    message: string;
};

export type SingleRoundWithSubtypesResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
    round: RoundWithSubtypes;
};

export type SingleVentureResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
    venture: Venture;
};

export type UpdateAccountParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    firstName: string;
    lastName: string;
};

export type UpdateBusinessMemberParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    role: 'admin' | 'member';
};

export type UpdateVentureParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    description: string;
    name: string;
};

export type Venture = {
    address: Address;
    readonly addressId?: number;
    businessId: number;
    createdAt: Date;
    deletedAt: (Date) | null;
    description: string;
    id: number;
    readonly isHidden: boolean;
    isRemote: boolean;
    name: string;
    teamSize: '0-1' | '2-10' | '11-50' | '51-200' | '201-500' | '501-1000' | '1000+';
    updatedAt: (Date) | null;
};

export type teamSize = '0-1' | '2-10' | '11-50' | '51-200' | '201-500' | '501-1000' | '1000+';

export const teamSize = {
    _0_1: '0-1',
    _2_10: '2-10',
    _11_50: '11-50',
    _51_200: '51-200',
    _201_500: '201-500',
    _501_1000: '501-1000',
    _1000_: '1000+'
} as const;

export type VentureParams = {
    readonly addressId?: number;
    businessId: number;
    description: string;
    readonly isHidden: boolean;
    isRemote: boolean;
    name: string;
    teamSize: '0-1' | '2-10' | '11-50' | '51-200' | '201-500' | '501-1000' | '1000+';
};

export type CreateAccountData = {
    body: CreateAccountParams;
};

export type CreateAccountResponse = (SingleAccountResponseBody);

export type CreateAccountError = (ErrorModel);

export type DeleteAccountData = {
    path: {
        id: number;
    };
};

export type DeleteAccountResponse = (MessageResponse);

export type DeleteAccountError = (ErrorModel);

export type GetAccountByIdData = {
    path: {
        id: number;
    };
};

export type GetAccountByIdResponse = (SingleAccountResponseBody);

export type GetAccountByIdError = (ErrorModel);

export type UpdateAccountData = {
    body: UpdateAccountParams;
    path: {
        id: number;
    };
};

export type UpdateAccountResponse = (SingleAccountResponseBody);

export type UpdateAccountError = (ErrorModel);

export type GetAccountBusinessesData = {
    path: {
        id: number;
    };
};

export type GetAccountBusinessesResponse = (GetBusinessesOutputBody);

export type GetAccountBusinessesError = (ErrorModel);

export type CreateRoundInvestmentData = {
    body: CreateInvestmentParams;
};

export type CreateRoundInvestmentResponse = (SingleRoundInvestmentResponseBody);

export type CreateRoundInvestmentError = (ErrorModel);

export type GetAccountRoundInvestmentsCursorData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetAccountRoundInvestmentsCursorResponse = (GetCursorPaginatedRoundInvestmentsOutputBody);

export type GetAccountRoundInvestmentsCursorError = (ErrorModel);

export type GetRoundInvestmentsOffsetData = {
    path: {
        id: number;
    };
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetRoundInvestmentsOffsetResponse = (GetOffsetPaginatedRoundInvestmentsOutputBody);

export type GetRoundInvestmentsOffsetError = (ErrorModel);

export type DeleteRoundInvestmentData = {
    path: {
        id: number;
        investmentId: number;
    };
};

export type DeleteRoundInvestmentResponse = (string);

export type DeleteRoundInvestmentError = (ErrorModel);

export type GetAccountCheckoutLinkData = {
    path: {
        id: number;
        investmentId: number;
    };
    query: {
        redirectUrl: string;
    };
};

export type GetAccountCheckoutLinkResponse = (LinkOutputBody);

export type GetAccountCheckoutLinkError = (ErrorModel);

export type WithdrawRoundInvestmentData = {
    path: {
        id: number;
        investmentId: number;
    };
};

export type WithdrawRoundInvestmentResponse = (string);

export type WithdrawRoundInvestmentError = (ErrorModel);

export type HandleStripeWebhookData = {
    body: unknown;
    headers?: {
        'Stripe-Signature'?: string;
    };
};

export type HandleStripeWebhookResponse = (string);

export type HandleStripeWebhookError = (ErrorModel);

export type CreateBusinessData = {
    body: CreateBusinessParams;
};

export type CreateBusinessResponse = (SingleBusinessResponseBody);

export type CreateBusinessError = (ErrorModel);

export type DeleteBusinessMemberData = {
    path: {
        businessId: number;
        id: number;
    };
};

export type DeleteBusinessMemberResponse = (MessageResponse);

export type DeleteBusinessMemberError = (ErrorModel);

export type UpdateBusinessMemberData = {
    body: UpdateBusinessMemberParams;
    path: {
        businessId: number;
        id: number;
    };
};

export type UpdateBusinessMemberResponse = (SingleBusinessMemberResponseBody);

export type UpdateBusinessMemberError = (ErrorModel);

export type DeleteBusinessData = {
    path: {
        id: number;
    };
};

export type DeleteBusinessResponse = (MessageResponse);

export type DeleteBusinessError = (ErrorModel);

export type GetBusinessByIdData = {
    path: {
        id: number;
    };
};

export type GetBusinessByIdResponse = (SingleBusinessResponseBody);

export type GetBusinessByIdError = (ErrorModel);

export type GetBusinessMembersData = {
    path: {
        id: number;
    };
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetBusinessMembersResponse = (GetOffsetPaginatedBusinessMembersResponseBody);

export type GetBusinessMembersError = (ErrorModel);

export type CreateBusinessMemberData = {
    body: CreateBusinessMemberParams;
};

export type CreateBusinessMemberResponse = (SingleBusinessMemberResponseBody);

export type CreateBusinessMemberError = (ErrorModel);

export type GetBusinessRecievedRoundInvestmentsCursorData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetBusinessRecievedRoundInvestmentsCursorResponse = (GetCursorPaginatedRoundInvestmentsOutputBody);

export type GetBusinessRecievedRoundInvestmentsCursorError = (ErrorModel);

export type GetBusinessRoundsData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
        maxEndsAt?: Date;
        minEndsAt?: Date;
        status?: Array<('active' | 'successful' | 'failed')> | null;
    };
};

export type GetBusinessRoundsResponse = (GetCursorPaginatedRoundsWithSubtypesOutputBody);

export type GetBusinessRoundsError = (ErrorModel);

export type GetBusinessVenturesData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetBusinessVenturesResponse = (GetCursorPaginatedVenturesOutputBody);

export type GetBusinessVenturesError = (ErrorModel);

export type HealthCheckResponse = (MessageResponse);

export type HealthCheckError = (ErrorModel);

export type GetRoundByCursorData = {
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetRoundByCursorResponse = (GetCursorPaginatedRoundsWithSubtypesOutputBody);

export type GetRoundByCursorError = (ErrorModel);

export type CreateDutchDynamicRoundData = {
    body: CreateDutchDynamicRoundParams;
};

export type CreateDutchDynamicRoundResponse = (SingleDutchDynamicRoundResponseBody);

export type CreateDutchDynamicRoundError = (ErrorModel);

export type GetAllDutchDynamicRoundsCursorData = {
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetAllDutchDynamicRoundsCursorResponse = (GetCursorPaginatedDutchDynamicRoundsOutputBody);

export type GetAllDutchDynamicRoundsCursorError = (ErrorModel);

export type GetAllDutchDynamicRoundsOffsetData = {
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetAllDutchDynamicRoundsOffsetResponse = (GetOffsetPaginatedDutchDynamicRoundsOutputBody);

export type GetAllDutchDynamicRoundsOffsetError = (ErrorModel);

export type DeleteDutchDynamicRoundData = {
    path: {
        id: number;
    };
};

export type DeleteDutchDynamicRoundResponse = (MessageResponse);

export type DeleteDutchDynamicRoundError = (ErrorModel);

export type GetDutchDynamicRoundByIdData = {
    path: {
        id: number;
    };
};

export type GetDutchDynamicRoundByIdResponse = (SingleDutchDynamicRoundResponseBody);

export type GetDutchDynamicRoundByIdError = (ErrorModel);

export type CreateRegularDynamicRoundData = {
    body: CreateRegularDynamicRoundParams;
};

export type CreateRegularDynamicRoundResponse = (SingleRegularDynamicRoundResponseBody);

export type CreateRegularDynamicRoundError = (ErrorModel);

export type GetAllRegularDynamicRoundsCursorData = {
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetAllRegularDynamicRoundsCursorResponse = (GetCursorPaginatedRegularDynamicRoundsOutputBody);

export type GetAllRegularDynamicRoundsCursorError = (ErrorModel);

export type GetAllRegularDynamicRoundsOffsetData = {
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetAllRegularDynamicRoundsOffsetResponse = (GetOffsetPaginatedRegularDynamicRoundsOutputBody);

export type GetAllRegularDynamicRoundsOffsetError = (ErrorModel);

export type DeleteRegularDynamicRoundData = {
    path: {
        id: number;
    };
};

export type DeleteRegularDynamicRoundResponse = (MessageResponse);

export type DeleteRegularDynamicRoundError = (ErrorModel);

export type GetRegularDynamicRoundByIdData = {
    path: {
        id: number;
    };
};

export type GetRegularDynamicRoundByIdResponse = (SingleRegularDynamicRoundResponseBody);

export type GetRegularDynamicRoundByIdError = (ErrorModel);

export type GetRoundByPageData = {
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetRoundByPageResponse = (GetOffsetPaginatedRoundsWithSubtypesOutputBody);

export type GetRoundByPageError = (ErrorModel);

export type CreateFixedTotalRoundData = {
    body: CreateFixedTotalRoundParams;
};

export type CreateFixedTotalRoundResponse = (SingleFixedTotalRoundResponseBody);

export type CreateFixedTotalRoundError = (ErrorModel);

export type GetAllFixedTotalRoundsCursorData = {
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetAllFixedTotalRoundsCursorResponse = (GetCursorPaginatedFixedTotalRoundsOutputBody);

export type GetAllFixedTotalRoundsCursorError = (ErrorModel);

export type GetAllFixedTotalRoundsOffsetData = {
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetAllFixedTotalRoundsOffsetResponse = (GetOffsetPaginatedFixedTotalRoundsOutputBody);

export type GetAllFixedTotalRoundsOffsetError = (ErrorModel);

export type DeleteFixedTotalRoundData = {
    path: {
        id: number;
    };
};

export type DeleteFixedTotalRoundResponse = (MessageResponse);

export type DeleteFixedTotalRoundError = (ErrorModel);

export type GetFixedTotalRoundByIdData = {
    path: {
        id: number;
    };
};

export type GetFixedTotalRoundByIdResponse = (SingleFixedTotalRoundResponseBody);

export type GetFixedTotalRoundByIdError = (ErrorModel);

export type CreatePartialTotalRoundData = {
    body: CreatePartialTotalRoundParams;
};

export type CreatePartialTotalRoundResponse = (SinglePartialTotalRoundResponseBody);

export type CreatePartialTotalRoundError = (ErrorModel);

export type GetAllPartialTotalRoundsCursorData = {
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetAllPartialTotalRoundsCursorResponse = (GetCursorPaginatedPartialTotalRoundsOutputBody);

export type GetAllPartialTotalRoundsCursorError = (ErrorModel);

export type GetAllPartialTotalRoundsOffsetData = {
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetAllPartialTotalRoundsOffsetResponse = (GetOffsetPaginatedPartialTotalRoundsOutputBody);

export type GetAllPartialTotalRoundsOffsetError = (ErrorModel);

export type DeletePartialTotalRoundData = {
    path: {
        id: number;
    };
};

export type DeletePartialTotalRoundResponse = (MessageResponse);

export type DeletePartialTotalRoundError = (ErrorModel);

export type GetPartialTotalRoundByIdData = {
    path: {
        id: number;
    };
};

export type GetPartialTotalRoundByIdResponse = (SinglePartialTotalRoundResponseBody);

export type GetPartialTotalRoundByIdError = (ErrorModel);

export type GetRoundByIdData = {
    path: {
        id: number;
    };
};

export type GetRoundByIdResponse = (SingleRoundWithSubtypesResponseBody);

export type GetRoundByIdError = (ErrorModel);

export type GetRoundRoundInvestmentsCursorData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetRoundRoundInvestmentsCursorResponse = (GetCursorPaginatedRoundInvestmentsOutputBody);

export type GetRoundRoundInvestmentsCursorError = (ErrorModel);

export type GetRoundRoundInvestmentsOffsetData = {
    path: {
        id: number;
    };
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetRoundRoundInvestmentsOffsetResponse = (GetOffsetPaginatedRoundInvestmentsOutputBody);

export type GetRoundRoundInvestmentsOffsetError = (ErrorModel);

export type AcceptRoundInvestmentData = {
    path: {
        id: number;
        investmentId: number;
    };
};

export type AcceptRoundInvestmentResponse = (string);

export type AcceptRoundInvestmentError = (ErrorModel);

export type GetUserAccountData = {
    path: {
        userId: string;
    };
};

export type GetUserAccountResponse = (SingleAccountResponseBody);

export type GetUserAccountError = (ErrorModel);

export type CreateVentureData = {
    body: CreateVentureParams;
};

export type CreateVentureResponse = (SingleVentureResponseBody);

export type CreateVentureError = (ErrorModel);

export type GetAllVenturesCursorData = {
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetAllVenturesCursorResponse = (GetCursorPaginatedVenturesOutputBody);

export type GetAllVenturesCursorError = (ErrorModel);

export type GetAllVenturesOffsetData = {
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetAllVenturesOffsetResponse = (GetOffsetPaginatedVenturesOutputBody);

export type GetAllVenturesOffsetError = (ErrorModel);

export type DeleteVentureData = {
    path: {
        id: number;
    };
};

export type DeleteVentureResponse = (MessageResponse);

export type DeleteVentureError = (ErrorModel);

export type GetVentureByIdData = {
    path: {
        id: number;
    };
};

export type GetVentureByIdResponse = (SingleVentureResponseBody);

export type GetVentureByIdError = (ErrorModel);

export type UpdateVentureData = {
    body: UpdateVentureParams;
    path: {
        id: number;
    };
};

export type UpdateVentureResponse = (SingleVentureResponseBody);

export type UpdateVentureError = (ErrorModel);

export type GetVentureRoundInvestmentsCursorData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetVentureRoundInvestmentsCursorResponse = (GetCursorPaginatedRoundInvestmentsOutputBody);

export type GetVentureRoundInvestmentsCursorError = (ErrorModel);

export type GetVentureRoundInvestmentsOffsetData = {
    path: {
        id: number;
    };
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetVentureRoundInvestmentsOffsetResponse = (GetOffsetPaginatedRoundInvestmentsOutputBody);

export type GetVentureRoundInvestmentsOffsetError = (ErrorModel);

export type GetVentureRoundsCursorData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetVentureRoundsCursorResponse = (GetCursorPaginatedFixedTotalRoundsOutputBody);

export type GetVentureRoundsCursorError = (ErrorModel);

export type GetVentureDutchDynamicRoundsCursorData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetVentureDutchDynamicRoundsCursorResponse = (GetCursorPaginatedDutchDynamicRoundsOutputBody);

export type GetVentureDutchDynamicRoundsCursorError = (ErrorModel);

export type GetVentureDutchDynamicRoundsOffsetData = {
    path: {
        id: number;
    };
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetVentureDutchDynamicRoundsOffsetResponse = (GetOffsetPaginatedDutchDynamicRoundsOutputBody);

export type GetVentureDutchDynamicRoundsOffsetError = (ErrorModel);

export type GetVentureRegularDynamicRoundsCursorData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetVentureRegularDynamicRoundsCursorResponse = (GetCursorPaginatedRegularDynamicRoundsOutputBody);

export type GetVentureRegularDynamicRoundsCursorError = (ErrorModel);

export type GetVentureRegularDynamicRoundsOffsetData = {
    path: {
        id: number;
    };
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetVentureRegularDynamicRoundsOffsetResponse = (GetOffsetPaginatedRegularDynamicRoundsOutputBody);

export type GetVentureRegularDynamicRoundsOffsetError = (ErrorModel);

export type GetVentureRoundsOffsetData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetVentureRoundsOffsetResponse = (GetCursorPaginatedFixedTotalRoundsOutputBody);

export type GetVentureRoundsOffsetError = (ErrorModel);

export type GetVentureFixedTotalRoundsCursorData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetVentureFixedTotalRoundsCursorResponse = (GetCursorPaginatedFixedTotalRoundsOutputBody);

export type GetVentureFixedTotalRoundsCursorError = (ErrorModel);

export type GetVentureFixedTotalRoundsOffsetData = {
    path: {
        id: number;
    };
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetVentureFixedTotalRoundsOffsetResponse = (GetOffsetPaginatedFixedTotalRoundsOutputBody);

export type GetVentureFixedTotalRoundsOffsetError = (ErrorModel);

export type GetVenturePartialTotalRoundsCursorData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetVenturePartialTotalRoundsCursorResponse = (GetCursorPaginatedPartialTotalRoundsOutputBody);

export type GetVenturePartialTotalRoundsCursorError = (ErrorModel);

export type GetVenturePartialTotalRoundsOffsetData = {
    path: {
        id: number;
    };
    query?: {
        page?: number;
        pageSize?: number;
    };
};

export type GetVenturePartialTotalRoundsOffsetResponse = (GetOffsetPaginatedPartialTotalRoundsOutputBody);

export type GetVenturePartialTotalRoundsOffsetError = (ErrorModel);

export type CreateAccountResponseTransformer = (data: any) => Promise<CreateAccountResponse>;

export type SingleAccountResponseBodyModelResponseTransformer = (data: any) => SingleAccountResponseBody;

export type AccountModelResponseTransformer = (data: any) => Account;

export const AccountModelResponseTransformer: AccountModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const SingleAccountResponseBodyModelResponseTransformer: SingleAccountResponseBodyModelResponseTransformer = data => {
    if (data?.account) {
        AccountModelResponseTransformer(data.account);
    }
    return data;
};

export const CreateAccountResponseTransformer: CreateAccountResponseTransformer = async (data) => {
    SingleAccountResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAccountByIdResponseTransformer = (data: any) => Promise<GetAccountByIdResponse>;

export const GetAccountByIdResponseTransformer: GetAccountByIdResponseTransformer = async (data) => {
    SingleAccountResponseBodyModelResponseTransformer(data);
    return data;
};

export type UpdateAccountResponseTransformer = (data: any) => Promise<UpdateAccountResponse>;

export const UpdateAccountResponseTransformer: UpdateAccountResponseTransformer = async (data) => {
    SingleAccountResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAccountBusinessesResponseTransformer = (data: any) => Promise<GetAccountBusinessesResponse>;

export type GetBusinessesOutputBodyModelResponseTransformer = (data: any) => GetBusinessesOutputBody;

export type BusinessModelResponseTransformer = (data: any) => Business;

export type AddressModelResponseTransformer = (data: any) => Address;

export const AddressModelResponseTransformer: AddressModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const BusinessModelResponseTransformer: BusinessModelResponseTransformer = data => {
    if (data?.address) {
        AddressModelResponseTransformer(data.address);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.foundingDate) {
        data.foundingDate = new Date(data.foundingDate);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const GetBusinessesOutputBodyModelResponseTransformer: GetBusinessesOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.businesses)) {
        data.businesses.forEach(BusinessModelResponseTransformer);
    }
    return data;
};

export const GetAccountBusinessesResponseTransformer: GetAccountBusinessesResponseTransformer = async (data) => {
    GetBusinessesOutputBodyModelResponseTransformer(data);
    return data;
};

export type CreateRoundInvestmentResponseTransformer = (data: any) => Promise<CreateRoundInvestmentResponse>;

export type SingleRoundInvestmentResponseBodyModelResponseTransformer = (data: any) => SingleRoundInvestmentResponseBody;

export type RoundInvestmentModelResponseTransformer = (data: any) => RoundInvestment;

export type RoundModelResponseTransformer = (data: any) => Round;

export const RoundModelResponseTransformer: RoundModelResponseTransformer = data => {
    if (data?.beginsAt) {
        data.beginsAt = new Date(data.beginsAt);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.endsAt) {
        data.endsAt = new Date(data.endsAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const RoundInvestmentModelResponseTransformer: RoundInvestmentModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.investor) {
        AccountModelResponseTransformer(data.investor);
    }
    if (data?.paidAt) {
        data.paidAt = new Date(data.paidAt);
    }
    if (data?.round) {
        RoundModelResponseTransformer(data.round);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const SingleRoundInvestmentResponseBodyModelResponseTransformer: SingleRoundInvestmentResponseBodyModelResponseTransformer = data => {
    if (data?.investment) {
        RoundInvestmentModelResponseTransformer(data.investment);
    }
    return data;
};

export const CreateRoundInvestmentResponseTransformer: CreateRoundInvestmentResponseTransformer = async (data) => {
    SingleRoundInvestmentResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAccountRoundInvestmentsCursorResponseTransformer = (data: any) => Promise<GetAccountRoundInvestmentsCursorResponse>;

export type GetCursorPaginatedRoundInvestmentsOutputBodyModelResponseTransformer = (data: any) => GetCursorPaginatedRoundInvestmentsOutputBody;

export const GetCursorPaginatedRoundInvestmentsOutputBodyModelResponseTransformer: GetCursorPaginatedRoundInvestmentsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.investments)) {
        data.investments.forEach(RoundInvestmentModelResponseTransformer);
    }
    return data;
};

export const GetAccountRoundInvestmentsCursorResponseTransformer: GetAccountRoundInvestmentsCursorResponseTransformer = async (data) => {
    GetCursorPaginatedRoundInvestmentsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetRoundInvestmentsOffsetResponseTransformer = (data: any) => Promise<GetRoundInvestmentsOffsetResponse>;

export type GetOffsetPaginatedRoundInvestmentsOutputBodyModelResponseTransformer = (data: any) => GetOffsetPaginatedRoundInvestmentsOutputBody;

export const GetOffsetPaginatedRoundInvestmentsOutputBodyModelResponseTransformer: GetOffsetPaginatedRoundInvestmentsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.investments)) {
        data.investments.forEach(RoundInvestmentModelResponseTransformer);
    }
    return data;
};

export const GetRoundInvestmentsOffsetResponseTransformer: GetRoundInvestmentsOffsetResponseTransformer = async (data) => {
    GetOffsetPaginatedRoundInvestmentsOutputBodyModelResponseTransformer(data);
    return data;
};

export type CreateBusinessResponseTransformer = (data: any) => Promise<CreateBusinessResponse>;

export type SingleBusinessResponseBodyModelResponseTransformer = (data: any) => SingleBusinessResponseBody;

export const SingleBusinessResponseBodyModelResponseTransformer: SingleBusinessResponseBodyModelResponseTransformer = data => {
    if (data?.business) {
        BusinessModelResponseTransformer(data.business);
    }
    return data;
};

export const CreateBusinessResponseTransformer: CreateBusinessResponseTransformer = async (data) => {
    SingleBusinessResponseBodyModelResponseTransformer(data);
    return data;
};

export type UpdateBusinessMemberResponseTransformer = (data: any) => Promise<UpdateBusinessMemberResponse>;

export type SingleBusinessMemberResponseBodyModelResponseTransformer = (data: any) => SingleBusinessMemberResponseBody;

export type BusinessMemberModelResponseTransformer = (data: any) => BusinessMember;

export const BusinessMemberModelResponseTransformer: BusinessMemberModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const SingleBusinessMemberResponseBodyModelResponseTransformer: SingleBusinessMemberResponseBodyModelResponseTransformer = data => {
    if (data?.businessMember) {
        BusinessMemberModelResponseTransformer(data.businessMember);
    }
    return data;
};

export const UpdateBusinessMemberResponseTransformer: UpdateBusinessMemberResponseTransformer = async (data) => {
    SingleBusinessMemberResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetBusinessByIdResponseTransformer = (data: any) => Promise<GetBusinessByIdResponse>;

export const GetBusinessByIdResponseTransformer: GetBusinessByIdResponseTransformer = async (data) => {
    SingleBusinessResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetBusinessMembersResponseTransformer = (data: any) => Promise<GetBusinessMembersResponse>;

export type GetOffsetPaginatedBusinessMembersResponseBodyModelResponseTransformer = (data: any) => GetOffsetPaginatedBusinessMembersResponseBody;

export const GetOffsetPaginatedBusinessMembersResponseBodyModelResponseTransformer: GetOffsetPaginatedBusinessMembersResponseBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.businessMembers)) {
        data.businessMembers.forEach(BusinessMemberModelResponseTransformer);
    }
    return data;
};

export const GetBusinessMembersResponseTransformer: GetBusinessMembersResponseTransformer = async (data) => {
    GetOffsetPaginatedBusinessMembersResponseBodyModelResponseTransformer(data);
    return data;
};

export type CreateBusinessMemberResponseTransformer = (data: any) => Promise<CreateBusinessMemberResponse>;

export const CreateBusinessMemberResponseTransformer: CreateBusinessMemberResponseTransformer = async (data) => {
    SingleBusinessMemberResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetBusinessRecievedRoundInvestmentsCursorResponseTransformer = (data: any) => Promise<GetBusinessRecievedRoundInvestmentsCursorResponse>;

export const GetBusinessRecievedRoundInvestmentsCursorResponseTransformer: GetBusinessRecievedRoundInvestmentsCursorResponseTransformer = async (data) => {
    GetCursorPaginatedRoundInvestmentsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetBusinessRoundsResponseTransformer = (data: any) => Promise<GetBusinessRoundsResponse>;

export type GetCursorPaginatedRoundsWithSubtypesOutputBodyModelResponseTransformer = (data: any) => GetCursorPaginatedRoundsWithSubtypesOutputBody;

export type RoundWithSubtypesModelResponseTransformer = (data: any) => RoundWithSubtypes;

export type DutchDynamicRoundModelResponseTransformer = (data: any) => DutchDynamicRound;

export const DutchDynamicRoundModelResponseTransformer: DutchDynamicRoundModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.round) {
        RoundModelResponseTransformer(data.round);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export type FixedTotalRoundModelResponseTransformer = (data: any) => FixedTotalRound;

export const FixedTotalRoundModelResponseTransformer: FixedTotalRoundModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.round) {
        RoundModelResponseTransformer(data.round);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export type PartialTotalRoundModelResponseTransformer = (data: any) => PartialTotalRound;

export const PartialTotalRoundModelResponseTransformer: PartialTotalRoundModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.round) {
        RoundModelResponseTransformer(data.round);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export type RegularDynamicRoundModelResponseTransformer = (data: any) => RegularDynamicRound;

export const RegularDynamicRoundModelResponseTransformer: RegularDynamicRoundModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.round) {
        RoundModelResponseTransformer(data.round);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const RoundWithSubtypesModelResponseTransformer: RoundWithSubtypesModelResponseTransformer = data => {
    if (data?.beginsAt) {
        data.beginsAt = new Date(data.beginsAt);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.dutchDynamicRound) {
        DutchDynamicRoundModelResponseTransformer(data.dutchDynamicRound);
    }
    if (data?.endsAt) {
        data.endsAt = new Date(data.endsAt);
    }
    if (data?.fixedTotalRound) {
        FixedTotalRoundModelResponseTransformer(data.fixedTotalRound);
    }
    if (data?.partialTotalRound) {
        PartialTotalRoundModelResponseTransformer(data.partialTotalRound);
    }
    if (data?.regularDynamicRound) {
        RegularDynamicRoundModelResponseTransformer(data.regularDynamicRound);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const GetCursorPaginatedRoundsWithSubtypesOutputBodyModelResponseTransformer: GetCursorPaginatedRoundsWithSubtypesOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.roundsWithSubtypes)) {
        data.roundsWithSubtypes.forEach(RoundWithSubtypesModelResponseTransformer);
    }
    return data;
};

export const GetBusinessRoundsResponseTransformer: GetBusinessRoundsResponseTransformer = async (data) => {
    GetCursorPaginatedRoundsWithSubtypesOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetBusinessVenturesResponseTransformer = (data: any) => Promise<GetBusinessVenturesResponse>;

export type GetCursorPaginatedVenturesOutputBodyModelResponseTransformer = (data: any) => GetCursorPaginatedVenturesOutputBody;

export type VentureModelResponseTransformer = (data: any) => Venture;

export const VentureModelResponseTransformer: VentureModelResponseTransformer = data => {
    if (data?.address) {
        AddressModelResponseTransformer(data.address);
    }
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const GetCursorPaginatedVenturesOutputBodyModelResponseTransformer: GetCursorPaginatedVenturesOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.ventures)) {
        data.ventures.forEach(VentureModelResponseTransformer);
    }
    return data;
};

export const GetBusinessVenturesResponseTransformer: GetBusinessVenturesResponseTransformer = async (data) => {
    GetCursorPaginatedVenturesOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetRoundByCursorResponseTransformer = (data: any) => Promise<GetRoundByCursorResponse>;

export const GetRoundByCursorResponseTransformer: GetRoundByCursorResponseTransformer = async (data) => {
    GetCursorPaginatedRoundsWithSubtypesOutputBodyModelResponseTransformer(data);
    return data;
};

export type CreateDutchDynamicRoundResponseTransformer = (data: any) => Promise<CreateDutchDynamicRoundResponse>;

export type SingleDutchDynamicRoundResponseBodyModelResponseTransformer = (data: any) => SingleDutchDynamicRoundResponseBody;

export const SingleDutchDynamicRoundResponseBodyModelResponseTransformer: SingleDutchDynamicRoundResponseBodyModelResponseTransformer = data => {
    if (data?.round) {
        DutchDynamicRoundModelResponseTransformer(data.round);
    }
    return data;
};

export const CreateDutchDynamicRoundResponseTransformer: CreateDutchDynamicRoundResponseTransformer = async (data) => {
    SingleDutchDynamicRoundResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAllDutchDynamicRoundsCursorResponseTransformer = (data: any) => Promise<GetAllDutchDynamicRoundsCursorResponse>;

export type GetCursorPaginatedDutchDynamicRoundsOutputBodyModelResponseTransformer = (data: any) => GetCursorPaginatedDutchDynamicRoundsOutputBody;

export const GetCursorPaginatedDutchDynamicRoundsOutputBodyModelResponseTransformer: GetCursorPaginatedDutchDynamicRoundsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.dutchDynamicRounds)) {
        data.dutchDynamicRounds.forEach(DutchDynamicRoundModelResponseTransformer);
    }
    return data;
};

export const GetAllDutchDynamicRoundsCursorResponseTransformer: GetAllDutchDynamicRoundsCursorResponseTransformer = async (data) => {
    GetCursorPaginatedDutchDynamicRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetAllDutchDynamicRoundsOffsetResponseTransformer = (data: any) => Promise<GetAllDutchDynamicRoundsOffsetResponse>;

export type GetOffsetPaginatedDutchDynamicRoundsOutputBodyModelResponseTransformer = (data: any) => GetOffsetPaginatedDutchDynamicRoundsOutputBody;

export const GetOffsetPaginatedDutchDynamicRoundsOutputBodyModelResponseTransformer: GetOffsetPaginatedDutchDynamicRoundsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.dutchDynamicRounds)) {
        data.dutchDynamicRounds.forEach(DutchDynamicRoundModelResponseTransformer);
    }
    return data;
};

export const GetAllDutchDynamicRoundsOffsetResponseTransformer: GetAllDutchDynamicRoundsOffsetResponseTransformer = async (data) => {
    GetOffsetPaginatedDutchDynamicRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetDutchDynamicRoundByIdResponseTransformer = (data: any) => Promise<GetDutchDynamicRoundByIdResponse>;

export const GetDutchDynamicRoundByIdResponseTransformer: GetDutchDynamicRoundByIdResponseTransformer = async (data) => {
    SingleDutchDynamicRoundResponseBodyModelResponseTransformer(data);
    return data;
};

export type CreateRegularDynamicRoundResponseTransformer = (data: any) => Promise<CreateRegularDynamicRoundResponse>;

export type SingleRegularDynamicRoundResponseBodyModelResponseTransformer = (data: any) => SingleRegularDynamicRoundResponseBody;

export const SingleRegularDynamicRoundResponseBodyModelResponseTransformer: SingleRegularDynamicRoundResponseBodyModelResponseTransformer = data => {
    if (data?.round) {
        RegularDynamicRoundModelResponseTransformer(data.round);
    }
    return data;
};

export const CreateRegularDynamicRoundResponseTransformer: CreateRegularDynamicRoundResponseTransformer = async (data) => {
    SingleRegularDynamicRoundResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAllRegularDynamicRoundsCursorResponseTransformer = (data: any) => Promise<GetAllRegularDynamicRoundsCursorResponse>;

export type GetCursorPaginatedRegularDynamicRoundsOutputBodyModelResponseTransformer = (data: any) => GetCursorPaginatedRegularDynamicRoundsOutputBody;

export const GetCursorPaginatedRegularDynamicRoundsOutputBodyModelResponseTransformer: GetCursorPaginatedRegularDynamicRoundsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.regularDynamicRounds)) {
        data.regularDynamicRounds.forEach(RegularDynamicRoundModelResponseTransformer);
    }
    return data;
};

export const GetAllRegularDynamicRoundsCursorResponseTransformer: GetAllRegularDynamicRoundsCursorResponseTransformer = async (data) => {
    GetCursorPaginatedRegularDynamicRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetAllRegularDynamicRoundsOffsetResponseTransformer = (data: any) => Promise<GetAllRegularDynamicRoundsOffsetResponse>;

export type GetOffsetPaginatedRegularDynamicRoundsOutputBodyModelResponseTransformer = (data: any) => GetOffsetPaginatedRegularDynamicRoundsOutputBody;

export const GetOffsetPaginatedRegularDynamicRoundsOutputBodyModelResponseTransformer: GetOffsetPaginatedRegularDynamicRoundsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.regularDynamicRounds)) {
        data.regularDynamicRounds.forEach(RegularDynamicRoundModelResponseTransformer);
    }
    return data;
};

export const GetAllRegularDynamicRoundsOffsetResponseTransformer: GetAllRegularDynamicRoundsOffsetResponseTransformer = async (data) => {
    GetOffsetPaginatedRegularDynamicRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetRegularDynamicRoundByIdResponseTransformer = (data: any) => Promise<GetRegularDynamicRoundByIdResponse>;

export const GetRegularDynamicRoundByIdResponseTransformer: GetRegularDynamicRoundByIdResponseTransformer = async (data) => {
    SingleRegularDynamicRoundResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetRoundByPageResponseTransformer = (data: any) => Promise<GetRoundByPageResponse>;

export type GetOffsetPaginatedRoundsWithSubtypesOutputBodyModelResponseTransformer = (data: any) => GetOffsetPaginatedRoundsWithSubtypesOutputBody;

export const GetOffsetPaginatedRoundsWithSubtypesOutputBodyModelResponseTransformer: GetOffsetPaginatedRoundsWithSubtypesOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.roundsWithSubtypes)) {
        data.roundsWithSubtypes.forEach(RoundWithSubtypesModelResponseTransformer);
    }
    return data;
};

export const GetRoundByPageResponseTransformer: GetRoundByPageResponseTransformer = async (data) => {
    GetOffsetPaginatedRoundsWithSubtypesOutputBodyModelResponseTransformer(data);
    return data;
};

export type CreateFixedTotalRoundResponseTransformer = (data: any) => Promise<CreateFixedTotalRoundResponse>;

export type SingleFixedTotalRoundResponseBodyModelResponseTransformer = (data: any) => SingleFixedTotalRoundResponseBody;

export const SingleFixedTotalRoundResponseBodyModelResponseTransformer: SingleFixedTotalRoundResponseBodyModelResponseTransformer = data => {
    if (data?.round) {
        FixedTotalRoundModelResponseTransformer(data.round);
    }
    return data;
};

export const CreateFixedTotalRoundResponseTransformer: CreateFixedTotalRoundResponseTransformer = async (data) => {
    SingleFixedTotalRoundResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAllFixedTotalRoundsCursorResponseTransformer = (data: any) => Promise<GetAllFixedTotalRoundsCursorResponse>;

export type GetCursorPaginatedFixedTotalRoundsOutputBodyModelResponseTransformer = (data: any) => GetCursorPaginatedFixedTotalRoundsOutputBody;

export const GetCursorPaginatedFixedTotalRoundsOutputBodyModelResponseTransformer: GetCursorPaginatedFixedTotalRoundsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.fixedTotalRounds)) {
        data.fixedTotalRounds.forEach(FixedTotalRoundModelResponseTransformer);
    }
    return data;
};

export const GetAllFixedTotalRoundsCursorResponseTransformer: GetAllFixedTotalRoundsCursorResponseTransformer = async (data) => {
    GetCursorPaginatedFixedTotalRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetAllFixedTotalRoundsOffsetResponseTransformer = (data: any) => Promise<GetAllFixedTotalRoundsOffsetResponse>;

export type GetOffsetPaginatedFixedTotalRoundsOutputBodyModelResponseTransformer = (data: any) => GetOffsetPaginatedFixedTotalRoundsOutputBody;

export const GetOffsetPaginatedFixedTotalRoundsOutputBodyModelResponseTransformer: GetOffsetPaginatedFixedTotalRoundsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.fixedTotalRounds)) {
        data.fixedTotalRounds.forEach(FixedTotalRoundModelResponseTransformer);
    }
    return data;
};

export const GetAllFixedTotalRoundsOffsetResponseTransformer: GetAllFixedTotalRoundsOffsetResponseTransformer = async (data) => {
    GetOffsetPaginatedFixedTotalRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetFixedTotalRoundByIdResponseTransformer = (data: any) => Promise<GetFixedTotalRoundByIdResponse>;

export const GetFixedTotalRoundByIdResponseTransformer: GetFixedTotalRoundByIdResponseTransformer = async (data) => {
    SingleFixedTotalRoundResponseBodyModelResponseTransformer(data);
    return data;
};

export type CreatePartialTotalRoundResponseTransformer = (data: any) => Promise<CreatePartialTotalRoundResponse>;

export type SinglePartialTotalRoundResponseBodyModelResponseTransformer = (data: any) => SinglePartialTotalRoundResponseBody;

export const SinglePartialTotalRoundResponseBodyModelResponseTransformer: SinglePartialTotalRoundResponseBodyModelResponseTransformer = data => {
    if (data?.round) {
        PartialTotalRoundModelResponseTransformer(data.round);
    }
    return data;
};

export const CreatePartialTotalRoundResponseTransformer: CreatePartialTotalRoundResponseTransformer = async (data) => {
    SinglePartialTotalRoundResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAllPartialTotalRoundsCursorResponseTransformer = (data: any) => Promise<GetAllPartialTotalRoundsCursorResponse>;

export type GetCursorPaginatedPartialTotalRoundsOutputBodyModelResponseTransformer = (data: any) => GetCursorPaginatedPartialTotalRoundsOutputBody;

export const GetCursorPaginatedPartialTotalRoundsOutputBodyModelResponseTransformer: GetCursorPaginatedPartialTotalRoundsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.partialTotalRounds)) {
        data.partialTotalRounds.forEach(PartialTotalRoundModelResponseTransformer);
    }
    return data;
};

export const GetAllPartialTotalRoundsCursorResponseTransformer: GetAllPartialTotalRoundsCursorResponseTransformer = async (data) => {
    GetCursorPaginatedPartialTotalRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetAllPartialTotalRoundsOffsetResponseTransformer = (data: any) => Promise<GetAllPartialTotalRoundsOffsetResponse>;

export type GetOffsetPaginatedPartialTotalRoundsOutputBodyModelResponseTransformer = (data: any) => GetOffsetPaginatedPartialTotalRoundsOutputBody;

export const GetOffsetPaginatedPartialTotalRoundsOutputBodyModelResponseTransformer: GetOffsetPaginatedPartialTotalRoundsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.partialTotalRounds)) {
        data.partialTotalRounds.forEach(PartialTotalRoundModelResponseTransformer);
    }
    return data;
};

export const GetAllPartialTotalRoundsOffsetResponseTransformer: GetAllPartialTotalRoundsOffsetResponseTransformer = async (data) => {
    GetOffsetPaginatedPartialTotalRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetPartialTotalRoundByIdResponseTransformer = (data: any) => Promise<GetPartialTotalRoundByIdResponse>;

export const GetPartialTotalRoundByIdResponseTransformer: GetPartialTotalRoundByIdResponseTransformer = async (data) => {
    SinglePartialTotalRoundResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetRoundByIdResponseTransformer = (data: any) => Promise<GetRoundByIdResponse>;

export type SingleRoundWithSubtypesResponseBodyModelResponseTransformer = (data: any) => SingleRoundWithSubtypesResponseBody;

export const SingleRoundWithSubtypesResponseBodyModelResponseTransformer: SingleRoundWithSubtypesResponseBodyModelResponseTransformer = data => {
    if (data?.round) {
        RoundWithSubtypesModelResponseTransformer(data.round);
    }
    return data;
};

export const GetRoundByIdResponseTransformer: GetRoundByIdResponseTransformer = async (data) => {
    SingleRoundWithSubtypesResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetRoundRoundInvestmentsCursorResponseTransformer = (data: any) => Promise<GetRoundRoundInvestmentsCursorResponse>;

export const GetRoundRoundInvestmentsCursorResponseTransformer: GetRoundRoundInvestmentsCursorResponseTransformer = async (data) => {
    GetCursorPaginatedRoundInvestmentsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetRoundRoundInvestmentsOffsetResponseTransformer = (data: any) => Promise<GetRoundRoundInvestmentsOffsetResponse>;

export const GetRoundRoundInvestmentsOffsetResponseTransformer: GetRoundRoundInvestmentsOffsetResponseTransformer = async (data) => {
    GetOffsetPaginatedRoundInvestmentsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetUserAccountResponseTransformer = (data: any) => Promise<GetUserAccountResponse>;

export const GetUserAccountResponseTransformer: GetUserAccountResponseTransformer = async (data) => {
    SingleAccountResponseBodyModelResponseTransformer(data);
    return data;
};

export type CreateVentureResponseTransformer = (data: any) => Promise<CreateVentureResponse>;

export type SingleVentureResponseBodyModelResponseTransformer = (data: any) => SingleVentureResponseBody;

export const SingleVentureResponseBodyModelResponseTransformer: SingleVentureResponseBodyModelResponseTransformer = data => {
    if (data?.venture) {
        VentureModelResponseTransformer(data.venture);
    }
    return data;
};

export const CreateVentureResponseTransformer: CreateVentureResponseTransformer = async (data) => {
    SingleVentureResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAllVenturesCursorResponseTransformer = (data: any) => Promise<GetAllVenturesCursorResponse>;

export const GetAllVenturesCursorResponseTransformer: GetAllVenturesCursorResponseTransformer = async (data) => {
    GetCursorPaginatedVenturesOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetAllVenturesOffsetResponseTransformer = (data: any) => Promise<GetAllVenturesOffsetResponse>;

export type GetOffsetPaginatedVenturesOutputBodyModelResponseTransformer = (data: any) => GetOffsetPaginatedVenturesOutputBody;

export const GetOffsetPaginatedVenturesOutputBodyModelResponseTransformer: GetOffsetPaginatedVenturesOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.ventures)) {
        data.ventures.forEach(VentureModelResponseTransformer);
    }
    return data;
};

export const GetAllVenturesOffsetResponseTransformer: GetAllVenturesOffsetResponseTransformer = async (data) => {
    GetOffsetPaginatedVenturesOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetVentureByIdResponseTransformer = (data: any) => Promise<GetVentureByIdResponse>;

export const GetVentureByIdResponseTransformer: GetVentureByIdResponseTransformer = async (data) => {
    SingleVentureResponseBodyModelResponseTransformer(data);
    return data;
};

export type UpdateVentureResponseTransformer = (data: any) => Promise<UpdateVentureResponse>;

export const UpdateVentureResponseTransformer: UpdateVentureResponseTransformer = async (data) => {
    SingleVentureResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetVentureRoundInvestmentsCursorResponseTransformer = (data: any) => Promise<GetVentureRoundInvestmentsCursorResponse>;

export const GetVentureRoundInvestmentsCursorResponseTransformer: GetVentureRoundInvestmentsCursorResponseTransformer = async (data) => {
    GetCursorPaginatedRoundInvestmentsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetVentureRoundInvestmentsOffsetResponseTransformer = (data: any) => Promise<GetVentureRoundInvestmentsOffsetResponse>;

export const GetVentureRoundInvestmentsOffsetResponseTransformer: GetVentureRoundInvestmentsOffsetResponseTransformer = async (data) => {
    GetOffsetPaginatedRoundInvestmentsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetVentureRoundsCursorResponseTransformer = (data: any) => Promise<GetVentureRoundsCursorResponse>;

export const GetVentureRoundsCursorResponseTransformer: GetVentureRoundsCursorResponseTransformer = async (data) => {
    GetCursorPaginatedFixedTotalRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetVentureDutchDynamicRoundsCursorResponseTransformer = (data: any) => Promise<GetVentureDutchDynamicRoundsCursorResponse>;

export const GetVentureDutchDynamicRoundsCursorResponseTransformer: GetVentureDutchDynamicRoundsCursorResponseTransformer = async (data) => {
    GetCursorPaginatedDutchDynamicRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetVentureDutchDynamicRoundsOffsetResponseTransformer = (data: any) => Promise<GetVentureDutchDynamicRoundsOffsetResponse>;

export const GetVentureDutchDynamicRoundsOffsetResponseTransformer: GetVentureDutchDynamicRoundsOffsetResponseTransformer = async (data) => {
    GetOffsetPaginatedDutchDynamicRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetVentureRegularDynamicRoundsCursorResponseTransformer = (data: any) => Promise<GetVentureRegularDynamicRoundsCursorResponse>;

export const GetVentureRegularDynamicRoundsCursorResponseTransformer: GetVentureRegularDynamicRoundsCursorResponseTransformer = async (data) => {
    GetCursorPaginatedRegularDynamicRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetVentureRegularDynamicRoundsOffsetResponseTransformer = (data: any) => Promise<GetVentureRegularDynamicRoundsOffsetResponse>;

export const GetVentureRegularDynamicRoundsOffsetResponseTransformer: GetVentureRegularDynamicRoundsOffsetResponseTransformer = async (data) => {
    GetOffsetPaginatedRegularDynamicRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetVentureRoundsOffsetResponseTransformer = (data: any) => Promise<GetVentureRoundsOffsetResponse>;

export const GetVentureRoundsOffsetResponseTransformer: GetVentureRoundsOffsetResponseTransformer = async (data) => {
    GetCursorPaginatedFixedTotalRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetVentureFixedTotalRoundsCursorResponseTransformer = (data: any) => Promise<GetVentureFixedTotalRoundsCursorResponse>;

export const GetVentureFixedTotalRoundsCursorResponseTransformer: GetVentureFixedTotalRoundsCursorResponseTransformer = async (data) => {
    GetCursorPaginatedFixedTotalRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetVentureFixedTotalRoundsOffsetResponseTransformer = (data: any) => Promise<GetVentureFixedTotalRoundsOffsetResponse>;

export const GetVentureFixedTotalRoundsOffsetResponseTransformer: GetVentureFixedTotalRoundsOffsetResponseTransformer = async (data) => {
    GetOffsetPaginatedFixedTotalRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetVenturePartialTotalRoundsCursorResponseTransformer = (data: any) => Promise<GetVenturePartialTotalRoundsCursorResponse>;

export const GetVenturePartialTotalRoundsCursorResponseTransformer: GetVenturePartialTotalRoundsCursorResponseTransformer = async (data) => {
    GetCursorPaginatedPartialTotalRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetVenturePartialTotalRoundsOffsetResponseTransformer = (data: any) => Promise<GetVenturePartialTotalRoundsOffsetResponse>;

export const GetVenturePartialTotalRoundsOffsetResponseTransformer: GetVenturePartialTotalRoundsOffsetResponseTransformer = async (data) => {
    GetOffsetPaginatedPartialTotalRoundsOutputBodyModelResponseTransformer(data);
    return data;
};