// This file is auto-generated by @hey-api/openapi-ts

export type Account = {
    createdAt: Date;
    deletedAt: (Date) | null;
    firstName: string;
    id: number;
    lastName: string;
    updatedAt: (Date) | null;
    userId: string;
};

export type CreateAccountParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    firstName: string;
    lastName: string;
    userId: string;
};

export type CreateOfferParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    amount: number;
    currency: string;
    offererAccountId: number;
    percentageAmount: number;
    roundId: number;
};

export type CreateRoundParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    endTime: Date;
    isAuctioned: boolean;
    maximumInvestmentPercentage: number;
    minimumInvestmentPercentage: number;
    offeredPercentage: number;
    percentageValue: number;
    percentageValueCurrency: string;
    startTime: Date;
    ventureId: number;
};

export type CreateVentureParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    description: string;
    name: string;
    ownerAccountId: number;
};

export type ErrorDetail = {
    /**
     * Where the error occurred, e.g. 'body.items[3].tags' or 'path.thing-id'
     */
    location?: string;
    /**
     * Error message text
     */
    message?: string;
    /**
     * The value at the given location
     */
    value?: unknown;
};

export type ErrorModel = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    /**
     * A human-readable explanation specific to this occurrence of the problem.
     */
    detail?: string;
    /**
     * Optional list of individual error details
     */
    errors?: Array<ErrorDetail> | null;
    /**
     * A URI reference that identifies the specific occurrence of the problem.
     */
    instance?: string;
    /**
     * HTTP status code
     */
    status?: number;
    /**
     * A short, human-readable summary of the problem type. This value should not change between occurrences of the error.
     */
    title?: string;
    /**
     * A URI reference to human-readable documentation for the error.
     */
    type?: string;
};

export type GetAllVenturesOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    message: string;
    nextCursor: (number) | null;
    ventures: Array<Venture> | null;
};

export type GetManyOffersOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    message: string;
    nextCursor: (number) | null;
    offers: Array<Offer> | null;
};

export type GetManyRoundsOutputBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    hasMore: boolean;
    message: string;
    nextCursor: (number) | null;
    rounds: Array<Round> | null;
};

export type MessageResponse = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
};

export type Offer = {
    amount: number;
    createdAt: Date;
    currency: string;
    deletedAt: (Date) | null;
    id: number;
    offererAccountId: number;
    percentageAmount: number;
    roundId: number;
    status: 'pending' | 'accepted' | 'rejected' | 'withdrawn';
    updatedAt: (Date) | null;
};

export type status = 'pending' | 'accepted' | 'rejected' | 'withdrawn';

export const status = {
    PENDING: 'pending',
    ACCEPTED: 'accepted',
    REJECTED: 'rejected',
    WITHDRAWN: 'withdrawn'
} as const;

export type Round = {
    createdAt: Date;
    deletedAt: (Date) | null;
    endTime: Date;
    id: number;
    isAuctioned: boolean;
    maximumInvestmentPercentage: number;
    minimumInvestmentPercentage: number;
    offeredPercentage: number;
    percentageValue: number;
    percentageValueCurrency: string;
    startTime: Date;
    updatedAt: (Date) | null;
    ventureId: number;
};

export type SingleAccountResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    account: Account;
    message: string;
};

export type SingleOfferResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
    offer: Offer;
};

export type SingleRoundResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
    round: Round;
};

export type SingleVentureResponseBody = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    message: string;
    venture: Venture;
};

export type UpdateAccountParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    firstName: string;
    lastName: string;
};

export type UpdateOfferParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    status: 'pending' | 'accepted' | 'rejected' | 'withdrawn';
};

export type UpdateRoundParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    endTime: Date;
};

export type UpdateVentureParams = {
    /**
     * A URL to the JSON Schema for this object.
     */
    readonly $schema?: string;
    description: string;
    name: string;
};

export type Venture = {
    createdAt: Date;
    deletedAt: (Date) | null;
    description: string;
    id: number;
    name: string;
    ownerAccountId: number;
    updatedAt: (Date) | null;
};

export type CreateAccountData = {
    body: CreateAccountParams;
};

export type CreateAccountResponse = (SingleAccountResponseBody);

export type CreateAccountError = (ErrorModel);

export type GetAccountByUserIdData = {
    path: {
        userId: string;
    };
};

export type GetAccountByUserIdResponse = (SingleAccountResponseBody);

export type GetAccountByUserIdError = (ErrorModel);

export type DeleteAccountData = {
    path: {
        id: number;
    };
};

export type DeleteAccountResponse = (MessageResponse);

export type DeleteAccountError = (ErrorModel);

export type GetAccountByIdData = {
    path: {
        id: number;
    };
};

export type GetAccountByIdResponse = (SingleAccountResponseBody);

export type GetAccountByIdError = (ErrorModel);

export type UpdateAccountData = {
    body: UpdateAccountParams;
    path: {
        id: number;
    };
};

export type UpdateAccountResponse = (SingleAccountResponseBody);

export type UpdateAccountError = (ErrorModel);

export type HealthCheckResponse = (MessageResponse);

export type HealthCheckError = (ErrorModel);

export type GetAllOffersData = {
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetAllOffersResponse = (GetManyOffersOutputBody);

export type GetAllOffersError = (ErrorModel);

export type CreateOfferData = {
    body: CreateOfferParams;
};

export type CreateOfferResponse = (SingleOfferResponseBody);

export type CreateOfferError = (ErrorModel);

export type GetOffersByRoundIdData = {
    path: {
        id: number;
    };
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetOffersByRoundIdResponse = (GetManyOffersOutputBody);

export type GetOffersByRoundIdError = (ErrorModel);

export type DeleteOfferData = {
    path: {
        id: number;
    };
};

export type DeleteOfferResponse = (MessageResponse);

export type DeleteOfferError = (ErrorModel);

export type GetOfferByIdData = {
    path: {
        id: number;
    };
};

export type GetOfferByIdResponse = (SingleOfferResponseBody);

export type GetOfferByIdError = (ErrorModel);

export type UpdateOfferStatusData = {
    body: UpdateOfferParams;
    path: {
        id: number;
    };
};

export type UpdateOfferStatusResponse = (SingleOfferResponseBody);

export type UpdateOfferStatusError = (ErrorModel);

export type GetAllRoundsData = {
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetAllRoundsResponse = (GetManyRoundsOutputBody);

export type GetAllRoundsError = (ErrorModel);

export type CreateRoundData = {
    body: CreateRoundParams;
};

export type CreateRoundResponse = (SingleRoundResponseBody);

export type CreateRoundError = (ErrorModel);

export type DeleteRoundData = {
    path: {
        id: number;
    };
};

export type DeleteRoundResponse = (MessageResponse);

export type DeleteRoundError = (ErrorModel);

export type GetRoundByIdData = {
    path: {
        id: number;
    };
};

export type GetRoundByIdResponse = (SingleRoundResponseBody);

export type GetRoundByIdError = (ErrorModel);

export type UpdateRoundData = {
    body: UpdateRoundParams;
    path: {
        id: number;
    };
};

export type UpdateRoundResponse = (SingleRoundResponseBody);

export type UpdateRoundError = (ErrorModel);

export type GetAllVenturesData = {
    query?: {
        cursor?: number;
        limit?: number;
    };
};

export type GetAllVenturesResponse = (GetAllVenturesOutputBody);

export type GetAllVenturesError = (ErrorModel);

export type CreateVentureData = {
    body: CreateVentureParams;
};

export type CreateVentureResponse = (SingleVentureResponseBody);

export type CreateVentureError = (ErrorModel);

export type DeleteVentureData = {
    path: {
        id: number;
    };
};

export type DeleteVentureResponse = (MessageResponse);

export type DeleteVentureError = (ErrorModel);

export type GetVentureByIdData = {
    path: {
        id: number;
    };
};

export type GetVentureByIdResponse = (SingleVentureResponseBody);

export type GetVentureByIdError = (ErrorModel);

export type UpdateVentureData = {
    body: UpdateVentureParams;
    path: {
        id: number;
    };
};

export type UpdateVentureResponse = (SingleVentureResponseBody);

export type UpdateVentureError = (ErrorModel);

export type CreateAccountResponseTransformer = (data: any) => Promise<CreateAccountResponse>;

export type SingleAccountResponseBodyModelResponseTransformer = (data: any) => SingleAccountResponseBody;

export type AccountModelResponseTransformer = (data: any) => Account;

export const AccountModelResponseTransformer: AccountModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const SingleAccountResponseBodyModelResponseTransformer: SingleAccountResponseBodyModelResponseTransformer = data => {
    if (data?.account) {
        AccountModelResponseTransformer(data.account);
    }
    return data;
};

export const CreateAccountResponseTransformer: CreateAccountResponseTransformer = async (data) => {
    SingleAccountResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAccountByUserIdResponseTransformer = (data: any) => Promise<GetAccountByUserIdResponse>;

export const GetAccountByUserIdResponseTransformer: GetAccountByUserIdResponseTransformer = async (data) => {
    SingleAccountResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAccountByIdResponseTransformer = (data: any) => Promise<GetAccountByIdResponse>;

export const GetAccountByIdResponseTransformer: GetAccountByIdResponseTransformer = async (data) => {
    SingleAccountResponseBodyModelResponseTransformer(data);
    return data;
};

export type UpdateAccountResponseTransformer = (data: any) => Promise<UpdateAccountResponse>;

export const UpdateAccountResponseTransformer: UpdateAccountResponseTransformer = async (data) => {
    SingleAccountResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAllOffersResponseTransformer = (data: any) => Promise<GetAllOffersResponse>;

export type GetManyOffersOutputBodyModelResponseTransformer = (data: any) => GetManyOffersOutputBody;

export type OfferModelResponseTransformer = (data: any) => Offer;

export const OfferModelResponseTransformer: OfferModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const GetManyOffersOutputBodyModelResponseTransformer: GetManyOffersOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.offers)) {
        data.offers.forEach(OfferModelResponseTransformer);
    }
    return data;
};

export const GetAllOffersResponseTransformer: GetAllOffersResponseTransformer = async (data) => {
    GetManyOffersOutputBodyModelResponseTransformer(data);
    return data;
};

export type CreateOfferResponseTransformer = (data: any) => Promise<CreateOfferResponse>;

export type SingleOfferResponseBodyModelResponseTransformer = (data: any) => SingleOfferResponseBody;

export const SingleOfferResponseBodyModelResponseTransformer: SingleOfferResponseBodyModelResponseTransformer = data => {
    if (data?.offer) {
        OfferModelResponseTransformer(data.offer);
    }
    return data;
};

export const CreateOfferResponseTransformer: CreateOfferResponseTransformer = async (data) => {
    SingleOfferResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetOffersByRoundIdResponseTransformer = (data: any) => Promise<GetOffersByRoundIdResponse>;

export const GetOffersByRoundIdResponseTransformer: GetOffersByRoundIdResponseTransformer = async (data) => {
    GetManyOffersOutputBodyModelResponseTransformer(data);
    return data;
};

export type GetOfferByIdResponseTransformer = (data: any) => Promise<GetOfferByIdResponse>;

export const GetOfferByIdResponseTransformer: GetOfferByIdResponseTransformer = async (data) => {
    SingleOfferResponseBodyModelResponseTransformer(data);
    return data;
};

export type UpdateOfferStatusResponseTransformer = (data: any) => Promise<UpdateOfferStatusResponse>;

export const UpdateOfferStatusResponseTransformer: UpdateOfferStatusResponseTransformer = async (data) => {
    SingleOfferResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAllRoundsResponseTransformer = (data: any) => Promise<GetAllRoundsResponse>;

export type GetManyRoundsOutputBodyModelResponseTransformer = (data: any) => GetManyRoundsOutputBody;

export type RoundModelResponseTransformer = (data: any) => Round;

export const RoundModelResponseTransformer: RoundModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.endTime) {
        data.endTime = new Date(data.endTime);
    }
    if (data?.startTime) {
        data.startTime = new Date(data.startTime);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const GetManyRoundsOutputBodyModelResponseTransformer: GetManyRoundsOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.rounds)) {
        data.rounds.forEach(RoundModelResponseTransformer);
    }
    return data;
};

export const GetAllRoundsResponseTransformer: GetAllRoundsResponseTransformer = async (data) => {
    GetManyRoundsOutputBodyModelResponseTransformer(data);
    return data;
};

export type CreateRoundResponseTransformer = (data: any) => Promise<CreateRoundResponse>;

export type SingleRoundResponseBodyModelResponseTransformer = (data: any) => SingleRoundResponseBody;

export const SingleRoundResponseBodyModelResponseTransformer: SingleRoundResponseBodyModelResponseTransformer = data => {
    if (data?.round) {
        RoundModelResponseTransformer(data.round);
    }
    return data;
};

export const CreateRoundResponseTransformer: CreateRoundResponseTransformer = async (data) => {
    SingleRoundResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetRoundByIdResponseTransformer = (data: any) => Promise<GetRoundByIdResponse>;

export const GetRoundByIdResponseTransformer: GetRoundByIdResponseTransformer = async (data) => {
    SingleRoundResponseBodyModelResponseTransformer(data);
    return data;
};

export type UpdateRoundResponseTransformer = (data: any) => Promise<UpdateRoundResponse>;

export const UpdateRoundResponseTransformer: UpdateRoundResponseTransformer = async (data) => {
    SingleRoundResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetAllVenturesResponseTransformer = (data: any) => Promise<GetAllVenturesResponse>;

export type GetAllVenturesOutputBodyModelResponseTransformer = (data: any) => GetAllVenturesOutputBody;

export type VentureModelResponseTransformer = (data: any) => Venture;

export const VentureModelResponseTransformer: VentureModelResponseTransformer = data => {
    if (data?.createdAt) {
        data.createdAt = new Date(data.createdAt);
    }
    if (data?.deletedAt) {
        data.deletedAt = new Date(data.deletedAt);
    }
    if (data?.updatedAt) {
        data.updatedAt = new Date(data.updatedAt);
    }
    return data;
};

export const GetAllVenturesOutputBodyModelResponseTransformer: GetAllVenturesOutputBodyModelResponseTransformer = data => {
    if (Array.isArray(data?.ventures)) {
        data.ventures.forEach(VentureModelResponseTransformer);
    }
    return data;
};

export const GetAllVenturesResponseTransformer: GetAllVenturesResponseTransformer = async (data) => {
    GetAllVenturesOutputBodyModelResponseTransformer(data);
    return data;
};

export type CreateVentureResponseTransformer = (data: any) => Promise<CreateVentureResponse>;

export type SingleVentureResponseBodyModelResponseTransformer = (data: any) => SingleVentureResponseBody;

export const SingleVentureResponseBodyModelResponseTransformer: SingleVentureResponseBodyModelResponseTransformer = data => {
    if (data?.venture) {
        VentureModelResponseTransformer(data.venture);
    }
    return data;
};

export const CreateVentureResponseTransformer: CreateVentureResponseTransformer = async (data) => {
    SingleVentureResponseBodyModelResponseTransformer(data);
    return data;
};

export type GetVentureByIdResponseTransformer = (data: any) => Promise<GetVentureByIdResponse>;

export const GetVentureByIdResponseTransformer: GetVentureByIdResponseTransformer = async (data) => {
    SingleVentureResponseBodyModelResponseTransformer(data);
    return data;
};

export type UpdateVentureResponseTransformer = (data: any) => Promise<UpdateVentureResponse>;

export const UpdateVentureResponseTransformer: UpdateVentureResponseTransformer = async (data) => {
    SingleVentureResponseBodyModelResponseTransformer(data);
    return data;
};