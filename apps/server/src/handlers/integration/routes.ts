import { SelectNangoConnectionSchema } from "@fundlevel/db/validation";
import { createRoute, z } from "@hono/zod-openapi";
import { NangoIntegration } from "@/lib/nango/types";
import { withAuth } from "@/middleware/with-auth";
import { ERROR_RESPONSE_SCHEMA } from "../shared/schemas";

export const integrationRoutes = {
	getConnections: createRoute({
		method: "get",
		path: "/connections",
		tags: ["Integrations"],
		description: "Get all connections for the current user",
		security: [{ apiKeyCookie: [] }],

		middleware: [withAuth()],
		responses: {
			200: {
				content: {
					"application/json": {
						schema: z.object({
							connections: z.array(SelectNangoConnectionSchema),
						}),
					},
				},
				description: "A list of connections for the user",
			},
			403: ERROR_RESPONSE_SCHEMA,
			500: ERROR_RESPONSE_SCHEMA,
		},
	}),
	sessionToken: createRoute({
		method: "post",
		path: "/:integration/session-token",
		tags: ["Integrations"],
		description: "Get the session token for the user",
		middleware: [withAuth()],
		security: [{ apiKeyCookie: [] }],
		request: {
			params: z.object({
				integration: z.nativeEnum(NangoIntegration),
			}),
		},
		responses: {
			200: {
				content: {
					"application/json": {
						schema: z.object({
							sessionToken: z
								.string()
								.describe("The session token generated by Nango"),
						}),
					},
				},
				description: "Session token generated by Nango",
			},
			403: ERROR_RESPONSE_SCHEMA,
			500: ERROR_RESPONSE_SCHEMA,
			409: ERROR_RESPONSE_SCHEMA,
		},
	}),
	webhook: createRoute({
		method: "post",
		path: "/webhook",
		tags: ["Integrations"],
		request: {
			headers: z.object({
				"x-nango-signature": z
					.string()
					.base64()
					.describe("The signature of the webhook, from Nango"),
			}),
		},
		responses: {
			200: {
				content: {
					"application/json": {
						schema: z.object({
							success: z.literal(true),
						}),
					},
				},
				description: "Webhook received and processed successfully",
			},
			400: ERROR_RESPONSE_SCHEMA,
			401: ERROR_RESPONSE_SCHEMA,
			500: ERROR_RESPONSE_SCHEMA,
			501: ERROR_RESPONSE_SCHEMA,
		},
		hide: true,
	}),
	quickbooks: {
		getAccounts: createRoute({
			method: "get",
			path: "/quickbooks/:connectionId/accounts",
			tags: ["Integrations", "Quickbooks"],
			security: [{ apiKeyCookie: [] }],
			middleware: [withAuth()],
			description:
				"Fetches all accounts in QuickBooks. Handles both active and archived accounts, saving or deleting them based on their status.",
			request: {
				params: z.object({
					connectionId: z
						.string()
						.describe("The ID of the connection to the Quickbooks account"),
				}),
			},
			responses: {
				200: {
					content: {
						"application/json": {
							schema: z.object({
								accounts: z.array(z.any()),
							}),
						},
					},
					description: "Accounts fetched from Quickbooks",
				},
				403: ERROR_RESPONSE_SCHEMA,
				500: ERROR_RESPONSE_SCHEMA,
			},
		}),
	},
};
