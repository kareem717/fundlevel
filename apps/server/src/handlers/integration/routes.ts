import { createRoute, z } from "@hono/zod-openapi";
import { NangoIntegration } from "@/lib/utils/nango";
import { withAuth } from "@/middleware/with-auth";
import { ERROR_RESPONSE_SCHEMA } from "../shared/schemas";

export const integrationRoutes = {
	sessionToken: createRoute({
		method: "post",
		path: "/:integration/session-token",
		tags: ["Integrations"],
		security: [{ Cookie: [] }],
		description: "Get the session token for the user",
		middleware: [withAuth()],
		request: {
			params: z.object({
				integration: z.nativeEnum(NangoIntegration),
			}),
		},
		responses: {
			200: {
				content: {
					"application/json": {
						schema: z.object({
							sessionToken: z
								.string()
								.describe("The session token generated by Nango"),
						}),
					},
				},
				description: "Session token generated by Nango",
			},
			403: ERROR_RESPONSE_SCHEMA,
			500: ERROR_RESPONSE_SCHEMA,
			409: ERROR_RESPONSE_SCHEMA,
		},
	}),
	webhook: createRoute({
		method: "post",
		path: "/webhook",
		tags: ["Integrations"],
		request: {
			headers: z.object({
				"x-nango-signature": z
					.string()
					.base64()
					.describe("The signature of the webhook, from Nango"),
			}),
		},
		responses: {
			200: {
				content: {
					"application/json": {
						schema: z.object({
							success: z.literal(true),
						}),
					},
				},
				description: "Webhook received and processed successfully",
			},
			400: ERROR_RESPONSE_SCHEMA,
			401: ERROR_RESPONSE_SCHEMA,
			500: ERROR_RESPONSE_SCHEMA,
			501: ERROR_RESPONSE_SCHEMA,
		},
		hide: true,
	}),
};
