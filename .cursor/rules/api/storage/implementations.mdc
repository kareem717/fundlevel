---
description: Describes how to implement a storage layer interface
globs: 
alwaysApply: false
---
# Genenral
* Should only ever use the `IDB` type as the DB client, defined in the [index.ts](mdc:apps/api/src/internal/storage/index.ts) files
* Should use Drizzle ORM for the filter, etc., logic, i.e. `import { eq } from 'drizzle-orm`
* Transactions are generally implemented on the service layer, not here.
* Utilize [types.ts](mdc:packages/db/src/types.ts) and [schema.ts](mdc:packages/db/src/schema.ts)
* Try to follow DRY by utilizing private class methods.
* Constant values should be implemented with public static variables, named in all-caps

# Naming conventions
* Should be named exatcly as the interface name, but without the `I` prefix. For example:
```js
class CompanyRepository implements ICompanyRepository {}
```

# Outputs
* If trying to return a object on a mutation (create, update, or delete) - we should do a null/undefined check within the method, throwing a error if it is.