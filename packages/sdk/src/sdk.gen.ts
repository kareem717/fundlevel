// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-axios";
import type {
  GetAccountData,
  GetAccountError,
  GetAccountResponse,
  CreateAccountData,
  CreateAccountError,
  GetAccountInvestmentsData,
  GetAccountInvestmentsError,
  GetAccountInvestmentsResponse,
  GetAccountActiveRoundInvestmentData,
  GetAccountActiveRoundInvestmentError,
  GetAccountActiveRoundInvestmentResponse,
  GetAccountInvestmentAggregateData,
  GetAccountInvestmentAggregateError,
  GetAccountInvestmentAggregateResponse,
  GetStripeIdentityData,
  GetStripeIdentityError,
  GetStripeIdentityResponse,
  GetStripeIdentityVerificationSessionUrlData,
  GetStripeIdentityVerificationSessionUrlError,
  GetStripeIdentityVerificationSessionUrlResponse,
  DeleteAccountData,
  DeleteAccountError,
  DeleteAccountResponse,
  UpdateAccountData,
  UpdateAccountError,
  UpdateAccountResponse,
  GetAccountBusinessesData,
  GetAccountBusinessesError,
  GetAccountBusinessesResponse,
  CreateBusinessData,
  CreateBusinessError,
  CreateBusinessResponse,
  DeleteBusinessData,
  DeleteBusinessError,
  DeleteBusinessResponse,
  GetBusinessByIdData,
  GetBusinessByIdError,
  GetBusinessByIdResponse,
  GetBusinessMembersByPageData,
  GetBusinessMembersByPageError,
  GetBusinessMembersByPageResponse,
  GetBusinessRoundCreateRequirementsData,
  GetBusinessRoundCreateRequirementsError,
  GetBusinessRoundCreateRequirementsResponse,
  GetBusinessMemberRolesData,
  GetBusinessMemberRolesError,
  GetBusinessMemberRolesResponse,
  GetBusinessRoundsByCursorData,
  GetBusinessRoundsByCursorError,
  GetBusinessRoundsByCursorResponse,
  GetBusinessRoundsByPageData,
  GetBusinessRoundsByPageError,
  GetBusinessRoundsByPageResponse,
  UpsertBusinessLegalSectionData,
  UpsertBusinessLegalSectionError,
  UpsertBusinessLegalSectionResponse,
  GetBusinessStripeAccountData,
  GetBusinessStripeAccountError,
  GetBusinessStripeAccountResponse,
  GetStripeDashboardUrlData,
  GetStripeDashboardUrlError,
  GetStripeDashboardUrlResponse,
  OnboardStripeConnectedAccountData,
  OnboardStripeConnectedAccountError,
  OnboardStripeConnectedAccountResponse,
  HealthCheckData,
  HealthCheckError,
  HealthCheckResponse,
  GetAllIndustriesData,
  GetAllIndustriesError,
  GetAllIndustriesResponse,
  UpsertRoundInvestmentData,
  UpsertRoundInvestmentError,
  UpsertRoundInvestmentResponse,
  GetInvestmentByIdData,
  GetInvestmentByIdError,
  GetInvestmentByIdResponse,
  UpdateInvestmentData,
  UpdateInvestmentError,
  UpdateInvestmentResponse,
  ConfirmInvestmentPaymentData,
  ConfirmInvestmentPaymentError,
  ConfirmInvestmentPaymentResponse,
  GetInvestmentActivePaymentData,
  GetInvestmentActivePaymentError,
  GetInvestmentActivePaymentResponse,
  GetInvestmentPaymentsData,
  GetInvestmentPaymentsError,
  GetInvestmentPaymentsResponse,
  GetRoundByCursorData,
  GetRoundByCursorError,
  GetRoundByCursorResponse,
  CreateRoundData,
  CreateRoundError,
  CreateRoundResponse,
  GetRoundsByPageData,
  GetRoundsByPageError,
  GetRoundsByPageResponse,
  GetRoundTermsData,
  GetRoundTermsError,
  GetRoundTermsResponse,
  DeleteRoundData,
  DeleteRoundError,
  DeleteRoundResponse,
  GetRoundByIdData,
  GetRoundByIdError,
  GetRoundByIdResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Get account by user id
 * Fetches the account for the currently authenticated user.
 */
export const getAccount = <ThrowOnError extends boolean = false>(
  options?: Options<GetAccountData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAccountResponse,
    GetAccountError,
    ThrowOnError
  >({
    ...options,
    url: "/account",
  });
};

/**
 * Create a account
 * Create a account.
 */
export const createAccount = <ThrowOnError extends boolean = false>(
  options: Options<CreateAccountData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    unknown,
    CreateAccountError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    url: "/account",
  });
};

/**
 * Get investments
 * Get investments for the currently authenticated account.
 */
export const getAccountInvestments = <ThrowOnError extends boolean = false>(
  options?: Options<GetAccountInvestmentsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAccountInvestmentsResponse,
    GetAccountInvestmentsError,
    ThrowOnError
  >({
    ...options,
    url: "/account/investments",
  });
};

/**
 * Get active round investment
 * Get active round investment for the currently authenticated account.
 */
export const getAccountActiveRoundInvestment = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetAccountActiveRoundInvestmentData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAccountActiveRoundInvestmentResponse,
    GetAccountActiveRoundInvestmentError,
    ThrowOnError
  >({
    ...options,
    url: "/account/investments/round/{id}",
  });
};

/**
 * Get investment aggregate
 * Get investment aggregate for the currently authenticated account.
 */
export const getAccountInvestmentAggregate = <
  ThrowOnError extends boolean = false,
>(
  options?: Options<GetAccountInvestmentAggregateData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAccountInvestmentAggregateResponse,
    GetAccountInvestmentAggregateError,
    ThrowOnError
  >({
    ...options,
    url: "/account/portfolio",
  });
};

/**
 * Get stripe identity
 * Get stripe identity for the currently authenticated account.
 */
export const getStripeIdentity = <ThrowOnError extends boolean = false>(
  options?: Options<GetStripeIdentityData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetStripeIdentityResponse,
    GetStripeIdentityError,
    ThrowOnError
  >({
    ...options,
    url: "/account/stripe-identity",
  });
};

/**
 * Get stripe identity verification session url
 * Get stripe identity verification session url for the currently authenticated account.
 */
export const getStripeIdentityVerificationSessionUrl = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetStripeIdentityVerificationSessionUrlData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    GetStripeIdentityVerificationSessionUrlResponse,
    GetStripeIdentityVerificationSessionUrlError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    url: "/account/stripe-identity",
  });
};

/**
 * Delete a account
 * Delete a account.
 */
export const deleteAccount = <ThrowOnError extends boolean = false>(
  options?: Options<DeleteAccountData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteAccountResponse,
    DeleteAccountError,
    ThrowOnError
  >({
    ...options,
    url: "/account/{id}",
  });
};

/**
 * Update a account
 * Update a account.
 */
export const updateAccount = <ThrowOnError extends boolean = false>(
  options: Options<UpdateAccountData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateAccountResponse,
    UpdateAccountError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    url: "/account/{id}",
  });
};

/**
 * Get businesses
 * Get businesses.
 */
export const getAccountBusinesses = <ThrowOnError extends boolean = false>(
  options?: Options<GetAccountBusinessesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAccountBusinessesResponse,
    GetAccountBusinessesError,
    ThrowOnError
  >({
    ...options,
    url: "/account/{id}/businesses",
  });
};

/**
 * Create a business
 * Create a business.
 */
export const createBusiness = <ThrowOnError extends boolean = false>(
  options: Options<CreateBusinessData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateBusinessResponse,
    CreateBusinessError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    url: "/business",
  });
};

/**
 * Delete a business
 * Delete a business.
 */
export const deleteBusiness = <ThrowOnError extends boolean = false>(
  options: Options<DeleteBusinessData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteBusinessResponse,
    DeleteBusinessError,
    ThrowOnError
  >({
    ...options,
    url: "/business/{id}",
  });
};

/**
 * Get business by ID
 * Get business by ID.
 */
export const getBusinessById = <ThrowOnError extends boolean = false>(
  options: Options<GetBusinessByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetBusinessByIdResponse,
    GetBusinessByIdError,
    ThrowOnError
  >({
    ...options,
    url: "/business/{id}",
  });
};

/**
 * Get business members
 * Get business members.
 */
export const getBusinessMembersByPage = <ThrowOnError extends boolean = false>(
  options: Options<GetBusinessMembersByPageData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetBusinessMembersByPageResponse,
    GetBusinessMembersByPageError,
    ThrowOnError
  >({
    ...options,
    url: "/business/{id}/members/page",
  });
};

/**
 * Get round create requirements
 * Get round create requirements.
 */
export const getBusinessRoundCreateRequirements = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetBusinessRoundCreateRequirementsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetBusinessRoundCreateRequirementsResponse,
    GetBusinessRoundCreateRequirementsError,
    ThrowOnError
  >({
    ...options,
    url: "/business/{id}/requirements/round-create",
  });
};

/**
 * Get business member roles
 * Get all the roles created for this business.
 */
export const getBusinessMemberRoles = <ThrowOnError extends boolean = false>(
  options?: Options<GetBusinessMemberRolesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetBusinessMemberRolesResponse,
    GetBusinessMemberRolesError,
    ThrowOnError
  >({
    ...options,
    url: "/business/{id}/roles",
  });
};

/**
 * Get rounds
 * Get rounds.
 */
export const getBusinessRoundsByCursor = <ThrowOnError extends boolean = false>(
  options: Options<GetBusinessRoundsByCursorData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetBusinessRoundsByCursorResponse,
    GetBusinessRoundsByCursorError,
    ThrowOnError
  >({
    ...options,
    url: "/business/{id}/rounds",
  });
};

/**
 * Get rounds
 * Get rounds.
 */
export const getBusinessRoundsByPage = <ThrowOnError extends boolean = false>(
  options: Options<GetBusinessRoundsByPageData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetBusinessRoundsByPageResponse,
    GetBusinessRoundsByPageError,
    ThrowOnError
  >({
    ...options,
    url: "/business/{id}/rounds/page",
  });
};

/**
 * Upsert business legal section
 * Upsert business legal section.
 */
export const upsertBusinessLegalSection = <
  ThrowOnError extends boolean = false,
>(
  options: Options<UpsertBusinessLegalSectionData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpsertBusinessLegalSectionResponse,
    UpsertBusinessLegalSectionError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    url: "/business/{id}/sections/legal",
  });
};

/**
 * Get business stripe account
 * Get business stripe account.
 */
export const getBusinessStripeAccount = <ThrowOnError extends boolean = false>(
  options: Options<GetBusinessStripeAccountData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetBusinessStripeAccountResponse,
    GetBusinessStripeAccountError,
    ThrowOnError
  >({
    ...options,
    url: "/business/{id}/stripe",
  });
};

/**
 * Get Stripe dashboard url
 * Get Stripe dashboard url.
 */
export const getStripeDashboardUrl = <ThrowOnError extends boolean = false>(
  options: Options<GetStripeDashboardUrlData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetStripeDashboardUrlResponse,
    GetStripeDashboardUrlError,
    ThrowOnError
  >({
    ...options,
    url: "/business/{id}/stripe-dashboard-url",
  });
};

/**
 * Onboard Stripe connected account
 * Onboard Stripe connected account.
 */
export const onboardStripeConnectedAccount = <
  ThrowOnError extends boolean = false,
>(
  options: Options<OnboardStripeConnectedAccountData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    OnboardStripeConnectedAccountResponse,
    OnboardStripeConnectedAccountError,
    ThrowOnError
  >({
    ...options,
    url: "/business/{id}/stripe-onboard",
  });
};

/**
 * Health check
 * Health check.
 */
export const healthCheck = <ThrowOnError extends boolean = false>(
  options?: Options<HealthCheckData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    HealthCheckResponse,
    HealthCheckError,
    ThrowOnError
  >({
    ...options,
    url: "/health",
  });
};

/**
 * Get all industries
 * Get all industries.
 */
export const getAllIndustries = <ThrowOnError extends boolean = false>(
  options?: Options<GetAllIndustriesData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAllIndustriesResponse,
    GetAllIndustriesError,
    ThrowOnError
  >({
    ...options,
    url: "/industries",
  });
};

/**
 * Upsert a round investment
 * Create a round investment. If a incomplete investment exists, it will be updated with the new values and used for the new investment.
 */
export const upsertRoundInvestment = <ThrowOnError extends boolean = false>(
  options: Options<UpsertRoundInvestmentData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpsertRoundInvestmentResponse,
    UpsertRoundInvestmentError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    url: "/investments",
  });
};

/**
 * Get a round investment
 * Get a round investment.
 */
export const getInvestmentById = <ThrowOnError extends boolean = false>(
  options: Options<GetInvestmentByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetInvestmentByIdResponse,
    GetInvestmentByIdError,
    ThrowOnError
  >({
    ...options,
    url: "/investments/{id}",
  });
};

/**
 * Update a round investment
 * Update a round investment.
 */
export const updateInvestment = <ThrowOnError extends boolean = false>(
  options: Options<UpdateInvestmentData, ThrowOnError>,
) => {
  return (options?.client ?? client).put<
    UpdateInvestmentResponse,
    UpdateInvestmentError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    url: "/investments/{id}",
  });
};

/**
 * Confirm a stripe payment intent
 * Confirm a stripe payment intent for an investment.
 */
export const confirmInvestmentPayment = <ThrowOnError extends boolean = false>(
  options: Options<ConfirmInvestmentPaymentData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    ConfirmInvestmentPaymentResponse,
    ConfirmInvestmentPaymentError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    url: "/investments/{id}/confirm-payment",
  });
};

/**
 * Get the active payment for an investment
 * Get the payment for the current investment that is either processing or succeeded.
 */
export const getInvestmentActivePayment = <
  ThrowOnError extends boolean = false,
>(
  options: Options<GetInvestmentActivePaymentData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetInvestmentActivePaymentResponse,
    GetInvestmentActivePaymentError,
    ThrowOnError
  >({
    ...options,
    url: "/investments/{id}/pay",
  });
};

/**
 * Get a round investment payments
 * Get a round investment payments.
 */
export const getInvestmentPayments = <ThrowOnError extends boolean = false>(
  options: Options<GetInvestmentPaymentsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetInvestmentPaymentsResponse,
    GetInvestmentPaymentsError,
    ThrowOnError
  >({
    ...options,
    url: "/investments/{id}/payments",
  });
};

/**
 * Get rounds by cursor
 * Get rounds by cursor.
 */
export const getRoundByCursor = <ThrowOnError extends boolean = false>(
  options?: Options<GetRoundByCursorData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetRoundByCursorResponse,
    GetRoundByCursorError,
    ThrowOnError
  >({
    ...options,
    url: "/round",
  });
};

/**
 * Create a round
 * Create a round.
 */
export const createRound = <ThrowOnError extends boolean = false>(
  options: Options<CreateRoundData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateRoundResponse,
    CreateRoundError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    url: "/round",
  });
};

/**
 * Get rounds by page
 * Get rounds by page.
 */
export const getRoundsByPage = <ThrowOnError extends boolean = false>(
  options?: Options<GetRoundsByPageData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetRoundsByPageResponse,
    GetRoundsByPageError,
    ThrowOnError
  >({
    ...options,
    url: "/round/page",
  });
};

/**
 * Get round terms
 * Get round terms.
 */
export const getRoundTerms = <ThrowOnError extends boolean = false>(
  options: Options<GetRoundTermsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetRoundTermsResponse,
    GetRoundTermsError,
    ThrowOnError
  >({
    ...options,
    url: "/round/terms/{id}",
  });
};

/**
 * Delete a round
 * Delete a round.
 */
export const deleteRound = <ThrowOnError extends boolean = false>(
  options: Options<DeleteRoundData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteRoundResponse,
    DeleteRoundError,
    ThrowOnError
  >({
    ...options,
    url: "/round/{id}",
  });
};

/**
 * Get round by ID
 * Get round by ID.
 */
export const getRoundById = <ThrowOnError extends boolean = false>(
  options: Options<GetRoundByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetRoundByIdResponse,
    GetRoundByIdError,
    ThrowOnError
  >({
    ...options,
    url: "/round/{id}",
  });
};
