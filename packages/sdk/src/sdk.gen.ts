// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type Options,
} from "@hey-api/client-axios";
import type {
  GetAccountData,
  GetAccountError,
  GetAccountResponse,
  CreateAccountData,
  CreateAccountError,
  CreateAccountResponse,
  HealthCheckData,
  HealthCheckError,
  HealthCheckResponse,
  CreateMergeLinkTokenUrlData,
  CreateMergeLinkTokenUrlError,
  CreateMergeLinkTokenUrlResponse,
  GetLinkedAccountsData,
  GetLinkedAccountsError,
  GetLinkedAccountsResponse,
  CreateLinkedAccountData,
  CreateLinkedAccountError,
  CreateLinkedAccountResponse,
  GetLinkedAccountByMergeIdData,
  GetLinkedAccountByMergeIdError,
  GetLinkedAccountByMergeIdResponse,
  GetLinkedAccountsMinimalData,
  GetLinkedAccountsMinimalError,
  GetLinkedAccountsMinimalResponse,
  DeleteLinkedAccountData,
  DeleteLinkedAccountError,
  DeleteLinkedAccountResponse,
  GetLinkedAccountByIdData,
  GetLinkedAccountByIdError,
  GetLinkedAccountByIdResponse,
} from "./types.gen";

export const client = createClient(createConfig());

/**
 * Get Account
 * Get an account for current authenticated user.
 */
export const getAccount = <ThrowOnError extends boolean = false>(
  options?: Options<GetAccountData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetAccountResponse,
    GetAccountError,
    ThrowOnError
  >({
    ...options,
    url: "/account",
  });
};

/**
 * Create Account
 * Create an account for current authenticated user.
 */
export const createAccount = <ThrowOnError extends boolean = false>(
  options: Options<CreateAccountData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateAccountResponse,
    CreateAccountError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    url: "/account",
  });
};

/**
 * Health check
 * Health check.
 */
export const healthCheck = <ThrowOnError extends boolean = false>(
  options?: Options<HealthCheckData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    HealthCheckResponse,
    HealthCheckError,
    ThrowOnError
  >({
    ...options,
    url: "/health",
  });
};

/**
 * Create Merge Link Token URL
 * Create a link token url for the authenticated user to link their external account.
 */
export const createMergeLinkTokenUrl = <ThrowOnError extends boolean = false>(
  options: Options<CreateMergeLinkTokenUrlData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    CreateMergeLinkTokenUrlResponse,
    CreateMergeLinkTokenUrlError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    url: "/merge/link-token-url",
  });
};

/**
 * Get Linked Accounts
 * Get all linked accounts for the authenticated user.
 */
export const getLinkedAccounts = <ThrowOnError extends boolean = false>(
  options?: Options<GetLinkedAccountsData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetLinkedAccountsResponse,
    GetLinkedAccountsError,
    ThrowOnError
  >({
    ...options,
    url: "/merge/linked-accounts",
  });
};

/**
 * Create Linked Account
 * Create a new linked account for the authenticated user.
 */
export const createLinkedAccount = <ThrowOnError extends boolean = false>(
  options: Options<CreateLinkedAccountData, ThrowOnError>,
) => {
  return (options?.client ?? client).post<
    CreateLinkedAccountResponse,
    CreateLinkedAccountError,
    ThrowOnError
  >({
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
    url: "/merge/linked-accounts",
  });
};

/**
 * Get Linked Account by Merge ID
 * Get a specific linked account by its Merge ID.
 */
export const getLinkedAccountByMergeId = <ThrowOnError extends boolean = false>(
  options: Options<GetLinkedAccountByMergeIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetLinkedAccountByMergeIdResponse,
    GetLinkedAccountByMergeIdError,
    ThrowOnError
  >({
    ...options,
    url: "/merge/linked-accounts/merge/{mergeId}",
  });
};

/**
 * Get Linked Accounts Minimal
 * Get all linked accounts for the authenticated user. Returns minimal information.
 */
export const getLinkedAccountsMinimal = <ThrowOnError extends boolean = false>(
  options?: Options<GetLinkedAccountsMinimalData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetLinkedAccountsMinimalResponse,
    GetLinkedAccountsMinimalError,
    ThrowOnError
  >({
    ...options,
    url: "/merge/linked-accounts/minimal",
  });
};

/**
 * Delete Linked Account
 * Delete a specific linked account.
 */
export const deleteLinkedAccount = <ThrowOnError extends boolean = false>(
  options: Options<DeleteLinkedAccountData, ThrowOnError>,
) => {
  return (options?.client ?? client).delete<
    DeleteLinkedAccountResponse,
    DeleteLinkedAccountError,
    ThrowOnError
  >({
    ...options,
    url: "/merge/linked-accounts/{id}",
  });
};

/**
 * Get Linked Account by ID
 * Get a specific linked account by its ID.
 */
export const getLinkedAccountById = <ThrowOnError extends boolean = false>(
  options: Options<GetLinkedAccountByIdData, ThrowOnError>,
) => {
  return (options?.client ?? client).get<
    GetLinkedAccountByIdResponse,
    GetLinkedAccountByIdError,
    ThrowOnError
  >({
    ...options,
    url: "/merge/linked-accounts/{id}",
  });
};
