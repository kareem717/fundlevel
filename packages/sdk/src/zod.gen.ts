// This file is auto-generated by @hey-api/openapi-ts

import { z } from 'zod';

export const zAccount = z.object({
    createdAt: z.string().datetime(),
    deletedAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    firstName: z.string().min(3).max(30).regex(/^[a-zA-Z]+$/),
    id: z.number().gte(1),
    lastName: z.string().min(3).max(30).regex(/^[a-zA-Z]+$/),
    updatedAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    userId: z.string().uuid().length(36)
});

export const zBusiness = z.object({
    businessColour: z.string(),
    businessLegalSection: z.object({
        businessNumber: z.string(),
        createdAt: z.string().datetime(),
        id: z.number().gte(1),
        updatedAt: z.union([
            z.string().datetime(),
            z.null()
        ])
    }),
    businessLegalSectionId: z.union([
        z.number().gte(1),
        z.null()
    ]).optional(),
    createdAt: z.string().datetime(),
    deletedAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    displayName: z.string().min(1),
    employeeCount: z.enum([
        '1',
        '2-10',
        '11-50',
        '51-200',
        '201-500',
        '501-1000',
        '1000+'
    ]).optional(),
    foundingDate: z.string().datetime(),
    id: z.number().gte(1),
    industries: z.union([
        z.array(z.object({
            createdAt: z.string().datetime(),
            deletedAt: z.union([
                z.string().datetime(),
                z.null()
            ]),
            id: z.number().gte(1),
            label: z.string().min(3).max(30),
            updatedAt: z.union([
                z.string().datetime(),
                z.null()
            ])
        })),
        z.null()
    ]),
    stripeAccount: z.object({
        businessId: z.number().gte(1),
        createdAt: z.string().datetime(),
        deletedAt: z.union([
            z.string().datetime(),
            z.null()
        ]),
        stripeConnectedAccountId: z.string(),
        stripeDisabledReason: z.union([
            z.string(),
            z.null()
        ]),
        stripePayoutsEnabled: z.boolean(),
        stripeTransfersEnabled: z.boolean(),
        updatedAt: z.union([
            z.string().datetime(),
            z.null()
        ])
    }),
    updatedAt: z.union([
        z.string().datetime(),
        z.null()
    ])
});

export const zBusinessLegalSection = z.object({
    businessNumber: z.string(),
    createdAt: z.string().datetime(),
    id: z.number().gte(1),
    updatedAt: z.union([
        z.string().datetime(),
        z.null()
    ])
});

export const zBusinessMemberRole = z.object({
    description: z.string(),
    id: z.number().gte(1),
    name: z.string(),
    permissions: z.union([
        z.array(z.object({
            description: z.string(),
            id: z.number().gte(1),
            value: z.string()
        })),
        z.null()
    ])
});

export const zBusinessMemberWithRoleNameAndAccount = z.object({
    account: z.object({
        createdAt: z.string().datetime(),
        deletedAt: z.union([
            z.string().datetime(),
            z.null()
        ]),
        firstName: z.string(),
        id: z.number().gte(1),
        lastName: z.string(),
        updatedAt: z.union([
            z.string().datetime(),
            z.null()
        ])
    }),
    accountId: z.number(),
    businessId: z.number(),
    createdAt: z.string().datetime(),
    deletedAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    role: z.string(),
    roleId: z.number(),
    updatedAt: z.union([
        z.string().datetime(),
        z.null()
    ])
});

export const zBusinessParams = z.object({
    businessColour: z.union([
        z.string().length(7),
        z.null()
    ]).optional(),
    displayName: z.string().min(1),
    employeeCount: z.enum([
        '1',
        '2-10',
        '11-50',
        '51-200',
        '201-500',
        '501-1000',
        '1000+'
    ]),
    foundingDate: z.string().datetime()
});

export const zBusinessStripeAccount = z.object({
    businessId: z.number().gte(1),
    createdAt: z.string().datetime(),
    deletedAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    stripeConnectedAccountId: z.string(),
    stripeDisabledReason: z.union([
        z.string(),
        z.null()
    ]),
    stripePayoutsEnabled: z.boolean(),
    stripeTransfersEnabled: z.boolean(),
    updatedAt: z.union([
        z.string().datetime(),
        z.null()
    ])
});

export const zChat = z.object({
    createdAt: z.string().datetime(),
    createdByAccountId: z.number().gte(1),
    createdForAccountId: z.number().gte(1),
    deletedAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    id: z.number().gte(1),
    lastMessageAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    updatedAt: z.union([
        z.string().datetime(),
        z.null()
    ])
});

export const zChatMessage = z.object({
    content: z.string().min(1).max(1000),
    createdAt: z.string().datetime(),
    deletedAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    id: z.number().gte(1),
    readAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    senderAccountId: z.number().gte(1),
    updatedAt: z.union([
        z.string().datetime(),
        z.null()
    ])
});

export const zCreateAccountParams = z.object({
    '$schema': z.string().url().readonly().optional(),
    firstName: z.string().min(3).max(30).regex(/^[a-zA-Z]+$/),
    lastName: z.string().min(3).max(30).regex(/^[a-zA-Z]+$/),
    userId: z.string().uuid().length(36)
});

export const zCreateBusinessParams = z.object({
    '$schema': z.string().url().readonly().optional(),
    business: zBusinessParams,
    industryIds: z.union([
        z.array(z.number()).min(1),
        z.null()
    ]).optional(),
    initialOwnerId: z.number().gte(1)
});

export const zCreateChatParams = z.object({
    '$schema': z.string().url().readonly().optional(),
    createdByAccountId: z.number().gte(1),
    createdForAccountId: z.number().gte(1)
});

export const zCreateChatResponseBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    createdAt: z.string().datetime(),
    createdByAccountId: z.number().gte(1),
    createdForAccountId: z.number().gte(1),
    deletedAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    id: z.number().gte(1),
    lastMessageAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    message: z.string(),
    updatedAt: z.union([
        z.string().datetime(),
        z.null()
    ])
});

export const zCreateMessageParams = z.object({
    '$schema': z.string().url().readonly().optional(),
    content: z.string().min(1).max(1000),
    senderAccountId: z.number().gte(1)
});

export const zCreateRoundParams = z.object({
    '$schema': z.string().url().readonly().optional(),
    beginsAt: z.string().datetime(),
    businessId: z.number().gte(1),
    description: z.string().min(10).max(3000),
    endsAt: z.string().datetime(),
    investmentsRequireApproval: z.boolean().default(false),
    investorCount: z.number().gte(1),
    percentageSelling: z.number().gte(0).lte(100),
    valuationAmountUSDCents: z.number().gte(1)
});

export const zErrorDetail = z.object({
    location: z.string().optional(),
    message: z.string().optional(),
    value: z.unknown().optional()
});

export const zErrorModel = z.object({
    '$schema': z.string().url().readonly().optional(),
    detail: z.string().optional(),
    errors: z.union([
        z.array(zErrorDetail),
        z.null()
    ]).optional(),
    instance: z.string().url().optional(),
    status: z.number().optional(),
    title: z.string().optional(),
    type: z.string().url().optional().default('about:blank')
});

export const zFundingOutputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    message: z.string(),
    totalFunding: z.number()
});

export const zGetAllIndustriesResponseBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    industries: z.union([
        z.array(z.object({
            createdAt: z.string().datetime(),
            deletedAt: z.union([
                z.string().datetime(),
                z.null()
            ]),
            id: z.number().gte(1),
            label: z.string().min(3).max(30),
            updatedAt: z.union([
                z.string().datetime(),
                z.null()
            ])
        })),
        z.null()
    ]),
    message: z.string()
});

export const zGetAllMemberRolesOutputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    message: z.string(),
    roles: z.union([
        z.array(zBusinessMemberRole),
        z.null()
    ])
});

export const zGetBusinessesOutputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    businesses: z.union([
        z.array(zBusiness),
        z.null()
    ]),
    message: z.string()
});

export const zGetChatMessagesResponseBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    hasNext: z.boolean(),
    message: z.string(),
    messages: z.union([
        z.array(zChatMessage),
        z.null()
    ]),
    nextCursor: z.union([
        z.string().datetime(),
        z.null()
    ])
});

export const zGetChatsOutputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    chats: z.union([
        z.array(zChat),
        z.null()
    ]),
    hasNext: z.boolean(),
    message: z.string(),
    nextCursor: z.union([
        z.string().datetime(),
        z.null()
    ])
});

export const zGetCursorPaginatedInvestmentsOutputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    hasMore: z.boolean(),
    investments: z.union([
        z.array(z.object({
            approvedAt: z.string().datetime().optional(),
            completedAt: z.string().datetime().optional(),
            createdAt: z.string().datetime(),
            deletedAt: z.union([
                z.string().datetime(),
                z.null()
            ]),
            id: z.number().gte(1),
            investorId: z.number(),
            paymentCompletedAt: z.string().datetime().optional(),
            payments: z.union([
                z.array(z.object({
                    createdAt: z.string().datetime(),
                    deletedAt: z.union([
                        z.string().datetime(),
                        z.null()
                    ]),
                    id: z.number(),
                    investmentId: z.number(),
                    status: z.enum([
                        'cancelled',
                        'processing',
                        'requires_action',
                        'requires_capture',
                        'requires_confirmation',
                        'requires_payment_method',
                        'succeeded'
                    ]),
                    stripePaymentIntentClientSecret: z.string(),
                    stripePaymentIntentId: z.string(),
                    updatedAt: z.union([
                        z.string().datetime(),
                        z.null()
                    ])
                })),
                z.null()
            ]).optional(),
            requiresManualApproval: z.boolean(),
            roundId: z.number(),
            status: z.enum([
                'awaiting_term_acceptance',
                'awaiting_payment',
                'investor_tasks_completed',
                'failed_to_accept_terms',
                'failed_to_make_payment',
                'investor_withdrew',
                'business_rejected',
                'round_closed_before_investor_tasks_completed'
            ]),
            termsCompletedAt: z.string().datetime().optional(),
            updatedAt: z.union([
                z.string().datetime(),
                z.null()
            ])
        })),
        z.null()
    ]),
    message: z.string(),
    nextCursor: z.union([
        z.number(),
        z.null()
    ])
});

export const zGetCursorPaginatedRoundsOutputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    hasMore: z.boolean(),
    message: z.string(),
    nextCursor: z.union([
        z.number(),
        z.null()
    ]),
    rounds: z.union([
        z.array(z.object({
            beginsAt: z.string().datetime(),
            businessId: z.number().gte(1),
            createdAt: z.string().datetime(),
            deletedAt: z.union([
                z.string().datetime(),
                z.null()
            ]),
            description: z.string().min(10).max(3000),
            endsAt: z.string().datetime(),
            id: z.number().gte(1),
            investmentsRequireApproval: z.boolean().default(false),
            investorCount: z.number().gte(1),
            percentageSelling: z.number().gte(0).lte(100),
            status: z.enum([
                'active',
                'successful',
                'failed'
            ]),
            updatedAt: z.union([
                z.string().datetime(),
                z.null()
            ]),
            valuationAmountUSDCents: z.number().gte(1)
        })),
        z.null()
    ])
});

export const zGetDailyAggregatedBusinessAnalyticsOutputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    analytics: z.union([
        z.array(z.object({
            dayOfYear: z.number(),
            favouritedCount: z.number(),
            impressionsCount: z.number(),
            uniquesImpressionsCount: z.number()
        })),
        z.null()
    ]),
    message: z.string()
});

export const zGetDailyAggregatedRoundAnalyticsOutputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    analytics: z.union([
        z.array(z.object({
            dayOfYear: z.number(),
            favouritedCount: z.number(),
            impressionsCount: z.number(),
            uniquesImpressionsCount: z.number()
        })),
        z.null()
    ]),
    message: z.string()
});

export const zGetInvestmentActivePaymentOutputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    investmentPayment: z.object({
        createdAt: z.string().datetime(),
        deletedAt: z.union([
            z.string().datetime(),
            z.null()
        ]),
        id: z.number(),
        investmentId: z.number(),
        status: z.enum([
            'cancelled',
            'processing',
            'requires_action',
            'requires_capture',
            'requires_confirmation',
            'requires_payment_method',
            'succeeded'
        ]),
        stripePaymentIntentClientSecret: z.string(),
        stripePaymentIntentId: z.string(),
        updatedAt: z.union([
            z.string().datetime(),
            z.null()
        ])
    }),
    message: z.string()
});

export const zGetInvestmentPaymentsOutputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    investmentPayments: z.union([
        z.array(z.object({
            createdAt: z.string().datetime(),
            deletedAt: z.union([
                z.string().datetime(),
                z.null()
            ]),
            id: z.number(),
            investmentId: z.number(),
            status: z.enum([
                'cancelled',
                'processing',
                'requires_action',
                'requires_capture',
                'requires_confirmation',
                'requires_payment_method',
                'succeeded'
            ]),
            stripePaymentIntentClientSecret: z.string(),
            stripePaymentIntentId: z.string(),
            updatedAt: z.union([
                z.string().datetime(),
                z.null()
            ])
        })),
        z.null()
    ]),
    message: z.string()
});

export const zGetLikeCountOutputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    count: z.number(),
    message: z.string()
});

export const zGetOffsetPaginatedBusinessMembersOutputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    hasMore: z.boolean(),
    members: z.union([
        z.array(zBusinessMemberWithRoleNameAndAccount),
        z.null()
    ]),
    message: z.string(),
    total: z.number()
});

export const zGetOffsetPaginatedInvestmentsOutputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    hasMore: z.boolean(),
    investments: z.union([
        z.array(z.object({
            approvedAt: z.string().datetime().optional(),
            completedAt: z.string().datetime().optional(),
            createdAt: z.string().datetime(),
            deletedAt: z.union([
                z.string().datetime(),
                z.null()
            ]),
            id: z.number().gte(1),
            investorId: z.number(),
            paymentCompletedAt: z.string().datetime().optional(),
            payments: z.union([
                z.array(z.object({
                    createdAt: z.string().datetime(),
                    deletedAt: z.union([
                        z.string().datetime(),
                        z.null()
                    ]),
                    id: z.number(),
                    investmentId: z.number(),
                    status: z.enum([
                        'cancelled',
                        'processing',
                        'requires_action',
                        'requires_capture',
                        'requires_confirmation',
                        'requires_payment_method',
                        'succeeded'
                    ]),
                    stripePaymentIntentClientSecret: z.string(),
                    stripePaymentIntentId: z.string(),
                    updatedAt: z.union([
                        z.string().datetime(),
                        z.null()
                    ])
                })),
                z.null()
            ]).optional(),
            requiresManualApproval: z.boolean(),
            roundId: z.number(),
            status: z.enum([
                'awaiting_term_acceptance',
                'awaiting_payment',
                'investor_tasks_completed',
                'failed_to_accept_terms',
                'failed_to_make_payment',
                'investor_withdrew',
                'business_rejected',
                'round_closed_before_investor_tasks_completed'
            ]),
            termsCompletedAt: z.string().datetime().optional(),
            updatedAt: z.union([
                z.string().datetime(),
                z.null()
            ])
        })),
        z.null()
    ]),
    message: z.string(),
    total: z.number()
});

export const zGetOffsetPaginatedRoundsOutputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    hasMore: z.boolean(),
    message: z.string(),
    rounds: z.union([
        z.array(z.object({
            beginsAt: z.string().datetime(),
            businessId: z.number().gte(1),
            createdAt: z.string().datetime(),
            deletedAt: z.union([
                z.string().datetime(),
                z.null()
            ]),
            description: z.string().min(10).max(3000),
            endsAt: z.string().datetime(),
            id: z.number().gte(1),
            investmentsRequireApproval: z.boolean().default(false),
            investorCount: z.number().gte(1),
            percentageSelling: z.number().gte(0).lte(100),
            status: z.enum([
                'active',
                'successful',
                'failed'
            ]),
            updatedAt: z.union([
                z.string().datetime(),
                z.null()
            ]),
            valuationAmountUSDCents: z.number().gte(1)
        })),
        z.null()
    ]),
    total: z.number()
});

export const zGetRoundCreateRequirementsOutputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    message: z.string(),
    requirements: z.object({
        hasActiveStatus: z.boolean(),
        legalSection: z.boolean(),
        stripeAccount: z.boolean()
    })
});

export const zGetStripeAccountOutputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    message: z.string(),
    stripeAccount: zBusinessStripeAccount
});

export const zImpressionCountOutputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    count: z.number(),
    message: z.string()
});

export const zImpressionInputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    accountId: z.number().gte(1)
});

export const zIndustry = z.object({
    createdAt: z.string().datetime(),
    deletedAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    id: z.number().gte(1),
    label: z.string().min(3).max(30),
    updatedAt: z.union([
        z.string().datetime(),
        z.null()
    ])
});

export const zInvestment = z.object({
    approvedAt: z.string().datetime().optional(),
    completedAt: z.string().datetime().optional(),
    createdAt: z.string().datetime(),
    deletedAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    id: z.number().gte(1),
    investorId: z.number(),
    paymentCompletedAt: z.string().datetime().optional(),
    payments: z.union([
        z.array(z.object({
            createdAt: z.string().datetime(),
            deletedAt: z.union([
                z.string().datetime(),
                z.null()
            ]),
            id: z.number(),
            investmentId: z.number(),
            status: z.enum([
                'cancelled',
                'processing',
                'requires_action',
                'requires_capture',
                'requires_confirmation',
                'requires_payment_method',
                'succeeded'
            ]),
            stripePaymentIntentClientSecret: z.string(),
            stripePaymentIntentId: z.string(),
            updatedAt: z.union([
                z.string().datetime(),
                z.null()
            ])
        })),
        z.null()
    ]).optional(),
    requiresManualApproval: z.boolean(),
    roundId: z.number(),
    status: z.enum([
        'awaiting_term_acceptance',
        'awaiting_payment',
        'investor_tasks_completed',
        'failed_to_accept_terms',
        'failed_to_make_payment',
        'investor_withdrew',
        'business_rejected',
        'round_closed_before_investor_tasks_completed'
    ]),
    termsCompletedAt: z.string().datetime().optional(),
    updatedAt: z.union([
        z.string().datetime(),
        z.null()
    ])
});

export const zInvestmentPayment = z.object({
    createdAt: z.string().datetime(),
    deletedAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    id: z.number(),
    investmentId: z.number(),
    status: z.enum([
        'cancelled',
        'processing',
        'requires_action',
        'requires_capture',
        'requires_confirmation',
        'requires_payment_method',
        'succeeded'
    ]),
    stripePaymentIntentClientSecret: z.string(),
    stripePaymentIntentId: z.string(),
    updatedAt: z.union([
        z.string().datetime(),
        z.null()
    ])
});

export const zInvestmentPaymentIntentClientSecretOutputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    clientSecret: z.string(),
    message: z.string()
});

export const zIsFavouritedOutputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    favourited: z.boolean(),
    message: z.string()
});

export const zMessageResponse = z.object({
    '$schema': z.string().url().readonly().optional(),
    message: z.string()
});

export const zOnboardStripeConnectedAccountInputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    refreshURL: z.string(),
    returnURL: z.string()
});

export const zRolePermission = z.object({
    description: z.string(),
    id: z.number().gte(1),
    value: z.string()
});

export const zRound = z.object({
    beginsAt: z.string().datetime(),
    businessId: z.number().gte(1),
    createdAt: z.string().datetime(),
    deletedAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    description: z.string().min(10).max(3000),
    endsAt: z.string().datetime(),
    id: z.number().gte(1),
    investmentsRequireApproval: z.boolean().default(false),
    investorCount: z.number().gte(1),
    percentageSelling: z.number().gte(0).lte(100),
    status: z.enum([
        'active',
        'successful',
        'failed'
    ]),
    updatedAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    valuationAmountUSDCents: z.number().gte(1)
});

export const zRoundCreateRequirements = z.object({
    hasActiveStatus: z.boolean(),
    legalSection: z.boolean(),
    stripeAccount: z.boolean()
});

export const zRoundWithBusiness = z.object({
    beginsAt: z.string().datetime(),
    business: zBusiness,
    businessId: z.number().gte(1),
    createdAt: z.string().datetime(),
    deletedAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    description: z.string().min(10).max(3000),
    endsAt: z.string().datetime(),
    id: z.number().gte(1),
    investmentsRequireApproval: z.boolean().default(false),
    investorCount: z.number().gte(1),
    percentageSelling: z.number().gte(0).lte(100),
    status: z.enum([
        'active',
        'successful',
        'failed'
    ]),
    updatedAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    valuationAmountUSDCents: z.number().gte(1)
});

export const zSafeAccount = z.object({
    createdAt: z.string().datetime(),
    deletedAt: z.union([
        z.string().datetime(),
        z.null()
    ]),
    firstName: z.string(),
    id: z.number().gte(1),
    lastName: z.string(),
    updatedAt: z.union([
        z.string().datetime(),
        z.null()
    ])
});

export const zSimplifiedDailyAggregatedBusinessAnalytics = z.object({
    dayOfYear: z.number(),
    favouritedCount: z.number(),
    impressionsCount: z.number(),
    uniquesImpressionsCount: z.number()
});

export const zSimplifiedDailyAggregatedRoundAnalytics = z.object({
    dayOfYear: z.number(),
    favouritedCount: z.number(),
    impressionsCount: z.number(),
    uniquesImpressionsCount: z.number()
});

export const zSingleAccountResponseBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    account: zAccount,
    message: z.string()
});

export const zSingleBusinessResponseBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    business: zBusiness,
    message: z.string()
});

export const zSingleInvestmentResponseBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    investment: zInvestment,
    message: z.string()
});

export const zSingleRoundResponseBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    message: z.string(),
    round: zRound
});

export const zSingleRoundWithBusinessResponseBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    message: z.string(),
    round: zRoundWithBusiness
});

export const zUrlOutputBody = z.object({
    '$schema': z.string().url().readonly().optional(),
    message: z.string(),
    url: z.string()
});

export const zUpdateAccountParams = z.object({
    '$schema': z.string().url().readonly().optional(),
    firstName: z.string().min(3).max(30).regex(/^[a-zA-Z]+$/),
    lastName: z.string().min(3).max(30).regex(/^[a-zA-Z]+$/)
});

export const zUpdateMessageParams = z.object({
    '$schema': z.string().url().readonly().optional(),
    content: z.string().min(1).max(1000),
    readAt: z.union([
        z.string().datetime(),
        z.null()
    ])
});

export const zUpsertBusinessLegalSectionParams = z.object({
    '$schema': z.string().url().readonly().optional(),
    businessNumber: z.string().min(1).max(10)
});

export const zCreateAccountResponse = zSingleAccountResponseBody;

export const zDeleteAccountResponse = zMessageResponse;

export const zGetAccountByIdResponse = zSingleAccountResponseBody;

export const zUpdateAccountResponse = zSingleAccountResponseBody;

export const zGetAccountBusinessesResponse = zGetBusinessesOutputBody;

export const zGetAccountChatsResponse = zGetChatsOutputBody;

export const zGetAccountInvestmentsByCursorResponse = zGetCursorPaginatedInvestmentsOutputBody;

export const zGetAccountInvestmentsByPageResponse = zGetOffsetPaginatedInvestmentsOutputBody;

export const zGetDailyAggregatedBusinessAnalyticsResponse = zGetDailyAggregatedBusinessAnalyticsOutputBody;

export const zDeleteBusinessFavouriteResponse = zMessageResponse;

export const zGetBusinessFavouriteStatusResponse = zIsFavouritedOutputBody;

export const zCreateBusinessFavouriteResponse = zMessageResponse;

export const zGetBusinessFavouriteCountResponse = zGetLikeCountOutputBody;

export const zGetBusinessImpressionCountResponse = zImpressionCountOutputBody;

export const zCreateBusinessImpressionResponse = zMessageResponse;

export const zGetDailyAggregatedRoundAnalyticsResponse = zGetDailyAggregatedRoundAnalyticsOutputBody;

export const zDeleteRoundFavouriteResponse = zMessageResponse;

export const zGetRoundFavouriteStatusResponse = zIsFavouritedOutputBody;

export const zCreateRoundFavouriteResponse = zMessageResponse;

export const zGetRoundFavouriteCountResponse = zGetLikeCountOutputBody;

export const zGetRoundImpressionCountResponse = zImpressionCountOutputBody;

export const zCreateRoundImpressionResponse = zMessageResponse;

export const zCreateBusinessResponse = zMessageResponse;

export const zDeleteBusinessResponse = zMessageResponse;

export const zGetBusinessByIdResponse = zSingleBusinessResponseBody;

export const zGetBusinessTotalFundingResponse = zFundingOutputBody;

export const zGetBusinessInvestmentsByCursorResponse = zGetCursorPaginatedInvestmentsOutputBody;

export const zGetBusinessInvestmentsByPageResponse = zGetOffsetPaginatedInvestmentsOutputBody;

export const zGetBusinessMembersByPageResponse = zGetOffsetPaginatedBusinessMembersOutputBody;

export const zGetBusinessRoundCreateRequirementsResponse = zGetRoundCreateRequirementsOutputBody;

export const zGetBusinessMemberRolesResponse = zGetAllMemberRolesOutputBody;

export const zGetBusinessRoundsByCursorResponse = zGetCursorPaginatedRoundsOutputBody;

export const zGetBusinessRoundsByPageResponse = zGetOffsetPaginatedRoundsOutputBody;

export const zUpsertBusinessLegalSectionResponse = zMessageResponse;

export const zGetBusinessStripeAccountResponse = zGetStripeAccountOutputBody;

export const zGetStripeDashboardUrlResponse = zUrlOutputBody;

export const zOnboardStripeConnectedAccountResponse = zUrlOutputBody;

export const zCreateChatResponse = zCreateChatResponseBody;

export const zDeleteChatMessageResponse = zMessageResponse;

export const zUpdateChatMessageResponse = zMessageResponse;

export const zDeleteChatResponse = zMessageResponse;

export const zGetChatMessagesResponse = zGetChatMessagesResponseBody;

export const zCreateChatMessageResponse = zMessageResponse;

export const zHealthCheckResponse = zMessageResponse;

export const zGetAllIndustriesResponse = zGetAllIndustriesResponseBody;

export const zCreateRoundInvestmentResponse = zSingleInvestmentResponseBody;

export const zGetInvestmentByIdResponse = zSingleInvestmentResponseBody;

export const zGetInvestmentActivePaymentResponse = zGetInvestmentActivePaymentOutputBody;

export const zCreateInvestmentPaymentIntentResponse = zInvestmentPaymentIntentClientSecretOutputBody;

export const zGetInvestmentPaymentsResponse = zGetInvestmentPaymentsOutputBody;

export const zGetRoundByCursorResponse = zGetCursorPaginatedRoundsOutputBody;

export const zCreateRoundResponse = zSingleRoundResponseBody;

export const zGetRoundsByPageResponse = zGetOffsetPaginatedRoundsOutputBody;

export const zDeleteRoundResponse = z.void();

export const zGetRoundByIdResponse = zSingleRoundWithBusinessResponseBody;

export const zGetUserAccountResponse = zSingleAccountResponseBody;