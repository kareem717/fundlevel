// This file is auto-generated by @hey-api/openapi-ts

import { z } from "zod";

export const zAccount = z.object({
  created_at: z.string().datetime(),
  deleted_at: z.union([z.string().datetime(), z.null()]),
  first_name: z
    .string()
    .min(3)
    .max(30)
    .regex(/^[a-zA-Z]+$/),
  id: z.number().gte(1),
  last_name: z
    .string()
    .min(3)
    .max(30)
    .regex(/^[a-zA-Z]+$/),
  updated_at: z.union([z.string().datetime(), z.null()]),
  user_id: z.string(),
});

export const zBusiness = z.object({
  $schema: z.string().url().readonly().optional(),
  business_legal_section: z.object({
    business_number: z.string(),
    created_at: z.string().datetime(),
    id: z.number().gte(1),
    updated_at: z.union([z.string().datetime(), z.null()]),
  }),
  business_legal_section_id: z.union([z.number().gte(1), z.null()]).optional(),
  created_at: z.string().datetime(),
  deleted_at: z.union([z.string().datetime(), z.null()]),
  display_name: z.string().min(1),
  employee_count: z
    .enum(["1", "2-10", "11-50", "51-200", "201-500", "501-1000", "1000+"])
    .optional(),
  founding_date: z.string().datetime(),
  id: z.number().gte(1),
  industries: z.union([
    z.array(
      z.object({
        created_at: z.string().datetime(),
        deleted_at: z.union([z.string().datetime(), z.null()]),
        id: z.number().gte(1),
        label: z.string().min(3).max(30),
        updated_at: z.union([z.string().datetime(), z.null()]),
      }),
    ),
    z.null(),
  ]),
  stripe_account: z.object({
    business_id: z.number().gte(1),
    created_at: z.string().datetime(),
    deleted_at: z.union([z.string().datetime(), z.null()]),
    stripe_connected_account_id: z.string(),
    stripe_disabled_reason: z.union([z.string(), z.null()]),
    stripe_payouts_enabled: z.boolean(),
    stripe_transfers_enabled: z.boolean(),
    updated_at: z.union([z.string().datetime(), z.null()]),
  }),
  updated_at: z.union([z.string().datetime(), z.null()]),
});

export const zBusinessLegalSection = z.object({
  business_number: z.string(),
  created_at: z.string().datetime(),
  id: z.number().gte(1),
  updated_at: z.union([z.string().datetime(), z.null()]),
});

export const zBusinessMemberRole = z.object({
  description: z.string(),
  id: z.number().gte(1),
  name: z.string(),
  permissions: z.union([
    z.array(
      z.object({
        description: z.string(),
        id: z.number().gte(1),
        value: z.string(),
      }),
    ),
    z.null(),
  ]),
});

export const zBusinessMemberWithRoleNameAndAccount = z.object({
  account: z.object({
    created_at: z.string().datetime(),
    deleted_at: z.union([z.string().datetime(), z.null()]),
    first_name: z.string(),
    id: z.number().gte(1),
    last_name: z.string(),
    updated_at: z.union([z.string().datetime(), z.null()]),
  }),
  account_id: z.number(),
  business_id: z.number(),
  created_at: z.string().datetime(),
  deleted_at: z.union([z.string().datetime(), z.null()]),
  role: z.string(),
  role_id: z.number(),
  updated_at: z.union([z.string().datetime(), z.null()]),
});

export const zBusinessParams = z.object({
  display_name: z.string().min(1),
  employee_count: z.enum([
    "1",
    "2-10",
    "11-50",
    "51-200",
    "201-500",
    "501-1000",
    "1000+",
  ]),
  founding_date: z.string().datetime(),
});

export const zBusinessStripeAccount = z.object({
  business_id: z.number().gte(1),
  created_at: z.string().datetime(),
  deleted_at: z.union([z.string().datetime(), z.null()]),
  stripe_connected_account_id: z.string(),
  stripe_disabled_reason: z.union([z.string(), z.null()]),
  stripe_payouts_enabled: z.boolean(),
  stripe_transfers_enabled: z.boolean(),
  updated_at: z.union([z.string().datetime(), z.null()]),
});

export const zCreateAccountParams = z.object({
  $schema: z.string().url().readonly().optional(),
  first_name: z
    .string()
    .min(3)
    .max(30)
    .regex(/^[a-zA-Z]+$/),
  last_name: z
    .string()
    .min(3)
    .max(30)
    .regex(/^[a-zA-Z]+$/),
});

export const zCreateBusinessParams = z.object({
  $schema: z.string().url().readonly().optional(),
  business: zBusinessParams,
  industry_ids: z.union([z.array(z.number()).min(1), z.null()]).optional(),
});

export const zCreateInvestmentParams = z.object({
  $schema: z.string().url().readonly().optional(),
  round_id: z.number(),
  share_quantity: z.number(),
});

export const zCreateRoundParams = z.object({
  $schema: z.string().url().readonly().optional(),
  business_id: z.number().gte(1),
  description: z.string().min(10).max(3000),
  price_per_share_usd_cents: z.number().gte(1),
  total_business_shares: z.number().gte(1),
  total_shares_for_sale: z.number().gte(1),
});

export const zErrorDetail = z.object({
  location: z.string().optional(),
  message: z.string().optional(),
  value: z.unknown().optional(),
});

export const zErrorModel = z.object({
  $schema: z.string().url().readonly().optional(),
  detail: z.string().optional(),
  errors: z.union([z.array(zErrorDetail), z.null()]).optional(),
  instance: z.string().url().optional(),
  status: z.number().optional(),
  title: z.string().optional(),
  type: z.string().url().optional().default("about:blank"),
});

export const zFundingOutputBody = z.object({
  $schema: z.string().url().readonly().optional(),
  message: z.string(),
  totalFunding: z.number(),
});

export const zGetAllIndustriesResponseBody = z.object({
  $schema: z.string().url().readonly().optional(),
  industries: z.union([
    z.array(
      z.object({
        created_at: z.string().datetime(),
        deleted_at: z.union([z.string().datetime(), z.null()]),
        id: z.number().gte(1),
        label: z.string().min(3).max(30),
        updated_at: z.union([z.string().datetime(), z.null()]),
      }),
    ),
    z.null(),
  ]),
  message: z.string(),
});

export const zGetAllMemberRolesOutputBody = z.object({
  $schema: z.string().url().readonly().optional(),
  message: z.string(),
  roles: z.union([z.array(zBusinessMemberRole), z.null()]),
});

export const zGetBusinessesOutputBody = z.object({
  $schema: z.string().url().readonly().optional(),
  businesses: z.union([z.array(zBusiness), z.null()]),
  message: z.string(),
});

export const zGetCursorPaginatedInvestmentsOutputBody = z.object({
  $schema: z.string().url().readonly().optional(),
  hasMore: z.boolean(),
  investments: z.union([
    z.array(
      z.object({
        $schema: z.string().url().readonly().optional(),
        approved_at: z.string().datetime().optional(),
        completed_at: z.string().datetime().optional(),
        created_at: z.string().datetime(),
        deleted_at: z.union([z.string().datetime(), z.null()]),
        id: z.number().gte(1),
        investor_id: z.number(),
        payment_completed_at: z.string().datetime().optional(),
        payments: z
          .union([
            z.array(
              z.object({
                created_at: z.string().datetime(),
                deleted_at: z.union([z.string().datetime(), z.null()]),
                id: z.number(),
                investment_id: z.number(),
                status: z.enum([
                  "cancelled",
                  "processing",
                  "requires_action",
                  "requires_capture",
                  "requires_confirmation",
                  "requires_payment_method",
                  "succeeded",
                ]),
                stripe_payment_intent_client_secret: z.string(),
                stripe_payment_intent_id: z.string(),
                updated_at: z.union([z.string().datetime(), z.null()]),
              }),
            ),
            z.null(),
          ])
          .optional(),
        round_id: z.number(),
        share_quantity: z.number(),
        terms_completed_at: z.string().datetime().optional(),
        updated_at: z.union([z.string().datetime(), z.null()]),
      }),
    ),
    z.null(),
  ]),
  message: z.string(),
  nextCursor: z.union([z.number(), z.null()]),
});

export const zGetCursorPaginatedRoundsOutputBody = z.object({
  $schema: z.string().url().readonly().optional(),
  hasMore: z.boolean(),
  message: z.string(),
  nextCursor: z.union([z.number(), z.null()]),
  rounds: z.union([
    z.array(
      z.object({
        $schema: z.string().url().readonly().optional(),
        business_id: z.number().gte(1),
        created_at: z.string().datetime(),
        deleted_at: z.union([z.string().datetime(), z.null()]),
        description: z.string().min(10).max(3000),
        id: z.number().gte(1),
        price_per_share_usd_cents: z.number().gte(1),
        status: z.enum(["active", "successful", "failed"]),
        total_business_shares: z.number().gte(1),
        total_shares_for_sale: z.number().gte(1),
        updated_at: z.union([z.string().datetime(), z.null()]),
      }),
    ),
    z.null(),
  ]),
});

export const zGetInvestmentActivePaymentOutputBody = z.object({
  $schema: z.string().url().readonly().optional(),
  investmentPayment: z.object({
    created_at: z.string().datetime(),
    deleted_at: z.union([z.string().datetime(), z.null()]),
    id: z.number(),
    investment_id: z.number(),
    status: z.enum([
      "cancelled",
      "processing",
      "requires_action",
      "requires_capture",
      "requires_confirmation",
      "requires_payment_method",
      "succeeded",
    ]),
    stripe_payment_intent_client_secret: z.string(),
    stripe_payment_intent_id: z.string(),
    updated_at: z.union([z.string().datetime(), z.null()]),
  }),
  message: z.string(),
});

export const zGetInvestmentPaymentsOutputBody = z.object({
  $schema: z.string().url().readonly().optional(),
  investmentPayments: z.union([
    z.array(
      z.object({
        created_at: z.string().datetime(),
        deleted_at: z.union([z.string().datetime(), z.null()]),
        id: z.number(),
        investment_id: z.number(),
        status: z.enum([
          "cancelled",
          "processing",
          "requires_action",
          "requires_capture",
          "requires_confirmation",
          "requires_payment_method",
          "succeeded",
        ]),
        stripe_payment_intent_client_secret: z.string(),
        stripe_payment_intent_id: z.string(),
        updated_at: z.union([z.string().datetime(), z.null()]),
      }),
    ),
    z.null(),
  ]),
  message: z.string(),
});

export const zGetLikeCountOutputBody = z.object({
  $schema: z.string().url().readonly().optional(),
  count: z.number(),
  message: z.string(),
});

export const zGetOffsetPaginatedBusinessMembersOutputBody = z.object({
  $schema: z.string().url().readonly().optional(),
  hasMore: z.boolean(),
  members: z.union([z.array(zBusinessMemberWithRoleNameAndAccount), z.null()]),
  message: z.string(),
  total: z.number(),
});

export const zGetOffsetPaginatedInvestmentsOutputBody = z.object({
  $schema: z.string().url().readonly().optional(),
  hasMore: z.boolean(),
  investments: z.union([
    z.array(
      z.object({
        $schema: z.string().url().readonly().optional(),
        approved_at: z.string().datetime().optional(),
        completed_at: z.string().datetime().optional(),
        created_at: z.string().datetime(),
        deleted_at: z.union([z.string().datetime(), z.null()]),
        id: z.number().gte(1),
        investor_id: z.number(),
        payment_completed_at: z.string().datetime().optional(),
        payments: z
          .union([
            z.array(
              z.object({
                created_at: z.string().datetime(),
                deleted_at: z.union([z.string().datetime(), z.null()]),
                id: z.number(),
                investment_id: z.number(),
                status: z.enum([
                  "cancelled",
                  "processing",
                  "requires_action",
                  "requires_capture",
                  "requires_confirmation",
                  "requires_payment_method",
                  "succeeded",
                ]),
                stripe_payment_intent_client_secret: z.string(),
                stripe_payment_intent_id: z.string(),
                updated_at: z.union([z.string().datetime(), z.null()]),
              }),
            ),
            z.null(),
          ])
          .optional(),
        round_id: z.number(),
        share_quantity: z.number(),
        terms_completed_at: z.string().datetime().optional(),
        updated_at: z.union([z.string().datetime(), z.null()]),
      }),
    ),
    z.null(),
  ]),
  message: z.string(),
  total: z.number(),
});

export const zGetOffsetPaginatedRoundsOutputBody = z.object({
  $schema: z.string().url().readonly().optional(),
  hasMore: z.boolean(),
  message: z.string(),
  rounds: z.union([
    z.array(
      z.object({
        $schema: z.string().url().readonly().optional(),
        business_id: z.number().gte(1),
        created_at: z.string().datetime(),
        deleted_at: z.union([z.string().datetime(), z.null()]),
        description: z.string().min(10).max(3000),
        id: z.number().gte(1),
        price_per_share_usd_cents: z.number().gte(1),
        status: z.enum(["active", "successful", "failed"]),
        total_business_shares: z.number().gte(1),
        total_shares_for_sale: z.number().gte(1),
        updated_at: z.union([z.string().datetime(), z.null()]),
      }),
    ),
    z.null(),
  ]),
  total: z.number(),
});

export const zGetRoundCreateRequirementsOutputBody = z.object({
  $schema: z.string().url().readonly().optional(),
  message: z.string(),
  requirements: z.object({
    has_active_status: z.boolean(),
    legal_section: z.boolean(),
    stripe_account: z.boolean(),
  }),
});

export const zGetStripeAccountOutputBody = z.object({
  $schema: z.string().url().readonly().optional(),
  message: z.string(),
  stripeAccount: zBusinessStripeAccount,
});

export const zImpressionCountOutputBody = z.object({
  $schema: z.string().url().readonly().optional(),
  count: z.number(),
  message: z.string(),
});

export const zIndustry = z.object({
  created_at: z.string().datetime(),
  deleted_at: z.union([z.string().datetime(), z.null()]),
  id: z.number().gte(1),
  label: z.string().min(3).max(30),
  updated_at: z.union([z.string().datetime(), z.null()]),
});

export const zInvestment = z.object({
  $schema: z.string().url().readonly().optional(),
  approved_at: z.string().datetime().optional(),
  completed_at: z.string().datetime().optional(),
  created_at: z.string().datetime(),
  deleted_at: z.union([z.string().datetime(), z.null()]),
  id: z.number().gte(1),
  investor_id: z.number(),
  payment_completed_at: z.string().datetime().optional(),
  payments: z
    .union([
      z.array(
        z.object({
          created_at: z.string().datetime(),
          deleted_at: z.union([z.string().datetime(), z.null()]),
          id: z.number(),
          investment_id: z.number(),
          status: z.enum([
            "cancelled",
            "processing",
            "requires_action",
            "requires_capture",
            "requires_confirmation",
            "requires_payment_method",
            "succeeded",
          ]),
          stripe_payment_intent_client_secret: z.string(),
          stripe_payment_intent_id: z.string(),
          updated_at: z.union([z.string().datetime(), z.null()]),
        }),
      ),
      z.null(),
    ])
    .optional(),
  round_id: z.number(),
  share_quantity: z.number(),
  terms_completed_at: z.string().datetime().optional(),
  updated_at: z.union([z.string().datetime(), z.null()]),
});

export const zInvestmentPayment = z.object({
  created_at: z.string().datetime(),
  deleted_at: z.union([z.string().datetime(), z.null()]),
  id: z.number(),
  investment_id: z.number(),
  status: z.enum([
    "cancelled",
    "processing",
    "requires_action",
    "requires_capture",
    "requires_confirmation",
    "requires_payment_method",
    "succeeded",
  ]),
  stripe_payment_intent_client_secret: z.string(),
  stripe_payment_intent_id: z.string(),
  updated_at: z.union([z.string().datetime(), z.null()]),
});

export const zInvestmentPaymentIntentClientSecretOutputBody = z.object({
  $schema: z.string().url().readonly().optional(),
  clientSecret: z.string(),
  message: z.string(),
});

export const zIsFavouritedOutputBody = z.object({
  $schema: z.string().url().readonly().optional(),
  favourited: z.boolean(),
  message: z.string(),
});

export const zMessageResponse = z.object({
  $schema: z.string().url().readonly().optional(),
  message: z.string(),
});

export const zOnboardStripeConnectedAccountInputBody = z.object({
  $schema: z.string().url().readonly().optional(),
  refreshURL: z.string().default("https://fundlevel.app"),
  returnURL: z.string().default("https://fundlevel.app"),
});

export const zRolePermission = z.object({
  description: z.string(),
  id: z.number().gte(1),
  value: z.string(),
});

export const zRound = z.object({
  $schema: z.string().url().readonly().optional(),
  business_id: z.number().gte(1),
  created_at: z.string().datetime(),
  deleted_at: z.union([z.string().datetime(), z.null()]),
  description: z.string().min(10).max(3000),
  id: z.number().gte(1),
  price_per_share_usd_cents: z.number().gte(1),
  status: z.enum(["active", "successful", "failed"]),
  total_business_shares: z.number().gte(1),
  total_shares_for_sale: z.number().gte(1),
  updated_at: z.union([z.string().datetime(), z.null()]),
});

export const zRoundCreateRequirements = z.object({
  has_active_status: z.boolean(),
  legal_section: z.boolean(),
  stripe_account: z.boolean(),
});

export const zSafeAccount = z.object({
  created_at: z.string().datetime(),
  deleted_at: z.union([z.string().datetime(), z.null()]),
  first_name: z.string(),
  id: z.number().gte(1),
  last_name: z.string(),
  updated_at: z.union([z.string().datetime(), z.null()]),
});

export const zSingleAccountResponseBody = z.object({
  $schema: z.string().url().readonly().optional(),
  account: zAccount,
  message: z.string(),
});

export const zSingleBusinessResponseBody = z.object({
  $schema: z.string().url().readonly().optional(),
  business: zBusiness,
  message: z.string(),
});

export const zSingleInvestmentResponseBody = z.object({
  $schema: z.string().url().readonly().optional(),
  investment: zInvestment,
  message: z.string(),
});

export const zUrlOutputBody = z.object({
  $schema: z.string().url().readonly().optional(),
  message: z.string(),
  url: z.string(),
});

export const zUpdateAccountParams = z.object({
  $schema: z.string().url().readonly().optional(),
  first_name: z
    .string()
    .min(3)
    .max(30)
    .regex(/^[a-zA-Z]+$/),
  last_name: z
    .string()
    .min(3)
    .max(30)
    .regex(/^[a-zA-Z]+$/),
});

export const zUpsertBusinessLegalSectionParams = z.object({
  $schema: z.string().url().readonly().optional(),
  business_number: z.string().min(1).max(10),
});

export const zGetAccountResponse = zSingleAccountResponseBody;

export const zDeleteAccountResponse = z.void();

export const zUpdateAccountResponse = z.void();

export const zGetAccountBusinessesResponse = zGetBusinessesOutputBody;

export const zGetAccountInvestmentsByCursorResponse =
  zGetCursorPaginatedInvestmentsOutputBody;

export const zGetAccountInvestmentsByPageResponse =
  zGetOffsetPaginatedInvestmentsOutputBody;

export const zCreateBusinessImpressionResponse = zMessageResponse;

export const zDeleteBusinessFavouriteResponse = zMessageResponse;

export const zGetBusinessFavouriteStatusResponse = zIsFavouritedOutputBody;

export const zCreateBusinessFavouriteResponse = zMessageResponse;

export const zGetBusinessFavouriteCountResponse = zGetLikeCountOutputBody;

export const zGetBusinessImpressionCountResponse = zImpressionCountOutputBody;

export const zCreateRoundFavouriteResponse = zMessageResponse;

export const zCreateRoundImpressionResponse = zMessageResponse;

export const zDeleteRoundFavouriteResponse = zMessageResponse;

export const zGetRoundFavouriteStatusResponse = zIsFavouritedOutputBody;

export const zGetRoundFavouriteCountResponse = zGetLikeCountOutputBody;

export const zGetRoundImpressionCountResponse = zImpressionCountOutputBody;

export const zCreateBusinessResponse = zBusiness;

export const zGetBusinessStripeAccountResponse = zGetStripeAccountOutputBody;

export const zDeleteBusinessResponse = zMessageResponse;

export const zGetBusinessByIdResponse = zSingleBusinessResponseBody;

export const zGetBusinessTotalFundingResponse = zFundingOutputBody;

export const zGetBusinessInvestmentsByCursorResponse =
  zGetCursorPaginatedInvestmentsOutputBody;

export const zGetBusinessInvestmentsByPageResponse =
  zGetOffsetPaginatedInvestmentsOutputBody;

export const zGetBusinessMembersByPageResponse =
  zGetOffsetPaginatedBusinessMembersOutputBody;

export const zGetBusinessRoundCreateRequirementsResponse =
  zGetRoundCreateRequirementsOutputBody;

export const zGetBusinessMemberRolesResponse = zGetAllMemberRolesOutputBody;

export const zGetBusinessRoundsByCursorResponse =
  zGetCursorPaginatedRoundsOutputBody;

export const zGetBusinessRoundsByPageResponse =
  zGetOffsetPaginatedRoundsOutputBody;

export const zUpsertBusinessLegalSectionResponse = zMessageResponse;

export const zGetStripeDashboardUrlResponse = zUrlOutputBody;

export const zOnboardStripeConnectedAccountResponse = zUrlOutputBody;

export const zHealthCheckResponse = zMessageResponse;

export const zGetAllIndustriesResponse = zGetAllIndustriesResponseBody;

export const zCreateRoundInvestmentResponse = zInvestment;

export const zGetInvestmentByIdResponse = zSingleInvestmentResponseBody;

export const zGetInvestmentActivePaymentResponse =
  zGetInvestmentActivePaymentOutputBody;

export const zCreateInvestmentPaymentIntentResponse =
  zInvestmentPaymentIntentClientSecretOutputBody;

export const zGetInvestmentPaymentsResponse = zGetInvestmentPaymentsOutputBody;

export const zGetRoundByCursorResponse = zGetCursorPaginatedRoundsOutputBody;

export const zCreateRoundResponse = zRound;

export const zGetRoundsByPageResponse = zGetOffsetPaginatedRoundsOutputBody;

export const zDeleteRoundResponse = z.void();

export const zGetRoundByIdResponse = zRound;
