/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./types/db";

export const publicPlaidAccountSubtypeSchema = z.union([
  z.literal("401a"),
  z.literal("401k"),
  z.literal("403B"),
  z.literal("457b"),
  z.literal("529"),
  z.literal("auto"),
  z.literal("brokerage"),
  z.literal("business"),
  z.literal("cash isa"),
  z.literal("cash management"),
  z.literal("cd"),
  z.literal("checking"),
  z.literal("commercial"),
  z.literal("construction"),
  z.literal("consumer"),
  z.literal("credit card"),
  z.literal("crypto exchange"),
  z.literal("ebt"),
  z.literal("education savings account"),
  z.literal("fixed annuity"),
  z.literal("gic"),
  z.literal("health reimbursement arrangement"),
  z.literal("home equity"),
  z.literal("hsa"),
  z.literal("isa"),
  z.literal("ira"),
  z.literal("keogh"),
  z.literal("lif"),
  z.literal("life insurance"),
  z.literal("line of credit"),
  z.literal("lira"),
  z.literal("loan"),
  z.literal("lrif"),
  z.literal("lrsp"),
  z.literal("money market"),
  z.literal("mortgage"),
  z.literal("mutual fund"),
  z.literal("non-custodial wallet"),
  z.literal("non-taxable brokerage account"),
  z.literal("other"),
  z.literal("other insurance"),
  z.literal("other annuity"),
  z.literal("overdraft"),
  z.literal("paypal"),
  z.literal("payroll"),
  z.literal("pension"),
  z.literal("prepaid"),
  z.literal("prif"),
  z.literal("profit sharing plan"),
  z.literal("rdsp"),
  z.literal("resp"),
  z.literal("retirement"),
  z.literal("rlif"),
  z.literal("roth"),
  z.literal("roth 401k"),
  z.literal("rrif"),
  z.literal("rrsp"),
  z.literal("sarsep"),
  z.literal("savings"),
  z.literal("sep ira"),
  z.literal("simple ira"),
  z.literal("sipp"),
  z.literal("stock plan"),
  z.literal("student"),
  z.literal("thrift savings plan"),
  z.literal("tfsa"),
  z.literal("trust"),
  z.literal("ugma"),
  z.literal("utma"),
  z.literal("variable annuity"),
]);

export const publicPlaidAccountTypeSchema = z.union([
  z.literal("investment"),
  z.literal("credit"),
  z.literal("depository"),
  z.literal("loan"),
  z.literal("brokerage"),
  z.literal("other"),
]);

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const publicAccountsRowSchemaSchema = z.object({
  created_at: z.string(),
  email: z.string(),
  id: z.number(),
  updated_at: z.string().nullable(),
  user_id: z.string(),
});

export const publicAccountsInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  email: z.string(),
  id: z.number().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string(),
});

export const publicAccountsUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  email: z.string().optional(),
  id: z.number().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional(),
});

export const publicCompaniesRowSchemaSchema = z.object({
  created_at: z.string(),
  email: z.string(),
  id: z.number(),
  name: z.string(),
  owner_id: z.number(),
  updated_at: z.string().nullable(),
});

export const publicCompaniesInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  email: z.string(),
  id: z.number().optional(),
  name: z.string(),
  owner_id: z.number(),
  updated_at: z.string().optional().nullable(),
});

export const publicCompaniesUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  email: z.string().optional(),
  id: z.number().optional(),
  name: z.string().optional(),
  owner_id: z.number().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicCompaniesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("companies_owner_id_fkey"),
    columns: z.tuple([z.literal("owner_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("accounts"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPlaidBankAccountsRowSchemaSchema = z.object({
  available_balance: z.number().nullable(),
  company_id: z.number(),
  created_at: z.string(),
  current_balance: z.number().nullable(),
  iso_currency_code: z.string().nullable(),
  mask: z.string().nullable(),
  name: z.string(),
  official_name: z.string().nullable(),
  remaining_remote_content: jsonSchema,
  remote_id: z.string(),
  subtype: publicPlaidAccountSubtypeSchema.nullable(),
  type: publicPlaidAccountTypeSchema,
  unofficial_currency_code: z.string().nullable(),
  updated_at: z.string().nullable(),
});

export const publicPlaidBankAccountsInsertSchemaSchema = z.object({
  available_balance: z.number().optional().nullable(),
  company_id: z.number(),
  created_at: z.string().optional(),
  current_balance: z.number().optional().nullable(),
  iso_currency_code: z.string().optional().nullable(),
  mask: z.string().optional().nullable(),
  name: z.string(),
  official_name: z.string().optional().nullable(),
  remaining_remote_content: jsonSchema,
  remote_id: z.string(),
  subtype: publicPlaidAccountSubtypeSchema.optional().nullable(),
  type: publicPlaidAccountTypeSchema,
  unofficial_currency_code: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicPlaidBankAccountsUpdateSchemaSchema = z.object({
  available_balance: z.number().optional().nullable(),
  company_id: z.number().optional(),
  created_at: z.string().optional(),
  current_balance: z.number().optional().nullable(),
  iso_currency_code: z.string().optional().nullable(),
  mask: z.string().optional().nullable(),
  name: z.string().optional(),
  official_name: z.string().optional().nullable(),
  remaining_remote_content: jsonSchema.optional(),
  remote_id: z.string().optional(),
  subtype: publicPlaidAccountSubtypeSchema.optional().nullable(),
  type: publicPlaidAccountTypeSchema.optional(),
  unofficial_currency_code: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicPlaidBankAccountsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("plaid_bank_accounts_company_id_fkey"),
    columns: z.tuple([z.literal("company_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("companies"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPlaidCredentialsRowSchemaSchema = z.object({
  access_token: z.string(),
  company_id: z.number(),
  created_at: z.string(),
  item_id: z.string(),
  transaction_cursor: z.string().nullable(),
  updated_at: z.string().nullable(),
});

export const publicPlaidCredentialsInsertSchemaSchema = z.object({
  access_token: z.string(),
  company_id: z.number(),
  created_at: z.string().optional(),
  item_id: z.string(),
  transaction_cursor: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicPlaidCredentialsUpdateSchemaSchema = z.object({
  access_token: z.string().optional(),
  company_id: z.number().optional(),
  created_at: z.string().optional(),
  item_id: z.string().optional(),
  transaction_cursor: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicPlaidCredentialsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("plaid_credentials_company_id_fkey"),
    columns: z.tuple([z.literal("company_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("companies"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPlaidTransactionsRowSchemaSchema = z.object({
  bank_account_id: z.string().nullable(),
  company_id: z.number(),
  content: jsonSchema,
  created_at: z.string(),
  id: z.number(),
  remote_id: z.string(),
  updated_at: z.string().nullable(),
});

export const publicPlaidTransactionsInsertSchemaSchema = z.object({
  bank_account_id: z.string().optional().nullable(),
  company_id: z.number(),
  content: jsonSchema,
  created_at: z.string().optional(),
  id: z.number().optional(),
  remote_id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const publicPlaidTransactionsUpdateSchemaSchema = z.object({
  bank_account_id: z.string().optional().nullable(),
  company_id: z.number().optional(),
  content: jsonSchema.optional(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  remote_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicPlaidTransactionsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("plaid_transactions_bank_account_id_fkey"),
    columns: z.tuple([z.literal("bank_account_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("plaid_bank_accounts"),
    referencedColumns: z.tuple([z.literal("remote_id")]),
  }),
  z.object({
    foreignKeyName: z.literal("plaid_transactions_company_id_fkey"),
    columns: z.tuple([z.literal("company_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("companies"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicQuickBooksInvoicesRowSchemaSchema = z.object({
  company_id: z.number(),
  content: jsonSchema,
  created_at: z.string(),
  id: z.number(),
  remote_id: z.string(),
  updated_at: z.string().nullable(),
});

export const publicQuickBooksInvoicesInsertSchemaSchema = z.object({
  company_id: z.number(),
  content: jsonSchema,
  created_at: z.string().optional(),
  id: z.number().optional(),
  remote_id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const publicQuickBooksInvoicesUpdateSchemaSchema = z.object({
  company_id: z.number().optional(),
  content: jsonSchema.optional(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  remote_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicQuickBooksInvoicesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("quick_books_invoices_company_id_fkey"),
    columns: z.tuple([z.literal("company_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("companies"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicQuickBooksOauthCredentialsRowSchemaSchema = z.object({
  access_token: z.string(),
  access_token_expiry: z.string(),
  company_id: z.number(),
  created_at: z.string(),
  realm_id: z.string(),
  refresh_token: z.string(),
  refresh_token_expiry: z.string(),
  updated_at: z.string().nullable(),
});

export const publicQuickBooksOauthCredentialsInsertSchemaSchema = z.object({
  access_token: z.string(),
  access_token_expiry: z.string(),
  company_id: z.number().optional(),
  created_at: z.string().optional(),
  realm_id: z.string(),
  refresh_token: z.string(),
  refresh_token_expiry: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const publicQuickBooksOauthCredentialsUpdateSchemaSchema = z.object({
  access_token: z.string().optional(),
  access_token_expiry: z.string().optional(),
  company_id: z.number().optional(),
  created_at: z.string().optional(),
  realm_id: z.string().optional(),
  refresh_token: z.string().optional(),
  refresh_token_expiry: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicQuickBooksOauthCredentialsRelationshipsSchemaSchema =
  z.tuple([
    z.object({
      foreignKeyName: z.literal(
        "quick_books_oauth_credentials_company_id_fkey",
      ),
      columns: z.tuple([z.literal("company_id")]),
      isOneToOne: z.literal(true),
      referencedRelation: z.literal("companies"),
      referencedColumns: z.tuple([z.literal("id")]),
    }),
  ]);

export const publicQuickBooksOauthStatesRowSchemaSchema = z.object({
  auth_url: z.string(),
  company_id: z.number(),
  expires_at: z.string(),
  redirect_url: z.string(),
  state: z.string(),
});

export const publicQuickBooksOauthStatesInsertSchemaSchema = z.object({
  auth_url: z.string(),
  company_id: z.number().optional(),
  expires_at: z.string(),
  redirect_url: z.string(),
  state: z.string(),
});

export const publicQuickBooksOauthStatesUpdateSchemaSchema = z.object({
  auth_url: z.string().optional(),
  company_id: z.number().optional(),
  expires_at: z.string().optional(),
  redirect_url: z.string().optional(),
  state: z.string().optional(),
});

export const publicQuickBooksOauthStatesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("quick_books_oauth_states_company_id_fkey"),
    columns: z.tuple([z.literal("company_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("companies"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);
