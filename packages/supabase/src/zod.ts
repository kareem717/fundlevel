/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./types/db";

export const publicBankAccountHolderCategoriesSchema = z.union([
  z.literal("business"),
  z.literal("personal"),
  z.literal("unrecognized"),
]);

export const publicBankAccountSubTypesSchema = z.union([
  z.literal("401a"),
  z.literal("401k"),
  z.literal("403B"),
  z.literal("457b"),
  z.literal("529"),
  z.literal("auto"),
  z.literal("brokerage"),
  z.literal("business"),
  z.literal("cash isa"),
  z.literal("cash management"),
  z.literal("cd"),
  z.literal("checking"),
  z.literal("commercial"),
  z.literal("construction"),
  z.literal("consumer"),
  z.literal("credit card"),
  z.literal("crypto exchange"),
  z.literal("ebt"),
  z.literal("education savings account"),
  z.literal("fixed annuity"),
  z.literal("gic"),
  z.literal("health reimbursement arrangement"),
  z.literal("home equity"),
  z.literal("hsa"),
  z.literal("isa"),
  z.literal("ira"),
  z.literal("keogh"),
  z.literal("lif"),
  z.literal("life insurance"),
  z.literal("line of credit"),
  z.literal("lira"),
  z.literal("loan"),
  z.literal("lrif"),
  z.literal("lrsp"),
  z.literal("money market"),
  z.literal("mortgage"),
  z.literal("mutual fund"),
  z.literal("non-custodial wallet"),
  z.literal("non-taxable brokerage account"),
  z.literal("other"),
  z.literal("other insurance"),
  z.literal("other annuity"),
  z.literal("overdraft"),
  z.literal("paypal"),
  z.literal("payroll"),
  z.literal("pension"),
  z.literal("prepaid"),
  z.literal("prif"),
  z.literal("profit sharing plan"),
  z.literal("rdsp"),
  z.literal("resp"),
  z.literal("retirement"),
  z.literal("rlif"),
  z.literal("roth"),
  z.literal("roth 401k"),
  z.literal("rrif"),
  z.literal("rrsp"),
  z.literal("sarsep"),
  z.literal("savings"),
  z.literal("sep ira"),
  z.literal("simple ira"),
  z.literal("sipp"),
  z.literal("stock plan"),
  z.literal("student"),
  z.literal("thrift savings plan"),
  z.literal("tfsa"),
  z.literal("trust"),
  z.literal("ugma"),
  z.literal("utma"),
  z.literal("variable annuity"),
]);

export const publicBankAccountTypesSchema = z.union([
  z.literal("investment"),
  z.literal("credit"),
  z.literal("depository"),
  z.literal("loan"),
  z.literal("brokerage"),
  z.literal("other"),
]);

export const publicBankAccountVerificationStatusesSchema = z.union([
  z.literal("automatically_verified"),
  z.literal("pending_automatic_verification"),
  z.literal("pending_manual_verification"),
  z.literal("manually_verified"),
  z.literal("verification_expired"),
  z.literal("verification_failed"),
  z.literal("database_matched"),
  z.literal("database_insights_pass"),
  z.literal("database_insights_pass_with_caution"),
  z.literal("database_insights_fail"),
]);

export const publicInvoiceCurrenciesSchema = z.union([
  z.literal("USD"),
  z.literal("EUR"),
  z.literal("GBP"),
  z.literal("CAD"),
  z.literal("AUD"),
  z.literal("JPY"),
  z.literal("CNY"),
  z.literal("INR"),
  z.literal("BRL"),
  z.literal("MXN"),
]);

export const publicInvoiceStatusesSchema = z.union([
  z.literal("PAID"),
  z.literal("DRAFT"),
  z.literal("SUBMITTED"),
  z.literal("PARTIALLY_PAID"),
  z.literal("OPEN"),
  z.literal("VOID"),
]);

export const publicInvoiceTypesSchema = z.union([
  z.literal("ACCOUNTS_RECEIVABLE"),
  z.literal("ACCOUNTS_PAYABLE"),
]);

export const publicTransactionCodesSchema = z.union([
  z.literal("adjustment"),
  z.literal("atm"),
  z.literal("bank charge"),
  z.literal("bill payment"),
  z.literal("cash"),
  z.literal("cashback"),
  z.literal("cheque"),
  z.literal("direct debit"),
  z.literal("interest"),
  z.literal("purchase"),
  z.literal("standing order"),
  z.literal("transfer"),
]);

export const publicTransactionPaymentChannelsSchema = z.union([
  z.literal("online"),
  z.literal("in_store"),
  z.literal("other"),
]);

export const publicTransactionPersonalFinanceCategoryConfidenceLevelsSchema =
  z.union([
    z.literal("very_high"),
    z.literal("high"),
    z.literal("medium"),
    z.literal("low"),
    z.literal("unkown"),
  ]);

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const publicAccountsRowSchemaSchema = z.object({
  created_at: z.string(),
  email: z.string(),
  id: z.number(),
  updated_at: z.string().nullable(),
  user_id: z.string(),
});

export const publicAccountsInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  email: z.string(),
  id: z.number().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string(),
});

export const publicAccountsUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  email: z.string().optional(),
  id: z.number().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional(),
});

export const publicLinkedAccountMergeCredentialsRowSchemaSchema = z.object({
  access_token: z.string(),
  created_at: z.string(),
  linked_account_id: z.number(),
  updated_at: z.string().nullable(),
});

export const publicLinkedAccountMergeCredentialsInsertSchemaSchema = z.object({
  access_token: z.string(),
  created_at: z.string().optional(),
  linked_account_id: z.number(),
  updated_at: z.string().optional().nullable(),
});

export const publicLinkedAccountMergeCredentialsUpdateSchemaSchema = z.object({
  access_token: z.string().optional(),
  created_at: z.string().optional(),
  linked_account_id: z.number().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicLinkedAccountMergeCredentialsRelationshipsSchemaSchema =
  z.tuple([
    z.object({
      foreignKeyName: z.literal(
        "linked_account_merge_credentials_linked_account_id_fkey",
      ),
      columns: z.tuple([z.literal("linked_account_id")]),
      isOneToOne: z.literal(true),
      referencedRelation: z.literal("linked_accounts"),
      referencedColumns: z.tuple([z.literal("id")]),
    }),
  ]);

export const publicLinkedAccountPlaidCredentialsRowSchemaSchema = z.object({
  access_token: z.string(),
  created_at: z.string(),
  item_id: z.string(),
  linked_account_id: z.number(),
  updated_at: z.string().nullable(),
});

export const publicLinkedAccountPlaidCredentialsInsertSchemaSchema = z.object({
  access_token: z.string(),
  created_at: z.string().optional(),
  item_id: z.string(),
  linked_account_id: z.number(),
  updated_at: z.string().optional().nullable(),
});

export const publicLinkedAccountPlaidCredentialsUpdateSchemaSchema = z.object({
  access_token: z.string().optional(),
  created_at: z.string().optional(),
  item_id: z.string().optional(),
  linked_account_id: z.number().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicLinkedAccountPlaidCredentialsRelationshipsSchemaSchema =
  z.tuple([
    z.object({
      foreignKeyName: z.literal(
        "linked_account_plaid_credentials_linked_account_id_fkey",
      ),
      columns: z.tuple([z.literal("linked_account_id")]),
      isOneToOne: z.literal(true),
      referencedRelation: z.literal("linked_accounts"),
      referencedColumns: z.tuple([z.literal("id")]),
    }),
  ]);

export const publicLinkedAccountsRowSchemaSchema = z.object({
  created_at: z.string(),
  email: z.string(),
  id: z.number(),
  name: z.string(),
  owner_id: z.number(),
  updated_at: z.string().nullable(),
});

export const publicLinkedAccountsInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  email: z.string(),
  id: z.number().optional(),
  name: z.string(),
  owner_id: z.number(),
  updated_at: z.string().optional().nullable(),
});

export const publicLinkedAccountsUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  email: z.string().optional(),
  id: z.number().optional(),
  name: z.string().optional(),
  owner_id: z.number().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicLinkedAccountsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("linked_accounts_owner_id_fkey"),
    columns: z.tuple([z.literal("owner_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("accounts"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicMergeInvoicesRowSchemaSchema = z.object({
  accounting_period_id: z.string().nullable(),
  applied_payments: jsonSchema.nullable(),
  balance: z.number().nullable(),
  company_id: z.string().nullable(),
  contact_id: z.string().nullable(),
  created_at: z.string(),
  currency: publicInvoiceCurrenciesSchema.nullable(),
  due_date: z.string().nullable(),
  employee_id: z.string().nullable(),
  exchange_rate: z.string().nullable(),
  field_mappings: jsonSchema.nullable(),
  id: z.number(),
  inclusive_of_tax: z.boolean().nullable(),
  integration_remote_id: z.string().nullable(),
  issue_date: z.string().nullable(),
  line_items: jsonSchema.nullable(),
  linked_account_id: z.number(),
  memo: z.string().nullable(),
  merge_id: z.string().nullable(),
  modified_at: z.string().nullable(),
  number: z.string().nullable(),
  paid_on_date: z.string().nullable(),
  payment_term_id: z.string().nullable(),
  payments: jsonSchema.nullable(),
  purchase_orders: jsonSchema.nullable(),
  remote_data: jsonSchema.nullable(),
  remote_fields: jsonSchema.nullable(),
  remote_updated_at: z.string().nullable(),
  remote_was_deleted: z.boolean().nullable(),
  status: publicInvoiceStatusesSchema.nullable(),
  sub_total: z.number().nullable(),
  total_amount: z.number().nullable(),
  total_discount: z.number().nullable(),
  total_tax_amount: z.number().nullable(),
  tracking_categories: jsonSchema.nullable(),
  type: publicInvoiceTypesSchema.nullable(),
  updated_at: z.string().nullable(),
});

export const publicMergeInvoicesInsertSchemaSchema = z.object({
  accounting_period_id: z.string().optional().nullable(),
  applied_payments: jsonSchema.optional().nullable(),
  balance: z.number().optional().nullable(),
  company_id: z.string().optional().nullable(),
  contact_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  currency: publicInvoiceCurrenciesSchema.optional().nullable(),
  due_date: z.string().optional().nullable(),
  employee_id: z.string().optional().nullable(),
  exchange_rate: z.string().optional().nullable(),
  field_mappings: jsonSchema.optional().nullable(),
  id: z.number().optional(),
  inclusive_of_tax: z.boolean().optional().nullable(),
  integration_remote_id: z.string().optional().nullable(),
  issue_date: z.string().optional().nullable(),
  line_items: jsonSchema.optional().nullable(),
  linked_account_id: z.number(),
  memo: z.string().optional().nullable(),
  merge_id: z.string().optional().nullable(),
  modified_at: z.string().optional().nullable(),
  number: z.string().optional().nullable(),
  paid_on_date: z.string().optional().nullable(),
  payment_term_id: z.string().optional().nullable(),
  payments: jsonSchema.optional().nullable(),
  purchase_orders: jsonSchema.optional().nullable(),
  remote_data: jsonSchema.optional().nullable(),
  remote_fields: jsonSchema.optional().nullable(),
  remote_updated_at: z.string().optional().nullable(),
  remote_was_deleted: z.boolean().optional().nullable(),
  status: publicInvoiceStatusesSchema.optional().nullable(),
  sub_total: z.number().optional().nullable(),
  total_amount: z.number().optional().nullable(),
  total_discount: z.number().optional().nullable(),
  total_tax_amount: z.number().optional().nullable(),
  tracking_categories: jsonSchema.optional().nullable(),
  type: publicInvoiceTypesSchema.optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicMergeInvoicesUpdateSchemaSchema = z.object({
  accounting_period_id: z.string().optional().nullable(),
  applied_payments: jsonSchema.optional().nullable(),
  balance: z.number().optional().nullable(),
  company_id: z.string().optional().nullable(),
  contact_id: z.string().optional().nullable(),
  created_at: z.string().optional(),
  currency: publicInvoiceCurrenciesSchema.optional().nullable(),
  due_date: z.string().optional().nullable(),
  employee_id: z.string().optional().nullable(),
  exchange_rate: z.string().optional().nullable(),
  field_mappings: jsonSchema.optional().nullable(),
  id: z.number().optional(),
  inclusive_of_tax: z.boolean().optional().nullable(),
  integration_remote_id: z.string().optional().nullable(),
  issue_date: z.string().optional().nullable(),
  line_items: jsonSchema.optional().nullable(),
  linked_account_id: z.number().optional(),
  memo: z.string().optional().nullable(),
  merge_id: z.string().optional().nullable(),
  modified_at: z.string().optional().nullable(),
  number: z.string().optional().nullable(),
  paid_on_date: z.string().optional().nullable(),
  payment_term_id: z.string().optional().nullable(),
  payments: jsonSchema.optional().nullable(),
  purchase_orders: jsonSchema.optional().nullable(),
  remote_data: jsonSchema.optional().nullable(),
  remote_fields: jsonSchema.optional().nullable(),
  remote_updated_at: z.string().optional().nullable(),
  remote_was_deleted: z.boolean().optional().nullable(),
  status: publicInvoiceStatusesSchema.optional().nullable(),
  sub_total: z.number().optional().nullable(),
  total_amount: z.number().optional().nullable(),
  total_discount: z.number().optional().nullable(),
  total_tax_amount: z.number().optional().nullable(),
  tracking_categories: jsonSchema.optional().nullable(),
  type: publicInvoiceTypesSchema.optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicMergeInvoicesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("merge_invoices_linked_account_id_fkey"),
    columns: z.tuple([z.literal("linked_account_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("linked_accounts"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPlaidBankAccountsRowSchemaSchema = z.object({
  available_balance: z.number().nullable(),
  balance_last_updated_at: z.string().nullable(),
  created_at: z.string(),
  current_balance: z.number().nullable(),
  holder_category: publicBankAccountHolderCategoriesSchema.nullable(),
  id: z.number(),
  iso_currency_code: z.string().nullable(),
  limit_amount: z.number().nullable(),
  linked_account_id: z.number(),
  mask: z.string().nullable(),
  name: z.string(),
  official_name: z.string().nullable(),
  persistant_account_id: z.string(),
  remote_id: z.string(),
  subtype: publicBankAccountSubTypesSchema.nullable(),
  type: publicBankAccountTypesSchema,
  unofficial_currency_code: z.string().nullable(),
  updated_at: z.string().nullable(),
  verification_name: z.string(),
  verification_status: publicBankAccountVerificationStatusesSchema,
});

export const publicPlaidBankAccountsInsertSchemaSchema = z.object({
  available_balance: z.number().optional().nullable(),
  balance_last_updated_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  current_balance: z.number().optional().nullable(),
  holder_category: publicBankAccountHolderCategoriesSchema
    .optional()
    .nullable(),
  id: z.number().optional(),
  iso_currency_code: z.string().optional().nullable(),
  limit_amount: z.number().optional().nullable(),
  linked_account_id: z.number(),
  mask: z.string().optional().nullable(),
  name: z.string(),
  official_name: z.string().optional().nullable(),
  persistant_account_id: z.string(),
  remote_id: z.string(),
  subtype: publicBankAccountSubTypesSchema.optional().nullable(),
  type: publicBankAccountTypesSchema,
  unofficial_currency_code: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  verification_name: z.string(),
  verification_status: publicBankAccountVerificationStatusesSchema,
});

export const publicPlaidBankAccountsUpdateSchemaSchema = z.object({
  available_balance: z.number().optional().nullable(),
  balance_last_updated_at: z.string().optional().nullable(),
  created_at: z.string().optional(),
  current_balance: z.number().optional().nullable(),
  holder_category: publicBankAccountHolderCategoriesSchema
    .optional()
    .nullable(),
  id: z.number().optional(),
  iso_currency_code: z.string().optional().nullable(),
  limit_amount: z.number().optional().nullable(),
  linked_account_id: z.number().optional(),
  mask: z.string().optional().nullable(),
  name: z.string().optional(),
  official_name: z.string().optional().nullable(),
  persistant_account_id: z.string().optional(),
  remote_id: z.string().optional(),
  subtype: publicBankAccountSubTypesSchema.optional().nullable(),
  type: publicBankAccountTypesSchema.optional(),
  unofficial_currency_code: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  verification_name: z.string().optional(),
  verification_status: publicBankAccountVerificationStatusesSchema.optional(),
});

export const publicPlaidBankAccountsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("plaid_bank_accounts_linked_account_id_fkey"),
    columns: z.tuple([z.literal("linked_account_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("linked_accounts"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPlaidTransactionsRowSchemaSchema = z.object({
  account_owner: z.string().nullable(),
  amount: z.number(),
  authorized_date: z.string().nullable(),
  authorized_datetime: z.string().nullable(),
  check_number: z.string().nullable(),
  counterparties: jsonSchema.nullable(),
  created_at: z.string(),
  date: z.string(),
  id: z.number(),
  iso_currency_code: z.string().nullable(),
  location_address: z.string().nullable(),
  location_city: z.string().nullable(),
  location_country: z.string().nullable(),
  location_lat: z.number().nullable(),
  location_lon: z.number().nullable(),
  location_postal_code: z.string().nullable(),
  location_region: z.string().nullable(),
  location_store_number: z.string().nullable(),
  logo_url: z.string().nullable(),
  merchant_entity_id: z.string().nullable(),
  merchant_name: z.string().nullable(),
  name: z.string(),
  original_description: z.string().nullable(),
  payment_channel: publicTransactionPaymentChannelsSchema,
  payment_meta_by_order_of: z.string().nullable(),
  payment_meta_payee: z.string().nullable(),
  payment_meta_payer: z.string().nullable(),
  payment_meta_payment_method: z.string().nullable(),
  payment_meta_payment_processor: z.string().nullable(),
  payment_meta_ppd_id: z.string().nullable(),
  payment_meta_reference_number: z.string().nullable(),
  pending: z.boolean(),
  pending_transaction_id: z.string().nullable(),
  personal_finance_category_confidence_level:
    publicTransactionPersonalFinanceCategoryConfidenceLevelsSchema.nullable(),
  personal_finance_category_detailed: z.string().nullable(),
  personal_finance_category_icon_url: z.string(),
  personal_finance_category_primary: z.string().nullable(),
  plaid_bank_account_id: z.number(),
  posted_datetime: z.string().nullable(),
  transaction_code: publicTransactionCodesSchema.nullable(),
  transaction_id: z.string(),
  unofficial_currency_code: z.string().nullable(),
  updated_at: z.string().nullable(),
  website: z.string().nullable(),
});

export const publicPlaidTransactionsInsertSchemaSchema = z.object({
  account_owner: z.string().optional().nullable(),
  amount: z.number(),
  authorized_date: z.string().optional().nullable(),
  authorized_datetime: z.string().optional().nullable(),
  check_number: z.string().optional().nullable(),
  counterparties: jsonSchema.optional().nullable(),
  created_at: z.string().optional(),
  date: z.string(),
  id: z.number().optional(),
  iso_currency_code: z.string().optional().nullable(),
  location_address: z.string().optional().nullable(),
  location_city: z.string().optional().nullable(),
  location_country: z.string().optional().nullable(),
  location_lat: z.number().optional().nullable(),
  location_lon: z.number().optional().nullable(),
  location_postal_code: z.string().optional().nullable(),
  location_region: z.string().optional().nullable(),
  location_store_number: z.string().optional().nullable(),
  logo_url: z.string().optional().nullable(),
  merchant_entity_id: z.string().optional().nullable(),
  merchant_name: z.string().optional().nullable(),
  name: z.string(),
  original_description: z.string().optional().nullable(),
  payment_channel: publicTransactionPaymentChannelsSchema,
  payment_meta_by_order_of: z.string().optional().nullable(),
  payment_meta_payee: z.string().optional().nullable(),
  payment_meta_payer: z.string().optional().nullable(),
  payment_meta_payment_method: z.string().optional().nullable(),
  payment_meta_payment_processor: z.string().optional().nullable(),
  payment_meta_ppd_id: z.string().optional().nullable(),
  payment_meta_reference_number: z.string().optional().nullable(),
  pending: z.boolean(),
  pending_transaction_id: z.string().optional().nullable(),
  personal_finance_category_confidence_level:
    publicTransactionPersonalFinanceCategoryConfidenceLevelsSchema
      .optional()
      .nullable(),
  personal_finance_category_detailed: z.string().optional().nullable(),
  personal_finance_category_icon_url: z.string(),
  personal_finance_category_primary: z.string().optional().nullable(),
  plaid_bank_account_id: z.number(),
  posted_datetime: z.string().optional().nullable(),
  transaction_code: publicTransactionCodesSchema.optional().nullable(),
  transaction_id: z.string(),
  unofficial_currency_code: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
});

export const publicPlaidTransactionsUpdateSchemaSchema = z.object({
  account_owner: z.string().optional().nullable(),
  amount: z.number().optional(),
  authorized_date: z.string().optional().nullable(),
  authorized_datetime: z.string().optional().nullable(),
  check_number: z.string().optional().nullable(),
  counterparties: jsonSchema.optional().nullable(),
  created_at: z.string().optional(),
  date: z.string().optional(),
  id: z.number().optional(),
  iso_currency_code: z.string().optional().nullable(),
  location_address: z.string().optional().nullable(),
  location_city: z.string().optional().nullable(),
  location_country: z.string().optional().nullable(),
  location_lat: z.number().optional().nullable(),
  location_lon: z.number().optional().nullable(),
  location_postal_code: z.string().optional().nullable(),
  location_region: z.string().optional().nullable(),
  location_store_number: z.string().optional().nullable(),
  logo_url: z.string().optional().nullable(),
  merchant_entity_id: z.string().optional().nullable(),
  merchant_name: z.string().optional().nullable(),
  name: z.string().optional(),
  original_description: z.string().optional().nullable(),
  payment_channel: publicTransactionPaymentChannelsSchema.optional(),
  payment_meta_by_order_of: z.string().optional().nullable(),
  payment_meta_payee: z.string().optional().nullable(),
  payment_meta_payer: z.string().optional().nullable(),
  payment_meta_payment_method: z.string().optional().nullable(),
  payment_meta_payment_processor: z.string().optional().nullable(),
  payment_meta_ppd_id: z.string().optional().nullable(),
  payment_meta_reference_number: z.string().optional().nullable(),
  pending: z.boolean().optional(),
  pending_transaction_id: z.string().optional().nullable(),
  personal_finance_category_confidence_level:
    publicTransactionPersonalFinanceCategoryConfidenceLevelsSchema
      .optional()
      .nullable(),
  personal_finance_category_detailed: z.string().optional().nullable(),
  personal_finance_category_icon_url: z.string().optional(),
  personal_finance_category_primary: z.string().optional().nullable(),
  plaid_bank_account_id: z.number().optional(),
  posted_datetime: z.string().optional().nullable(),
  transaction_code: publicTransactionCodesSchema.optional().nullable(),
  transaction_id: z.string().optional(),
  unofficial_currency_code: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
  website: z.string().optional().nullable(),
});

export const publicPlaidTransactionsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("plaid_transactions_plaid_bank_account_id_fkey"),
    columns: z.tuple([z.literal("plaid_bank_account_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("plaid_bank_accounts"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);
