/*
 * ==========================================
 * |          GENERATED BY SUPAZOD          |
 * ==========================================
 */

import { z } from "zod";
import { type Json } from "./types/db";

export const jsonSchema: z.ZodSchema<Json> = z.lazy(() =>
  z
    .union([
      z.string(),
      z.number(),
      z.boolean(),
      z.record(z.union([jsonSchema, z.undefined()])),
      z.array(jsonSchema),
    ])
    .nullable(),
);

export const publicAccountsRowSchemaSchema = z.object({
  created_at: z.string(),
  email: z.string(),
  id: z.number(),
  updated_at: z.string().nullable(),
  user_id: z.string(),
});

export const publicAccountsInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  email: z.string(),
  id: z.number().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string(),
});

export const publicAccountsUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  email: z.string().optional(),
  id: z.number().optional(),
  updated_at: z.string().optional().nullable(),
  user_id: z.string().optional(),
});

export const publicCompaniesRowSchemaSchema = z.object({
  created_at: z.string(),
  email: z.string(),
  id: z.number(),
  name: z.string(),
  owner_id: z.number(),
  updated_at: z.string().nullable(),
});

export const publicCompaniesInsertSchemaSchema = z.object({
  created_at: z.string().optional(),
  email: z.string(),
  id: z.number().optional(),
  name: z.string(),
  owner_id: z.number(),
  updated_at: z.string().optional().nullable(),
});

export const publicCompaniesUpdateSchemaSchema = z.object({
  created_at: z.string().optional(),
  email: z.string().optional(),
  id: z.number().optional(),
  name: z.string().optional(),
  owner_id: z.number().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicCompaniesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("companies_owner_id_fkey"),
    columns: z.tuple([z.literal("owner_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("accounts"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPlaidBankAccountsRowSchemaSchema = z.object({
  company_id: z.number(),
  content: jsonSchema,
  created_at: z.string(),
  id: z.number(),
  remote_id: z.string(),
  updated_at: z.string().nullable(),
});

export const publicPlaidBankAccountsInsertSchemaSchema = z.object({
  company_id: z.number(),
  content: jsonSchema,
  created_at: z.string().optional(),
  id: z.number().optional(),
  remote_id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const publicPlaidBankAccountsUpdateSchemaSchema = z.object({
  company_id: z.number().optional(),
  content: jsonSchema.optional(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  remote_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicPlaidBankAccountsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("plaid_bank_accounts_company_id_fkey"),
    columns: z.tuple([z.literal("company_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("companies"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPlaidCredentialsRowSchemaSchema = z.object({
  access_token: z.string(),
  company_id: z.number(),
  created_at: z.string(),
  item_id: z.string(),
  transaction_cursor: z.string().nullable(),
  updated_at: z.string().nullable(),
});

export const publicPlaidCredentialsInsertSchemaSchema = z.object({
  access_token: z.string(),
  company_id: z.number(),
  created_at: z.string().optional(),
  item_id: z.string(),
  transaction_cursor: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicPlaidCredentialsUpdateSchemaSchema = z.object({
  access_token: z.string().optional(),
  company_id: z.number().optional(),
  created_at: z.string().optional(),
  item_id: z.string().optional(),
  transaction_cursor: z.string().optional().nullable(),
  updated_at: z.string().optional().nullable(),
});

export const publicPlaidCredentialsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("plaid_credentials_company_id_fkey"),
    columns: z.tuple([z.literal("company_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("companies"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicPlaidTransactionsRowSchemaSchema = z.object({
  account_id: z.string().nullable(),
  company_id: z.number(),
  content: jsonSchema,
  created_at: z.string(),
  id: z.number(),
  remote_id: z.string(),
  updated_at: z.string().nullable(),
});

export const publicPlaidTransactionsInsertSchemaSchema = z.object({
  account_id: z.string().optional().nullable(),
  company_id: z.number(),
  content: jsonSchema,
  created_at: z.string().optional(),
  id: z.number().optional(),
  remote_id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const publicPlaidTransactionsUpdateSchemaSchema = z.object({
  account_id: z.string().optional().nullable(),
  company_id: z.number().optional(),
  content: jsonSchema.optional(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  remote_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicPlaidTransactionsRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("plaid_transactions_company_id_fkey"),
    columns: z.tuple([z.literal("company_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("companies"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicQuickBooksInvoicesRowSchemaSchema = z.object({
  company_id: z.number(),
  content: jsonSchema,
  created_at: z.string(),
  id: z.number(),
  remote_id: z.string(),
  updated_at: z.string().nullable(),
});

export const publicQuickBooksInvoicesInsertSchemaSchema = z.object({
  company_id: z.number(),
  content: jsonSchema,
  created_at: z.string().optional(),
  id: z.number().optional(),
  remote_id: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const publicQuickBooksInvoicesUpdateSchemaSchema = z.object({
  company_id: z.number().optional(),
  content: jsonSchema.optional(),
  created_at: z.string().optional(),
  id: z.number().optional(),
  remote_id: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicQuickBooksInvoicesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("quick_books_invoices_company_id_fkey"),
    columns: z.tuple([z.literal("company_id")]),
    isOneToOne: z.literal(false),
    referencedRelation: z.literal("companies"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);

export const publicQuickBooksOauthCredentialsRowSchemaSchema = z.object({
  access_token: z.string(),
  access_token_expiry: z.string(),
  company_id: z.number(),
  created_at: z.string(),
  realm_id: z.string(),
  refresh_token: z.string(),
  refresh_token_expiry: z.string(),
  updated_at: z.string().nullable(),
});

export const publicQuickBooksOauthCredentialsInsertSchemaSchema = z.object({
  access_token: z.string(),
  access_token_expiry: z.string(),
  company_id: z.number().optional(),
  created_at: z.string().optional(),
  realm_id: z.string(),
  refresh_token: z.string(),
  refresh_token_expiry: z.string(),
  updated_at: z.string().optional().nullable(),
});

export const publicQuickBooksOauthCredentialsUpdateSchemaSchema = z.object({
  access_token: z.string().optional(),
  access_token_expiry: z.string().optional(),
  company_id: z.number().optional(),
  created_at: z.string().optional(),
  realm_id: z.string().optional(),
  refresh_token: z.string().optional(),
  refresh_token_expiry: z.string().optional(),
  updated_at: z.string().optional().nullable(),
});

export const publicQuickBooksOauthCredentialsRelationshipsSchemaSchema =
  z.tuple([
    z.object({
      foreignKeyName: z.literal(
        "quick_books_oauth_credentials_company_id_fkey",
      ),
      columns: z.tuple([z.literal("company_id")]),
      isOneToOne: z.literal(true),
      referencedRelation: z.literal("companies"),
      referencedColumns: z.tuple([z.literal("id")]),
    }),
  ]);

export const publicQuickBooksOauthStatesRowSchemaSchema = z.object({
  auth_url: z.string(),
  company_id: z.number(),
  expires_at: z.string(),
  redirect_url: z.string(),
  state: z.string(),
});

export const publicQuickBooksOauthStatesInsertSchemaSchema = z.object({
  auth_url: z.string(),
  company_id: z.number().optional(),
  expires_at: z.string(),
  redirect_url: z.string(),
  state: z.string(),
});

export const publicQuickBooksOauthStatesUpdateSchemaSchema = z.object({
  auth_url: z.string().optional(),
  company_id: z.number().optional(),
  expires_at: z.string().optional(),
  redirect_url: z.string().optional(),
  state: z.string().optional(),
});

export const publicQuickBooksOauthStatesRelationshipsSchemaSchema = z.tuple([
  z.object({
    foreignKeyName: z.literal("quick_books_oauth_states_company_id_fkey"),
    columns: z.tuple([z.literal("company_id")]),
    isOneToOne: z.literal(true),
    referencedRelation: z.literal("companies"),
    referencedColumns: z.tuple([z.literal("id")]),
  }),
]);
